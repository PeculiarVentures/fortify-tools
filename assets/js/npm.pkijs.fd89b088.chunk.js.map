{"version":3,"sources":["webpack:///./node_modules/pkijs/build/AltName.js","webpack:///./node_modules/pkijs/build/RSAPrivateKey.js","webpack:///./node_modules/pkijs/build/Extension.js","webpack:///./node_modules/pkijs/build/PBES2Params.js","webpack:///./node_modules/pkijs/build/GeneralName.js","webpack:///./node_modules/pkijs/build/Certificate.js","webpack:///./node_modules/pkijs/build/GeneralSubtree.js","webpack:///./node_modules/pkijs/build/SignedCertificateTimestampList.js","webpack:///./node_modules/pkijs/build/AccessDescription.js","webpack:///./node_modules/pkijs/build/GeneralNames.js","webpack:///./node_modules/pkijs/build/SubjectDirectoryAttributes.js","webpack:///./node_modules/pkijs/build/CRLDistributionPoints.js","webpack:///./node_modules/pkijs/build/PolicyInformation.js","webpack:///./node_modules/pkijs/build/AttributeTypeAndValue.js","webpack:///./node_modules/pkijs/build/CertificationRequest.js","webpack:///./node_modules/pkijs/build/AuthorityKeyIdentifier.js","webpack:///./node_modules/pkijs/build/ExtKeyUsage.js","webpack:///./node_modules/pkijs/build/Time.js","webpack:///./node_modules/pkijs/build/RelativeDistinguishedNames.js","webpack:///./node_modules/pkijs/node_modules/asn1js/build/asn1.js","webpack:///./node_modules/pkijs/build/DistributionPoint.js","webpack:///./node_modules/pkijs/build/NameConstraints.js","webpack:///./node_modules/pkijs/build/PolicyMapping.js","webpack:///./node_modules/pkijs/build/PrivateKeyUsagePeriod.js","webpack:///./node_modules/pkijs/build/PolicyQualifierInfo.js","webpack:///./node_modules/pkijs/build/common.js","webpack:///./node_modules/pkijs/build/RSASSAPSSParams.js","webpack:///./node_modules/pkijs/build/CertificatePolicies.js","webpack:///./node_modules/pkijs/build/Extensions.js","webpack:///./node_modules/pkijs/build/CryptoEngine.js","webpack:///./node_modules/pkijs/build/ECPublicKey.js","webpack:///./node_modules/pkijs/build/PrivateKeyInfo.js","webpack:///./node_modules/pkijs/build/Attribute.js","webpack:///./node_modules/pkijs/build/OtherPrimeInfo.js","webpack:///./node_modules/pkijs/build/PolicyConstraints.js","webpack:///./node_modules/pkijs/build/EncryptedContentInfo.js","webpack:///./node_modules/pkijs/build/BasicConstraints.js","webpack:///./node_modules/pkijs/build/AlgorithmIdentifier.js","webpack:///./node_modules/pkijs/build/RSAPublicKey.js","webpack:///./node_modules/pkijs/build/IssuingDistributionPoint.js","webpack:///./node_modules/pkijs/build/PublicKeyInfo.js","webpack:///./node_modules/pkijs/build/PBKDF2Params.js","webpack:///./node_modules/pkijs/build/ECPrivateKey.js","webpack:///./node_modules/pkijs/build/InfoAccess.js","webpack:///./node_modules/pkijs/build/PolicyMappings.js"],"names":["Object","defineProperty","exports","value","obj","asn1js","__esModule","newObj","key","prototype","hasOwnProperty","call","default","_interopRequireWildcard","_pvutils","_GeneralName","_GeneralName2","AltName","parameters","this","altNames","getParametersValue","defaultValues","fromSchema","schema","memberName","Error","names","Sequence","name","blockName","Repeated","clearProps","asn1","compareSchema","verified","result","Array","from","element","toSchema","toJSON","_OtherPrimeInfo","_OtherPrimeInfo2","RSAPrivateKey","version","modulus","publicExponent","privateExponent","prime1","prime2","exponent1","exponent2","coefficient","otherPrimeInfos","fromJSON","json","Integer","optional","otherPrimeInfosName","otherPrimeInfo","valueBlock","valueDec","convertFromDER","outputArray","push","convertToDER","jwk","n","toBase64","arrayBufferToString","valueHex","e","d","p","q","dp","dq","qi","oth","stringToArrayBuffer","fromBase64","_SubjectDirectoryAttributes2","_interopRequireDefault","_PrivateKeyUsagePeriod2","_AltName2","_BasicConstraints2","_IssuingDistributionPoint2","_GeneralNames2","_NameConstraints2","_CRLDistributionPoints2","_CertificatePolicies2","_PolicyMappings2","_AuthorityKeyIdentifier2","_PolicyConstraints2","_ExtKeyUsage2","_InfoAccess2","_SignedCertificateTimestampList2","Extension","extnID","critical","extnValue","OctetString","parsedValue","ObjectIdentifier","Boolean","toString","fromBER","offset","ex","parsingError","object","_AlgorithmIdentifier","_AlgorithmIdentifier2","PBES2Params","keyDerivationFunc","encryptionScheme","_RelativeDistinguishedNames","_RelativeDistinguishedNames2","builtInStandardAttributes","Constructed","idBlock","tagClass","tagNumber","country_name","Choice","NumericString","PrintableString","administration_domain_name","Primitive","network_address","isHexOnly","terminal_identifier","private_domain_name","organization_name","numeric_user_identifier","personal_name","organizational_unit_names","builtInDomainDefinedAttributes","extensionAttributes","Set","Any","GeneralName","type","memberValue","keys","length","directoryName","TeletexString","UniversalString","Utf8String","BmpString","otherName","rfc822Name","dNSName","x400Address","ediPartyName","uniformResourceIdentifier","iPAddress","registeredID","valueBER","toBER","IA5String","_object","_common","_Time2","_PublicKeyInfo2","_Extension2","_Extensions2","tbsCertificate","tbsCertificateVersion","tbsCertificateSerialNumber","signature","issuer","tbsCertificateValidity","notBefore","utcTimeName","generalTimeName","notAfter","subject","subjectPublicKeyInfo","tbsCertificateIssuerUniqueID","tbsCertificateSubjectUniqueID","extensions","Certificate","tbs","serialNumber","issuerUniqueID","subjectUniqueID","signatureAlgorithm","signatureValue","ArrayBuffer","BitString","valueBeforeDecode","encodeFlag","tbsSchema","encodeTBS","bufferToHexCodes","byteLength","getEngine","subtle","getPublicKey","hashAlgorithm","crypto","getCrypto","Promise","reject","digest","Uint8Array","subjectPublicKey","privateKey","sequence","resolve","engine","then","getSignatureParameters","signWithPrivateKey","issuerCertificate","isEqual","verifyWithPublicKey","GeneralSubtree","base","minimum","maximum","valueMinimum","valueMaximum","verifySCTsForCertificate","SignedCertificateTimestamp","undefined","_ref","_asyncToGenerator","certificate","logs","index","issuerId","stream","_bytestreamjs","SeqStream","preCert","i","timestamps","splice","appendView","appendUint24","_stream","_buffer","slice","_length","verifyArray","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","Symbol","iterator","next","done","timestamp","verifyResult","verify","err","return","_x","_x2","_x3","apply","arguments","_PublicKeyInfo","fn","gen","step","arg","info","error","logID","fromStream","Date","RawData","seqStream","ByteStream","buffer","data","blockLength","getUint16","getBlock","utilFromBase","extensionsLength","signatureLength","signatureData","toStream","appendUint16","appendChar","timeBuffer","timeView","baseArray","utilToBase","valueOf","_hashAlgorithm","_signatureAlgorithm","set","toLowerCase","_signature","dataType","_this","publicKeyInfo","logId","publicKeyBase64","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","log","log_id","algorithmId","SignedCertificateTimestampList","overallLength","timestampsData","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","timestampStream","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","view","AccessDescription","accessMethod","accessLocation","GeneralNames","generalNames","_Attribute","_Attribute2","SubjectDirectoryAttributes","attributes","_DistributionPoint","_DistributionPoint2","CRLDistributionPoints","distributionPoints","_PolicyQualifierInfo","_PolicyQualifierInfo2","PolicyInformation","policyIdentifier","policyQualifiers","AttributeTypeAndValue","typeValue","compareTo","VideotexString","GraphicString","VisibleString","GeneralString","CharacterString","value1","stringPrep","value2","localeCompare","isEqualBuffer","CertificationRequestInfo","CertificationRequestInfoVersion","CertificationRequestInfoAttributes","CertificationRequest","certificationRequestInfo","AuthorityKeyIdentifier","keyIdentifier","authorityCertIssuer","authorityCertSerialNumber","ExtKeyUsage","keyPurposes","Time","UTCTime","GeneralizedTime","toDate","valueDate","_slicedToArray","arr","isArray","_arr","_n","_d","_e","_s","_i","sliceIterator","TypeError","_AttributeTypeAndValue","_AttributeTypeAndValue2","RelativeDistinguishedNames","typesAndValues","repeatedSequence","repeatedSet","typeAndValue","RDN","entries","_ref2","TIME","Duration","DateTime","TimeOfDay","DATE","Enumerated","Null","EndOfContent","BaseBlock","verifySchema","inputBuffer","inputSchema","powers2","LocalBaseBlock","warnings","constructor","LocalHexBlock","BaseClass","super","inputOffset","inputLength","checkBufferParams","sizeOnly","LocalIdentificationBlock","isConstructed","retBuf","retView","firstOctet","number","encodedBuf","encodedView","size","curView","intBuffer","tagNumberMask","count","tagNumberBufferMaxLength","intTagNumberBuffer","tempBuffer","tempBufferView","LocalLengthBlock","isIndefiniteForm","lenBlock","longFormUsed","lengthBufferView","LocalValueBlock","valueBlockType","primitiveSchema","resultOffset","idBlockBuf","valueBlockSizeBuf","lenBlockBuf","valueBlockBuf","utilConcatBuf","indefBuf","indefView","LocalPrimitiveValueBlock","valueHexView","LocalConstructedValueBlock","initialOffset","initialLength","currentOffset","indefiniteLength","returnObject","LocalFromBER","concat","pop","valueBuf","LocalEndOfContentValueBlock","paramaters","LocalBooleanValueBlock","utilDecodeTC","LocalOctetStringValueBlock","currentBlockName","octetString","JSON","stringify","LocalBitStringValueBlock","unusedBits","bitString","LocalIntegerValueBlock","_value","_valueHex","_valueDec","utilEncodeTC","expectedLength","updatedValueHex","updatedView","viewAdd","first","second","c","firstView","secondView","firstViewCopy","firstViewCopyLength","secondViewCopy","secondViewCopyLength","counter","utilConcatView","power2","digits","newValue","viewSub","b","firstBit","currentByte","bitNumber","asn1View","flag","byteNumber","charAt","otherValue","integer","toDER","fromDER","LocalSidValueBlock","isFirstSid","tempValueHex","tempView","sidValue","LocalObjectIdentifierValueBlock","fromString","sidBlock","string","pos1","pos2","sid","indexOf","substr","plus","parsedSID","parseInt","isNaN","sidStr","sidArray","LocalUtf8StringValueBlock","fromBuffer","String","fromCharCode","decodeURIComponent","escape","inputString","str","unescape","encodeURIComponent","strLen","charCodeAt","LocalBmpStringValueBlock","copyBuffer","valueView","temp","Uint16Array","strLength","codeBuf","codeView","dif","j","LocalUniversalStringValueBlock","Uint32Array","LocalSimpleStringValueBlock","LocalSimpleStringBlock","year","month","day","hour","minute","fromDate","toBuffer","inputDate","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","UTC","parserArray","exec","padNumber","join","millisecond","getUTCMilliseconds","parser","isUTC","timeString","dateTimeString","fractionPart","hourDifference","minuteDifference","Number","multiplier","differencePosition","differenceString","fractionPointPosition","fractionPartCheck","fractionResult","Math","floor","tempDate","getUTCDay","local","incomingOffset","newASN1Type","newObject","inputObject","newType","localChangeType","root","inputData","choiceResult","_result","encodedId","schemaView","replace","admission","maxLength","_optional","arrayRoot","DistributionPoint","distributionPoint","reasons","cRLIssuer","distributionPointNames","cRLIssuerNames","internalValue","_GeneralSubtree","_GeneralSubtree2","NameConstraints","permittedSubtrees","excludedSubtrees","PolicyMapping","issuerDomainPolicy","subjectDomainPolicy","PrivateKeyUsagePeriod","localNotBefore","localNotAfter","PolicyQualifierInfo","policyQualifierId","qualifier","setEngine","getRandomValues","getOIDByAlgorithm","algorithm","getAlgorithmParameters","algorithmName","operation","createCMSECDSASignature","signatureBuffer","rBuffer","rInteger","sBuffer","sInteger","isSpace","cuttedResult","trim","createECDSASignatureFromCMS","cmsSignature","rValue","sValue","correctedLength","rValueView","rValueBufferCorrected","rValueViewCorrected","sValueView","sValueBufferCorrected","sValueViewCorrected","getAlgorithmByOID","oid","getHashAlgorithm","kdfWithCounter","kdf","hashFunction","Zbuffer","keydatalen","SharedInfo","hashLength","maxCounter","kdfArray","toUpperCase","quotient","all","incomingResult","combinedBuffer","currentCounter","found","newBuffer","newView","combinedView","_CryptoEngine","_CryptoEngine2","process","global","window","pid","pkijs","_engine","Counter","counterBuffer","counterView","self","engineName","cryptoObject","subtleObject","webkitSubtle","RSASSAPSSParams","maskGenAlgorithm","saltLength","trailerField","algorithmParams","_PolicyInformation","_PolicyInformation2","CertificatePolicies","certificatePolicies","_Extension","Extensions","extension","_PrivateKeyInfo2","_EncryptedContentInfo2","_RSASSAPSSParams2","_PBKDF2Params2","_PBES2Params2","makePKCS12B2Key","cryptoEngine","keyLength","password","salt","iterationCount","u","v","passwordViewInitial","passwordTransformed","passwordTransformedView","D","dView","sLen","ceil","S","sView","saltView","passwordLength","pLen","P","pView","passwordView","sPlusPLength","I","iView","internalSequence","_I","dAndI","dAndIView","roundBuffer","B","bView","k","iRound","sliceStart","sliceLength","chunk","x","l","resultBuffer","format","keyData","extractable","keyUsages","importKey","hash","alg","kty","ext","key_ops","publicKeyJSON","privateKeyInfo","privateKeyAlgorithm","privateKeyJSON","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","exportKey","parse","inputFormat","outputFormat","args","encrypt","decrypt","sign","generateKey","deriveKey","deriveBits","wrapKey","unwrapKey","usages","modulusLength","namedCurve","public","iv","iterations","params","contentEncryptionOID","contentEncryptionAlgorithm","pbkdf2OID","hmacOID","hmacHashAlgorithm","ivBuffer","ivView","saltBuffer","contentView","contentToEncrypt","pbkdf2Params","prf","pbes2Parameters","contentType","encryptedContent","encryptedContentInfo","dataBuffer","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","content","hmacAlgorithm","contentToStamp","signatureToVerify","contentToVerify","paramsObject","hashAlgorithmOID","pssParameters","shaAlgorithm","algorithmObject","algorithmParamsChecked","curveObject","fillPublicKeyParameters","publicKeyInfoBuffer","publicKeyInfoView","publicKey","hashAlgo","ECPublicKey","y","coordinateLength","crvName","crv","coodinateLength","convertBuffer","convertBufferView","_ECPrivateKey2","_RSAPrivateKey2","PrivateKeyInfo","parsedKey","privateKeyASN1","publicKeyJWK","Attribute","values","setName","OtherPrimeInfo","prime","exponent","r","t","PolicyConstraints","requireExplicitPolicy","inhibitPolicyMapping","field1","ber1","int1","field2","ber2","int2","EncryptedContentInfo","constrString","pieceView","_array","_view","sequenceLengthBlock","encryptedValue","BasicConstraints","cA","pathLenConstraint","AlgorithmIdentifier","algorithmIdentifier","RSAPublicKey","array","pow","nearestPowerOf2","IssuingDistributionPoint","onlyContainsUserCerts","onlyContainsCACerts","onlySomeReasons","indirectCRL","onlyContainsAttributeCerts","_ECPublicKey2","_RSAPublicKey2","PublicKeyInfo","publicKeyASN1","exportedKey","exception","PBKDF2Params","saltPrimitive","saltConstructed","_ECPublicKey","ECPrivateKey","compareWithDefault","publicKeyData","_AccessDescription","_AccessDescription2","InfoAccess","accessDescriptions","_PolicyMapping","_PolicyMapping2","PolicyMappings","mappings"],"mappings":"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","file":"assets/js/npm.pkijs.fd89b088.chunk.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nvar _GeneralName = require(\"./GeneralName.js\");\n\nvar _GeneralName2 = _interopRequireDefault(_GeneralName);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n/**\r\n * Class from RFC5280\r\n */\nclass AltName {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for AltName class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\t/**\r\n   * @type {Array.<GeneralName>}\r\n   * @desc Array of alternative names in GeneralName type\r\n   */\n\t\tthis.altNames = (0, _pvutils.getParametersValue)(parameters, \"altNames\", AltName.defaultValues(\"altNames\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"altNames\":\n\t\t\t\treturn [];\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for AltName class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * AltName ::= GeneralNames\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}) {\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} [blockName]\r\n   * @property {string} [altNames]\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\treturn new asn1js.Sequence({\n\t\t\tname: names.blockName || \"\",\n\t\t\tvalue: [new asn1js.Repeated({\n\t\t\t\tname: names.altNames || \"\",\n\t\t\t\tvalue: _GeneralName2.default.schema()\n\t\t\t})]\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Clear input data first\n\t\t(0, _pvutils.clearProps)(schema, [\"altNames\"]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, AltName.schema({\n\t\t\tnames: {\n\t\t\t\taltNames: \"altNames\"\n\t\t\t}\n\t\t}));\n\n\t\tif (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for AltName\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tif (\"altNames\" in asn1.result) this.altNames = Array.from(asn1.result.altNames, element => new _GeneralName2.default({ schema: element }));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: Array.from(this.altNames, element => element.toSchema())\n\t\t});\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\treturn {\n\t\t\taltNames: Array.from(this.altNames, element => element.toJSON())\n\t\t};\n\t}\n\t//**********************************************************************************\n}\nexports.default = AltName; //**************************************************************************************\n//# sourceMappingURL=AltName.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nvar _OtherPrimeInfo = require(\"./OtherPrimeInfo.js\");\n\nvar _OtherPrimeInfo2 = _interopRequireDefault(_OtherPrimeInfo);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n/**\r\n * Class from RFC3447\r\n */\nclass RSAPrivateKey {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for RSAPrivateKey class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\t/**\r\n   * @type {number}\r\n   * @desc version\r\n   */\n\t\tthis.version = (0, _pvutils.getParametersValue)(parameters, \"version\", RSAPrivateKey.defaultValues(\"version\"));\n\t\t/**\r\n   * @type {Integer}\r\n   * @desc modulus\r\n   */\n\t\tthis.modulus = (0, _pvutils.getParametersValue)(parameters, \"modulus\", RSAPrivateKey.defaultValues(\"modulus\"));\n\t\t/**\r\n   * @type {Integer}\r\n   * @desc publicExponent\r\n   */\n\t\tthis.publicExponent = (0, _pvutils.getParametersValue)(parameters, \"publicExponent\", RSAPrivateKey.defaultValues(\"publicExponent\"));\n\t\t/**\r\n   * @type {Integer}\r\n   * @desc privateExponent\r\n   */\n\t\tthis.privateExponent = (0, _pvutils.getParametersValue)(parameters, \"privateExponent\", RSAPrivateKey.defaultValues(\"privateExponent\"));\n\t\t/**\r\n   * @type {Integer}\r\n   * @desc prime1\r\n   */\n\t\tthis.prime1 = (0, _pvutils.getParametersValue)(parameters, \"prime1\", RSAPrivateKey.defaultValues(\"prime1\"));\n\t\t/**\r\n   * @type {Integer}\r\n   * @desc prime2\r\n   */\n\t\tthis.prime2 = (0, _pvutils.getParametersValue)(parameters, \"prime2\", RSAPrivateKey.defaultValues(\"prime2\"));\n\t\t/**\r\n   * @type {Integer}\r\n   * @desc exponent1\r\n   */\n\t\tthis.exponent1 = (0, _pvutils.getParametersValue)(parameters, \"exponent1\", RSAPrivateKey.defaultValues(\"exponent1\"));\n\t\t/**\r\n   * @type {Integer}\r\n   * @desc exponent2\r\n   */\n\t\tthis.exponent2 = (0, _pvutils.getParametersValue)(parameters, \"exponent2\", RSAPrivateKey.defaultValues(\"exponent2\"));\n\t\t/**\r\n   * @type {Integer}\r\n   * @desc coefficient\r\n   */\n\t\tthis.coefficient = (0, _pvutils.getParametersValue)(parameters, \"coefficient\", RSAPrivateKey.defaultValues(\"coefficient\"));\n\n\t\tif (\"otherPrimeInfos\" in parameters)\n\t\t\t/**\r\n    * @type {Array.<OtherPrimeInfo>}\r\n    * @desc otherPrimeInfos\r\n    */\n\t\t\tthis.otherPrimeInfos = (0, _pvutils.getParametersValue)(parameters, \"otherPrimeInfos\", RSAPrivateKey.defaultValues(\"otherPrimeInfos\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t\t//region If input argument array contains \"json\" for this object\n\t\tif (\"json\" in parameters) this.fromJSON(parameters.json);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"version\":\n\t\t\t\treturn 0;\n\t\t\tcase \"modulus\":\n\t\t\t\treturn new asn1js.Integer();\n\t\t\tcase \"publicExponent\":\n\t\t\t\treturn new asn1js.Integer();\n\t\t\tcase \"privateExponent\":\n\t\t\t\treturn new asn1js.Integer();\n\t\t\tcase \"prime1\":\n\t\t\t\treturn new asn1js.Integer();\n\t\t\tcase \"prime2\":\n\t\t\t\treturn new asn1js.Integer();\n\t\t\tcase \"exponent1\":\n\t\t\t\treturn new asn1js.Integer();\n\t\t\tcase \"exponent2\":\n\t\t\t\treturn new asn1js.Integer();\n\t\t\tcase \"coefficient\":\n\t\t\t\treturn new asn1js.Integer();\n\t\t\tcase \"otherPrimeInfos\":\n\t\t\t\treturn [];\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for RSAPrivateKey class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * RSAPrivateKey ::= Sequence {\r\n  *    version           Version,\r\n  *    modulus           Integer,  -- n\r\n  *    publicExponent    Integer,  -- e\r\n  *    privateExponent   Integer,  -- d\r\n  *    prime1            Integer,  -- p\r\n  *    prime2            Integer,  -- q\r\n  *    exponent1         Integer,  -- d mod (p-1)\r\n  *    exponent2         Integer,  -- d mod (q-1)\r\n  *    coefficient       Integer,  -- (inverse of q) mod p\r\n  *    otherPrimeInfos   OtherPrimeInfos OPTIONAL\r\n  * }\r\n  *\r\n  * OtherPrimeInfos ::= Sequence SIZE(1..MAX) OF OtherPrimeInfo\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}) {\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} [blockName]\r\n   * @property {string} [version]\r\n   * @property {string} [modulus]\r\n   * @property {string} [publicExponent]\r\n   * @property {string} [privateExponent]\r\n   * @property {string} [prime1]\r\n   * @property {string} [prime2]\r\n   * @property {string} [exponent1]\r\n   * @property {string} [exponent2]\r\n   * @property {string} [coefficient]\r\n   * @property {string} [otherPrimeInfosName]\r\n   * @property {Object} [otherPrimeInfo]\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\treturn new asn1js.Sequence({\n\t\t\tname: names.blockName || \"\",\n\t\t\tvalue: [new asn1js.Integer({ name: names.version || \"\" }), new asn1js.Integer({ name: names.modulus || \"\" }), new asn1js.Integer({ name: names.publicExponent || \"\" }), new asn1js.Integer({ name: names.privateExponent || \"\" }), new asn1js.Integer({ name: names.prime1 || \"\" }), new asn1js.Integer({ name: names.prime2 || \"\" }), new asn1js.Integer({ name: names.exponent1 || \"\" }), new asn1js.Integer({ name: names.exponent2 || \"\" }), new asn1js.Integer({ name: names.coefficient || \"\" }), new asn1js.Sequence({\n\t\t\t\toptional: true,\n\t\t\t\tvalue: [new asn1js.Repeated({\n\t\t\t\t\tname: names.otherPrimeInfosName || \"\",\n\t\t\t\t\tvalue: _OtherPrimeInfo2.default.schema(names.otherPrimeInfo || {})\n\t\t\t\t})]\n\t\t\t})]\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Clear input data first\n\t\t(0, _pvutils.clearProps)(schema, [\"version\", \"modulus\", \"publicExponent\", \"privateExponent\", \"prime1\", \"prime2\", \"exponent1\", \"exponent2\", \"coefficient\", \"otherPrimeInfos\"]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, RSAPrivateKey.schema({\n\t\t\tnames: {\n\t\t\t\tversion: \"version\",\n\t\t\t\tmodulus: \"modulus\",\n\t\t\t\tpublicExponent: \"publicExponent\",\n\t\t\t\tprivateExponent: \"privateExponent\",\n\t\t\t\tprime1: \"prime1\",\n\t\t\t\tprime2: \"prime2\",\n\t\t\t\texponent1: \"exponent1\",\n\t\t\t\texponent2: \"exponent2\",\n\t\t\t\tcoefficient: \"coefficient\",\n\t\t\t\totherPrimeInfo: {\n\t\t\t\t\tnames: {\n\t\t\t\t\t\tblockName: \"otherPrimeInfos\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tif (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for RSAPrivateKey\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\n\t\tthis.modulus = asn1.result.modulus.convertFromDER(256);\n\t\tthis.publicExponent = asn1.result.publicExponent;\n\t\tthis.privateExponent = asn1.result.privateExponent.convertFromDER(256);\n\t\tthis.prime1 = asn1.result.prime1.convertFromDER(128);\n\t\tthis.prime2 = asn1.result.prime2.convertFromDER(128);\n\t\tthis.exponent1 = asn1.result.exponent1.convertFromDER(128);\n\t\tthis.exponent2 = asn1.result.exponent2.convertFromDER(128);\n\t\tthis.coefficient = asn1.result.coefficient.convertFromDER(128);\n\n\t\tif (\"otherPrimeInfos\" in asn1.result) this.otherPrimeInfos = Array.from(asn1.result.otherPrimeInfos, element => new _OtherPrimeInfo2.default({ schema: element }));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\t//region Create array for output sequence\n\t\tconst outputArray = [];\n\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\n\t\toutputArray.push(this.modulus.convertToDER());\n\t\toutputArray.push(this.publicExponent);\n\t\toutputArray.push(this.privateExponent.convertToDER());\n\t\toutputArray.push(this.prime1.convertToDER());\n\t\toutputArray.push(this.prime2.convertToDER());\n\t\toutputArray.push(this.exponent1.convertToDER());\n\t\toutputArray.push(this.exponent2.convertToDER());\n\t\toutputArray.push(this.coefficient.convertToDER());\n\n\t\tif (\"otherPrimeInfos\" in this) {\n\t\t\toutputArray.push(new asn1js.Sequence({\n\t\t\t\tvalue: Array.from(this.otherPrimeInfos, element => element.toSchema())\n\t\t\t}));\n\t\t}\n\t\t//endregion\n\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: outputArray\n\t\t});\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\tconst jwk = {\n\t\t\tn: (0, _pvutils.toBase64)((0, _pvutils.arrayBufferToString)(this.modulus.valueBlock.valueHex), true, true, true),\n\t\t\te: (0, _pvutils.toBase64)((0, _pvutils.arrayBufferToString)(this.publicExponent.valueBlock.valueHex), true, true, true),\n\t\t\td: (0, _pvutils.toBase64)((0, _pvutils.arrayBufferToString)(this.privateExponent.valueBlock.valueHex), true, true, true),\n\t\t\tp: (0, _pvutils.toBase64)((0, _pvutils.arrayBufferToString)(this.prime1.valueBlock.valueHex), true, true, true),\n\t\t\tq: (0, _pvutils.toBase64)((0, _pvutils.arrayBufferToString)(this.prime2.valueBlock.valueHex), true, true, true),\n\t\t\tdp: (0, _pvutils.toBase64)((0, _pvutils.arrayBufferToString)(this.exponent1.valueBlock.valueHex), true, true, true),\n\t\t\tdq: (0, _pvutils.toBase64)((0, _pvutils.arrayBufferToString)(this.exponent2.valueBlock.valueHex), true, true, true),\n\t\t\tqi: (0, _pvutils.toBase64)((0, _pvutils.arrayBufferToString)(this.coefficient.valueBlock.valueHex), true, true, true)\n\t\t};\n\n\t\tif (\"otherPrimeInfos\" in this) jwk.oth = Array.from(this.otherPrimeInfos, element => element.toJSON());\n\n\t\treturn jwk;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert JSON value into current object\r\n  * @param {Object} json\r\n  */\n\tfromJSON(json) {\n\t\tif (\"n\" in json) this.modulus = new asn1js.Integer({ valueHex: (0, _pvutils.stringToArrayBuffer)((0, _pvutils.fromBase64)(json.n, true, true)) });else throw new Error(\"Absent mandatory parameter \\\"n\\\"\");\n\n\t\tif (\"e\" in json) this.publicExponent = new asn1js.Integer({ valueHex: (0, _pvutils.stringToArrayBuffer)((0, _pvutils.fromBase64)(json.e, true, true)) });else throw new Error(\"Absent mandatory parameter \\\"e\\\"\");\n\n\t\tif (\"d\" in json) this.privateExponent = new asn1js.Integer({ valueHex: (0, _pvutils.stringToArrayBuffer)((0, _pvutils.fromBase64)(json.d, true, true)) });else throw new Error(\"Absent mandatory parameter \\\"d\\\"\");\n\n\t\tif (\"p\" in json) this.prime1 = new asn1js.Integer({ valueHex: (0, _pvutils.stringToArrayBuffer)((0, _pvutils.fromBase64)(json.p, true, true)) });else throw new Error(\"Absent mandatory parameter \\\"p\\\"\");\n\n\t\tif (\"q\" in json) this.prime2 = new asn1js.Integer({ valueHex: (0, _pvutils.stringToArrayBuffer)((0, _pvutils.fromBase64)(json.q, true, true)) });else throw new Error(\"Absent mandatory parameter \\\"q\\\"\");\n\n\t\tif (\"dp\" in json) this.exponent1 = new asn1js.Integer({ valueHex: (0, _pvutils.stringToArrayBuffer)((0, _pvutils.fromBase64)(json.dp, true, true)) });else throw new Error(\"Absent mandatory parameter \\\"dp\\\"\");\n\n\t\tif (\"dq\" in json) this.exponent2 = new asn1js.Integer({ valueHex: (0, _pvutils.stringToArrayBuffer)((0, _pvutils.fromBase64)(json.dq, true, true)) });else throw new Error(\"Absent mandatory parameter \\\"dq\\\"\");\n\n\t\tif (\"qi\" in json) this.coefficient = new asn1js.Integer({ valueHex: (0, _pvutils.stringToArrayBuffer)((0, _pvutils.fromBase64)(json.qi, true, true)) });else throw new Error(\"Absent mandatory parameter \\\"qi\\\"\");\n\n\t\tif (\"oth\" in json) this.otherPrimeInfos = Array.from(json.oth, element => new _OtherPrimeInfo2.default({ json: element }));\n\t}\n\t//**********************************************************************************\n}\nexports.default = RSAPrivateKey; //**************************************************************************************\n//# sourceMappingURL=RSAPrivateKey.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nvar _SubjectDirectoryAttributes = require(\"./SubjectDirectoryAttributes.js\");\n\nvar _SubjectDirectoryAttributes2 = _interopRequireDefault(_SubjectDirectoryAttributes);\n\nvar _PrivateKeyUsagePeriod = require(\"./PrivateKeyUsagePeriod.js\");\n\nvar _PrivateKeyUsagePeriod2 = _interopRequireDefault(_PrivateKeyUsagePeriod);\n\nvar _AltName = require(\"./AltName.js\");\n\nvar _AltName2 = _interopRequireDefault(_AltName);\n\nvar _BasicConstraints = require(\"./BasicConstraints.js\");\n\nvar _BasicConstraints2 = _interopRequireDefault(_BasicConstraints);\n\nvar _IssuingDistributionPoint = require(\"./IssuingDistributionPoint.js\");\n\nvar _IssuingDistributionPoint2 = _interopRequireDefault(_IssuingDistributionPoint);\n\nvar _GeneralNames = require(\"./GeneralNames.js\");\n\nvar _GeneralNames2 = _interopRequireDefault(_GeneralNames);\n\nvar _NameConstraints = require(\"./NameConstraints.js\");\n\nvar _NameConstraints2 = _interopRequireDefault(_NameConstraints);\n\nvar _CRLDistributionPoints = require(\"./CRLDistributionPoints.js\");\n\nvar _CRLDistributionPoints2 = _interopRequireDefault(_CRLDistributionPoints);\n\nvar _CertificatePolicies = require(\"./CertificatePolicies.js\");\n\nvar _CertificatePolicies2 = _interopRequireDefault(_CertificatePolicies);\n\nvar _PolicyMappings = require(\"./PolicyMappings.js\");\n\nvar _PolicyMappings2 = _interopRequireDefault(_PolicyMappings);\n\nvar _AuthorityKeyIdentifier = require(\"./AuthorityKeyIdentifier.js\");\n\nvar _AuthorityKeyIdentifier2 = _interopRequireDefault(_AuthorityKeyIdentifier);\n\nvar _PolicyConstraints = require(\"./PolicyConstraints.js\");\n\nvar _PolicyConstraints2 = _interopRequireDefault(_PolicyConstraints);\n\nvar _ExtKeyUsage = require(\"./ExtKeyUsage.js\");\n\nvar _ExtKeyUsage2 = _interopRequireDefault(_ExtKeyUsage);\n\nvar _InfoAccess = require(\"./InfoAccess.js\");\n\nvar _InfoAccess2 = _interopRequireDefault(_InfoAccess);\n\nvar _SignedCertificateTimestampList = require(\"./SignedCertificateTimestampList.js\");\n\nvar _SignedCertificateTimestampList2 = _interopRequireDefault(_SignedCertificateTimestampList);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n/**\r\n * Class from RFC5280\r\n */\nclass Extension {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for Extension class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\t/**\r\n   * @type {string}\r\n   * @desc extnID\r\n   */\n\t\tthis.extnID = (0, _pvutils.getParametersValue)(parameters, \"extnID\", Extension.defaultValues(\"extnID\"));\n\t\t/**\r\n   * @type {boolean}\r\n   * @desc critical\r\n   */\n\t\tthis.critical = (0, _pvutils.getParametersValue)(parameters, \"critical\", Extension.defaultValues(\"critical\"));\n\t\t/**\r\n   * @type {OctetString}\r\n   * @desc extnValue\r\n   */\n\t\tif (\"extnValue\" in parameters) this.extnValue = new asn1js.OctetString({ valueHex: parameters.extnValue });else this.extnValue = Extension.defaultValues(\"extnValue\");\n\n\t\tif (\"parsedValue\" in parameters)\n\t\t\t/**\r\n    * @type {Object}\r\n    * @desc parsedValue\r\n    */\n\t\t\tthis.parsedValue = (0, _pvutils.getParametersValue)(parameters, \"parsedValue\", Extension.defaultValues(\"parsedValue\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"extnID\":\n\t\t\t\treturn \"\";\n\t\t\tcase \"critical\":\n\t\t\t\treturn false;\n\t\t\tcase \"extnValue\":\n\t\t\t\treturn new asn1js.OctetString();\n\t\t\tcase \"parsedValue\":\n\t\t\t\treturn {};\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for Extension class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * Extension  ::=  SEQUENCE  {\r\n  *    extnID      OBJECT IDENTIFIER,\r\n  *    critical    BOOLEAN DEFAULT FALSE,\r\n  *    extnValue   OCTET STRING\r\n  * }\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}) {\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} [blockName]\r\n   * @property {string} [extnID]\r\n   * @property {string} [critical]\r\n   * @property {string} [extnValue]\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\treturn new asn1js.Sequence({\n\t\t\tname: names.blockName || \"\",\n\t\t\tvalue: [new asn1js.ObjectIdentifier({ name: names.extnID || \"\" }), new asn1js.Boolean({\n\t\t\t\tname: names.critical || \"\",\n\t\t\t\toptional: true\n\t\t\t}), new asn1js.OctetString({ name: names.extnValue || \"\" })]\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Clear input data first\n\t\t(0, _pvutils.clearProps)(schema, [\"extnID\", \"critical\", \"extnValue\"]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tlet asn1 = asn1js.compareSchema(schema, schema, Extension.schema({\n\t\t\tnames: {\n\t\t\t\textnID: \"extnID\",\n\t\t\t\tcritical: \"critical\",\n\t\t\t\textnValue: \"extnValue\"\n\t\t\t}\n\t\t}));\n\n\t\tif (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for Extension\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.extnID = asn1.result.extnID.valueBlock.toString();\n\t\tif (\"critical\" in asn1.result) this.critical = asn1.result.critical.valueBlock.value;\n\t\tthis.extnValue = asn1.result.extnValue;\n\n\t\t//region Get \"parsedValue\" for well-known extensions\n\t\tasn1 = asn1js.fromBER(this.extnValue.valueBlock.valueHex);\n\t\tif (asn1.offset === -1) return;\n\n\t\tswitch (this.extnID) {\n\t\t\tcase \"2.5.29.9\":\n\t\t\t\t// SubjectDirectoryAttributes\n\t\t\t\ttry {\n\t\t\t\t\tthis.parsedValue = new _SubjectDirectoryAttributes2.default({ schema: asn1.result });\n\t\t\t\t} catch (ex) {\n\t\t\t\t\tthis.parsedValue = new _SubjectDirectoryAttributes2.default();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated SubjectDirectoryAttributes\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.14\":\n\t\t\t\t// SubjectKeyIdentifier\n\t\t\t\tthis.parsedValue = asn1.result; // Should be just a simple OCTETSTRING\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.15\":\n\t\t\t\t// KeyUsage\n\t\t\t\tthis.parsedValue = asn1.result; // Should be just a simple BITSTRING\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.16\":\n\t\t\t\t// PrivateKeyUsagePeriod\n\t\t\t\ttry {\n\t\t\t\t\tthis.parsedValue = new _PrivateKeyUsagePeriod2.default({ schema: asn1.result });\n\t\t\t\t} catch (ex) {\n\t\t\t\t\tthis.parsedValue = new _PrivateKeyUsagePeriod2.default();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated PrivateKeyUsagePeriod\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.17\": // SubjectAltName\n\t\t\tcase \"2.5.29.18\":\n\t\t\t\t// IssuerAltName\n\t\t\t\ttry {\n\t\t\t\t\tthis.parsedValue = new _AltName2.default({ schema: asn1.result });\n\t\t\t\t} catch (ex) {\n\t\t\t\t\tthis.parsedValue = new _AltName2.default();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated AltName\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.19\":\n\t\t\t\t// BasicConstraints\n\t\t\t\ttry {\n\t\t\t\t\tthis.parsedValue = new _BasicConstraints2.default({ schema: asn1.result });\n\t\t\t\t} catch (ex) {\n\t\t\t\t\tthis.parsedValue = new _BasicConstraints2.default();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated BasicConstraints\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.20\": // CRLNumber\n\t\t\tcase \"2.5.29.27\":\n\t\t\t\t// BaseCRLNumber (delta CRL indicator)\n\t\t\t\tthis.parsedValue = asn1.result; // Should be just a simple INTEGER\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.21\":\n\t\t\t\t// CRLReason\n\t\t\t\tthis.parsedValue = asn1.result; // Should be just a simple ENUMERATED\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.24\":\n\t\t\t\t// InvalidityDate\n\t\t\t\tthis.parsedValue = asn1.result; // Should be just a simple GeneralizedTime\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.28\":\n\t\t\t\t// IssuingDistributionPoint\n\t\t\t\ttry {\n\t\t\t\t\tthis.parsedValue = new _IssuingDistributionPoint2.default({ schema: asn1.result });\n\t\t\t\t} catch (ex) {\n\t\t\t\t\tthis.parsedValue = new _IssuingDistributionPoint2.default();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated IssuingDistributionPoint\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.29\":\n\t\t\t\t// CertificateIssuer\n\t\t\t\ttry {\n\t\t\t\t\tthis.parsedValue = new _GeneralNames2.default({ schema: asn1.result }); // Should be just a simple\n\t\t\t\t} catch (ex) {\n\t\t\t\t\tthis.parsedValue = new _GeneralNames2.default();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated GeneralNames\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.30\":\n\t\t\t\t// NameConstraints\n\t\t\t\ttry {\n\t\t\t\t\tthis.parsedValue = new _NameConstraints2.default({ schema: asn1.result });\n\t\t\t\t} catch (ex) {\n\t\t\t\t\tthis.parsedValue = new _NameConstraints2.default();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated NameConstraints\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.31\": // CRLDistributionPoints\n\t\t\tcase \"2.5.29.46\":\n\t\t\t\t// FreshestCRL\n\t\t\t\ttry {\n\t\t\t\t\tthis.parsedValue = new _CRLDistributionPoints2.default({ schema: asn1.result });\n\t\t\t\t} catch (ex) {\n\t\t\t\t\tthis.parsedValue = new _CRLDistributionPoints2.default();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated CRLDistributionPoints\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.32\":\n\t\t\t\t// CertificatePolicies\n\t\t\t\ttry {\n\t\t\t\t\tthis.parsedValue = new _CertificatePolicies2.default({ schema: asn1.result });\n\t\t\t\t} catch (ex) {\n\t\t\t\t\tthis.parsedValue = new _CertificatePolicies2.default();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated CertificatePolicies\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.33\":\n\t\t\t\t// PolicyMappings\n\t\t\t\ttry {\n\t\t\t\t\tthis.parsedValue = new _PolicyMappings2.default({ schema: asn1.result });\n\t\t\t\t} catch (ex) {\n\t\t\t\t\tthis.parsedValue = new _PolicyMappings2.default();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated CertificatePolicies\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.35\":\n\t\t\t\t// AuthorityKeyIdentifier\n\t\t\t\ttry {\n\t\t\t\t\tthis.parsedValue = new _AuthorityKeyIdentifier2.default({ schema: asn1.result });\n\t\t\t\t} catch (ex) {\n\t\t\t\t\tthis.parsedValue = new _AuthorityKeyIdentifier2.default();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated AuthorityKeyIdentifier\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.36\":\n\t\t\t\t// PolicyConstraints\n\t\t\t\ttry {\n\t\t\t\t\tthis.parsedValue = new _PolicyConstraints2.default({ schema: asn1.result });\n\t\t\t\t} catch (ex) {\n\t\t\t\t\tthis.parsedValue = new _PolicyConstraints2.default();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated PolicyConstraints\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.37\":\n\t\t\t\t// ExtKeyUsage\n\t\t\t\ttry {\n\t\t\t\t\tthis.parsedValue = new _ExtKeyUsage2.default({ schema: asn1.result });\n\t\t\t\t} catch (ex) {\n\t\t\t\t\tthis.parsedValue = new _ExtKeyUsage2.default();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated ExtKeyUsage\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.54\":\n\t\t\t\t// InhibitAnyPolicy\n\t\t\t\tthis.parsedValue = asn1.result; // Should be just a simple INTEGER\n\t\t\t\tbreak;\n\t\t\tcase \"1.3.6.1.5.5.7.1.1\": // AuthorityInfoAccess\n\t\t\tcase \"1.3.6.1.5.5.7.1.11\":\n\t\t\t\t// SubjectInfoAccess\n\t\t\t\ttry {\n\t\t\t\t\tthis.parsedValue = new _InfoAccess2.default({ schema: asn1.result });\n\t\t\t\t} catch (ex) {\n\t\t\t\t\tthis.parsedValue = new _InfoAccess2.default();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated InfoAccess\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"1.3.6.1.4.1.11129.2.4.2\":\n\t\t\t\t// SignedCertificateTimestampList\n\t\t\t\ttry {\n\t\t\t\t\tthis.parsedValue = new _SignedCertificateTimestampList2.default({ schema: asn1.result });\n\t\t\t\t} catch (ex) {\n\t\t\t\t\tthis.parsedValue = new _SignedCertificateTimestampList2.default();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated SignedCertificateTimestampList\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\t\t//endregion\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\t//region Create array for output sequence\n\t\tconst outputArray = [];\n\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.extnID }));\n\n\t\tif (this.critical !== Extension.defaultValues(\"critical\")) outputArray.push(new asn1js.Boolean({ value: this.critical }));\n\n\t\toutputArray.push(this.extnValue);\n\t\t//endregion\n\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: outputArray\n\t\t});\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\tconst object = {\n\t\t\textnID: this.extnID,\n\t\t\textnValue: this.extnValue.toJSON()\n\t\t};\n\n\t\tif (this.critical !== Extension.defaultValues(\"critical\")) object.critical = this.critical;\n\n\t\tif (\"parsedValue\" in this) {\n\t\t\tif (\"toJSON\" in this.parsedValue) object.parsedValue = this.parsedValue.toJSON();\n\t\t}\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\nexports.default = Extension; //**************************************************************************************\n//# sourceMappingURL=Extension.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nvar _AlgorithmIdentifier = require(\"./AlgorithmIdentifier.js\");\n\nvar _AlgorithmIdentifier2 = _interopRequireDefault(_AlgorithmIdentifier);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n/**\r\n * Class from RFC2898\r\n */\nclass PBES2Params {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for PBES2Params class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\t/**\r\n   * @type {AlgorithmIdentifier}\r\n   * @desc keyDerivationFunc\r\n   */\n\t\tthis.keyDerivationFunc = (0, _pvutils.getParametersValue)(parameters, \"keyDerivationFunc\", PBES2Params.defaultValues(\"keyDerivationFunc\"));\n\t\t/**\r\n   * @type {AlgorithmIdentifier}\r\n   * @desc encryptionScheme\r\n   */\n\t\tthis.encryptionScheme = (0, _pvutils.getParametersValue)(parameters, \"encryptionScheme\", PBES2Params.defaultValues(\"encryptionScheme\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"keyDerivationFunc\":\n\t\t\t\treturn new _AlgorithmIdentifier2.default();\n\t\t\tcase \"encryptionScheme\":\n\t\t\t\treturn new _AlgorithmIdentifier2.default();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for PBES2Params class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * PBES2-params ::= SEQUENCE {\r\n  *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},\r\n  *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}} }\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}) {\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} [blockName]\r\n   * @property {string} [keyDerivationFunc]\r\n   * @property {string} [encryptionScheme]\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\treturn new asn1js.Sequence({\n\t\t\tname: names.blockName || \"\",\n\t\t\tvalue: [_AlgorithmIdentifier2.default.schema(names.keyDerivationFunc || {}), _AlgorithmIdentifier2.default.schema(names.encryptionScheme || {})]\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Clear input data first\n\t\t(0, _pvutils.clearProps)(schema, [\"keyDerivationFunc\", \"encryptionScheme\"]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, PBES2Params.schema({\n\t\t\tnames: {\n\t\t\t\tkeyDerivationFunc: {\n\t\t\t\t\tnames: {\n\t\t\t\t\t\tblockName: \"keyDerivationFunc\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tencryptionScheme: {\n\t\t\t\t\tnames: {\n\t\t\t\t\t\tblockName: \"encryptionScheme\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tif (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for PBES2Params\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.keyDerivationFunc = new _AlgorithmIdentifier2.default({ schema: asn1.result.keyDerivationFunc });\n\t\tthis.encryptionScheme = new _AlgorithmIdentifier2.default({ schema: asn1.result.encryptionScheme });\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: [this.keyDerivationFunc.toSchema(), this.encryptionScheme.toSchema()]\n\t\t});\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\treturn {\n\t\t\tkeyDerivationFunc: this.keyDerivationFunc.toJSON(),\n\t\t\tencryptionScheme: this.encryptionScheme.toJSON()\n\t\t};\n\t}\n\t//**********************************************************************************\n}\nexports.default = PBES2Params; //**************************************************************************************\n//# sourceMappingURL=PBES2Params.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nvar _RelativeDistinguishedNames = require(\"./RelativeDistinguishedNames.js\");\n\nvar _RelativeDistinguishedNames2 = _interopRequireDefault(_RelativeDistinguishedNames);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n//region Additional asn1js schema elements existing inside GeneralName schema\n//**************************************************************************************\n/**\r\n * Schema for \"builtInStandardAttributes\" of \"ORAddress\"\r\n * @param {Object} parameters\r\n * @property {Object} [names]\r\n * @param {boolean} optional\r\n * @returns {Sequence}\r\n */\nfunction builtInStandardAttributes(parameters = {}, optional = false) {\n\t//builtInStandardAttributes ::= Sequence {\n\t//    country-name                  CountryName OPTIONAL,\n\t//    administration-domain-name    AdministrationDomainName OPTIONAL,\n\t//    network-address           [0] IMPLICIT NetworkAddress OPTIONAL,\n\t//    terminal-identifier       [1] IMPLICIT TerminalIdentifier OPTIONAL,\n\t//    private-domain-name       [2] PrivateDomainName OPTIONAL,\n\t//    organization-name         [3] IMPLICIT OrganizationName OPTIONAL,\n\t//    numeric-user-identifier   [4] IMPLICIT NumericUserIdentifier OPTIONAL,\n\t//    personal-name             [5] IMPLICIT PersonalName OPTIONAL,\n\t//    organizational-unit-names [6] IMPLICIT OrganizationalUnitNames OPTIONAL }\n\n\t/**\r\n  * @type {Object}\r\n  * @property {string} [country_name]\r\n  * @property {string} [administration_domain_name]\r\n  * @property {string} [network_address]\r\n  * @property {string} [terminal_identifier]\r\n  * @property {string} [private_domain_name]\r\n  * @property {string} [organization_name]\r\n  * @property {string} [numeric_user_identifier]\r\n  * @property {string} [personal_name]\r\n  * @property {string} [organizational_unit_names]\r\n  */\n\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\treturn new asn1js.Sequence({\n\t\toptional,\n\t\tvalue: [new asn1js.Constructed({\n\t\t\toptional: true,\n\t\t\tidBlock: {\n\t\t\t\ttagClass: 2, // APPLICATION-SPECIFIC\n\t\t\t\ttagNumber: 1 // [1]\n\t\t\t},\n\t\t\tname: names.country_name || \"\",\n\t\t\tvalue: [new asn1js.Choice({\n\t\t\t\tvalue: [new asn1js.NumericString(), new asn1js.PrintableString()]\n\t\t\t})]\n\t\t}), new asn1js.Constructed({\n\t\t\toptional: true,\n\t\t\tidBlock: {\n\t\t\t\ttagClass: 2, // APPLICATION-SPECIFIC\n\t\t\t\ttagNumber: 2 // [2]\n\t\t\t},\n\t\t\tname: names.administration_domain_name || \"\",\n\t\t\tvalue: [new asn1js.Choice({\n\t\t\t\tvalue: [new asn1js.NumericString(), new asn1js.PrintableString()]\n\t\t\t})]\n\t\t}), new asn1js.Primitive({\n\t\t\toptional: true,\n\t\t\tidBlock: {\n\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\ttagNumber: 0 // [0]\n\t\t\t},\n\t\t\tname: names.network_address || \"\",\n\t\t\tisHexOnly: true\n\t\t}), new asn1js.Primitive({\n\t\t\toptional: true,\n\t\t\tidBlock: {\n\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\ttagNumber: 1 // [1]\n\t\t\t},\n\t\t\tname: names.terminal_identifier || \"\",\n\t\t\tisHexOnly: true\n\t\t}), new asn1js.Constructed({\n\t\t\toptional: true,\n\t\t\tidBlock: {\n\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\ttagNumber: 2 // [2]\n\t\t\t},\n\t\t\tname: names.private_domain_name || \"\",\n\t\t\tvalue: [new asn1js.Choice({\n\t\t\t\tvalue: [new asn1js.NumericString(), new asn1js.PrintableString()]\n\t\t\t})]\n\t\t}), new asn1js.Primitive({\n\t\t\toptional: true,\n\t\t\tidBlock: {\n\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\ttagNumber: 3 // [3]\n\t\t\t},\n\t\t\tname: names.organization_name || \"\",\n\t\t\tisHexOnly: true\n\t\t}), new asn1js.Primitive({\n\t\t\toptional: true,\n\t\t\tname: names.numeric_user_identifier || \"\",\n\t\t\tidBlock: {\n\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\ttagNumber: 4 // [4]\n\t\t\t},\n\t\t\tisHexOnly: true\n\t\t}), new asn1js.Constructed({\n\t\t\toptional: true,\n\t\t\tname: names.personal_name || \"\",\n\t\t\tidBlock: {\n\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\ttagNumber: 5 // [5]\n\t\t\t},\n\t\t\tvalue: [new asn1js.Primitive({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tisHexOnly: true\n\t\t\t}), new asn1js.Primitive({\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tisHexOnly: true\n\t\t\t}), new asn1js.Primitive({\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 2 // [2]\n\t\t\t\t},\n\t\t\t\tisHexOnly: true\n\t\t\t}), new asn1js.Primitive({\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 3 // [3]\n\t\t\t\t},\n\t\t\t\tisHexOnly: true\n\t\t\t})]\n\t\t}), new asn1js.Constructed({\n\t\t\toptional: true,\n\t\t\tname: names.organizational_unit_names || \"\",\n\t\t\tidBlock: {\n\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\ttagNumber: 6 // [6]\n\t\t\t},\n\t\t\tvalue: [new asn1js.Repeated({\n\t\t\t\tvalue: new asn1js.PrintableString()\n\t\t\t})]\n\t\t})]\n\t});\n}\n//**************************************************************************************\n/**\r\n * Schema for \"builtInDomainDefinedAttributes\" of \"ORAddress\"\r\n * @param {boolean} optional\r\n * @returns {Sequence}\r\n */\nfunction builtInDomainDefinedAttributes(optional = false) {\n\treturn new asn1js.Sequence({\n\t\toptional,\n\t\tvalue: [new asn1js.PrintableString(), new asn1js.PrintableString()]\n\t});\n}\n//**************************************************************************************\n/**\r\n * Schema for \"builtInDomainDefinedAttributes\" of \"ORAddress\"\r\n * @param {boolean} optional\r\n * @returns {Set}\r\n */\nfunction extensionAttributes(optional = false) {\n\treturn new asn1js.Set({\n\t\toptional,\n\t\tvalue: [new asn1js.Primitive({\n\t\t\toptional: true,\n\t\t\tidBlock: {\n\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\ttagNumber: 0 // [0]\n\t\t\t},\n\t\t\tisHexOnly: true\n\t\t}), new asn1js.Constructed({\n\t\t\toptional: true,\n\t\t\tidBlock: {\n\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\ttagNumber: 1 // [1]\n\t\t\t},\n\t\t\tvalue: [new asn1js.Any()]\n\t\t})]\n\t});\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n/**\r\n * Class from RFC5280\r\n */\nclass GeneralName {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for GeneralName class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  * @property {number} [type] value type - from a tagged value (0 for \"otherName\", 1 for \"rfc822Name\" etc.)\r\n  * @property {Object} [value] asn1js object having GeneralName value (type depends on \"type\" value)\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\t/**\r\n   * @type {number}\r\n   * @desc value type - from a tagged value (0 for \"otherName\", 1 for \"rfc822Name\" etc.)\r\n   */\n\t\tthis.type = (0, _pvutils.getParametersValue)(parameters, \"type\", GeneralName.defaultValues(\"type\"));\n\t\t/**\r\n   * @type {Object}\r\n   * @desc asn1js object having GeneralName value (type depends on \"type\" value)\r\n   */\n\t\tthis.value = (0, _pvutils.getParametersValue)(parameters, \"value\", GeneralName.defaultValues(\"value\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"type\":\n\t\t\t\treturn 9;\n\t\t\tcase \"value\":\n\t\t\t\treturn {};\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for GeneralName class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Compare values with default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  * @param {*} memberValue Value to compare with default value\r\n  */\n\tstatic compareWithDefault(memberName, memberValue) {\n\t\tswitch (memberName) {\n\t\t\tcase \"type\":\n\t\t\t\treturn memberValue === GeneralName.defaultValues(memberName);\n\t\t\tcase \"value\":\n\t\t\t\treturn Object.keys(memberValue).length === 0;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for GeneralName class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * GeneralName ::= Choice {\r\n  *    otherName                       [0]     OtherName,\r\n  *    rfc822Name                      [1]     IA5String,\r\n  *    dNSName                         [2]     IA5String,\r\n  *    x400Address                     [3]     ORAddress,\r\n  *    directoryName                   [4]     value,\r\n  *    ediPartyName                    [5]     EDIPartyName,\r\n  *    uniformResourceIdentifier       [6]     IA5String,\r\n  *    iPAddress                       [7]     OCTET STRING,\r\n  *    registeredID                    [8]     OBJECT IDENTIFIER }\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}) {\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} [blockName]\r\n   * @property {Object} [directoryName]\r\n   * @property {Object} [builtInStandardAttributes]\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\treturn new asn1js.Choice({\n\t\t\tvalue: [new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tname: names.blockName || \"\",\n\t\t\t\tvalue: [new asn1js.ObjectIdentifier(), new asn1js.Constructed({\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: [new asn1js.Any()]\n\t\t\t\t})]\n\t\t\t}), new asn1js.Primitive({\n\t\t\t\tname: names.blockName || \"\",\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t}\n\t\t\t}), new asn1js.Primitive({\n\t\t\t\tname: names.blockName || \"\",\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 2 // [2]\n\t\t\t\t}\n\t\t\t}), new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 3 // [3]\n\t\t\t\t},\n\t\t\t\tname: names.blockName || \"\",\n\t\t\t\tvalue: [builtInStandardAttributes(names.builtInStandardAttributes || {}, false), builtInDomainDefinedAttributes(true), extensionAttributes(true)]\n\t\t\t}), new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 4 // [4]\n\t\t\t\t},\n\t\t\t\tname: names.blockName || \"\",\n\t\t\t\tvalue: [_RelativeDistinguishedNames2.default.schema(names.directoryName || {})]\n\t\t\t}), new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 5 // [5]\n\t\t\t\t},\n\t\t\t\tname: names.blockName || \"\",\n\t\t\t\tvalue: [new asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: [new asn1js.Choice({\n\t\t\t\t\t\tvalue: [new asn1js.TeletexString(), new asn1js.PrintableString(), new asn1js.UniversalString(), new asn1js.Utf8String(), new asn1js.BmpString()]\n\t\t\t\t\t})]\n\t\t\t\t}), new asn1js.Constructed({\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: [new asn1js.Choice({\n\t\t\t\t\t\tvalue: [new asn1js.TeletexString(), new asn1js.PrintableString(), new asn1js.UniversalString(), new asn1js.Utf8String(), new asn1js.BmpString()]\n\t\t\t\t\t})]\n\t\t\t\t})]\n\t\t\t}), new asn1js.Primitive({\n\t\t\t\tname: names.blockName || \"\",\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 6 // [6]\n\t\t\t\t}\n\t\t\t}), new asn1js.Primitive({\n\t\t\t\tname: names.blockName || \"\",\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 7 // [7]\n\t\t\t\t}\n\t\t\t}), new asn1js.Primitive({\n\t\t\t\tname: names.blockName || \"\",\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 8 // [8]\n\t\t\t\t}\n\t\t\t})]\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Clear input data first\n\t\t(0, _pvutils.clearProps)(schema, [\"blockName\", \"otherName\", \"rfc822Name\", \"dNSName\", \"x400Address\", \"directoryName\", \"ediPartyName\", \"uniformResourceIdentifier\", \"iPAddress\", \"registeredID\"]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, GeneralName.schema({\n\t\t\tnames: {\n\t\t\t\tblockName: \"blockName\",\n\t\t\t\totherName: \"otherName\",\n\t\t\t\trfc822Name: \"rfc822Name\",\n\t\t\t\tdNSName: \"dNSName\",\n\t\t\t\tx400Address: \"x400Address\",\n\t\t\t\tdirectoryName: {\n\t\t\t\t\tnames: {\n\t\t\t\t\t\tblockName: \"directoryName\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tediPartyName: \"ediPartyName\",\n\t\t\t\tuniformResourceIdentifier: \"uniformResourceIdentifier\",\n\t\t\t\tiPAddress: \"iPAddress\",\n\t\t\t\tregisteredID: \"registeredID\"\n\t\t\t}\n\t\t}));\n\n\t\tif (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for GeneralName\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.type = asn1.result.blockName.idBlock.tagNumber;\n\n\t\tswitch (this.type) {\n\t\t\tcase 0:\n\t\t\t\t// otherName\n\t\t\t\tthis.value = asn1.result.blockName;\n\t\t\t\tbreak;\n\t\t\tcase 1: // rfc822Name + dNSName + uniformResourceIdentifier\n\t\t\tcase 2:\n\t\t\tcase 6:\n\t\t\t\t{\n\t\t\t\t\tconst value = asn1.result.blockName;\n\n\t\t\t\t\tvalue.idBlock.tagClass = 1; // UNIVERSAL\n\t\t\t\t\tvalue.idBlock.tagNumber = 22; // IA5STRING\n\n\t\t\t\t\tconst valueBER = value.toBER(false);\n\n\t\t\t\t\tthis.value = asn1js.fromBER(valueBER).result.valueBlock.value;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\t// x400Address\n\t\t\t\tthis.value = asn1.result.blockName;\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\t// directoryName\n\t\t\t\tthis.value = new _RelativeDistinguishedNames2.default({ schema: asn1.result.directoryName });\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\t// ediPartyName\n\t\t\t\tthis.value = asn1.result.ediPartyName;\n\t\t\t\tbreak;\n\t\t\tcase 7:\n\t\t\t\t// iPAddress\n\t\t\t\tthis.value = new asn1js.OctetString({ valueHex: asn1.result.blockName.valueBlock.valueHex });\n\t\t\t\tbreak;\n\t\t\tcase 8:\n\t\t\t\t// registeredID\n\t\t\t\t{\n\t\t\t\t\tconst value = asn1.result.blockName;\n\n\t\t\t\t\tvalue.idBlock.tagClass = 1; // UNIVERSAL\n\t\t\t\t\tvalue.idBlock.tagNumber = 6; // ObjectIdentifier\n\n\t\t\t\t\tconst valueBER = value.toBER(false);\n\n\t\t\t\t\tthis.value = asn1js.fromBER(valueBER).result.valueBlock.toString(); // Getting a string representation of the ObjectIdentifier\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\tswitch (this.type) {\n\t\t\tcase 0:\n\t\t\tcase 3:\n\t\t\tcase 5:\n\t\t\t\treturn new asn1js.Constructed({\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: this.type\n\t\t\t\t\t},\n\t\t\t\t\tvalue: [this.value]\n\t\t\t\t});\n\t\t\tcase 1:\n\t\t\tcase 2:\n\t\t\tcase 6:\n\t\t\t\t{\n\t\t\t\t\tconst value = new asn1js.IA5String({ value: this.value });\n\n\t\t\t\t\tvalue.idBlock.tagClass = 3;\n\t\t\t\t\tvalue.idBlock.tagNumber = this.type;\n\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\tcase 4:\n\t\t\t\treturn new asn1js.Constructed({\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 4\n\t\t\t\t\t},\n\t\t\t\t\tvalue: [this.value.toSchema()]\n\t\t\t\t});\n\t\t\tcase 7:\n\t\t\t\t{\n\t\t\t\t\tconst value = this.value;\n\n\t\t\t\t\tvalue.idBlock.tagClass = 3;\n\t\t\t\t\tvalue.idBlock.tagNumber = this.type;\n\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\tcase 8:\n\t\t\t\t{\n\t\t\t\t\tconst value = new asn1js.ObjectIdentifier({ value: this.value });\n\n\t\t\t\t\tvalue.idBlock.tagClass = 3;\n\t\t\t\t\tvalue.idBlock.tagNumber = this.type;\n\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\treturn GeneralName.schema();\n\t\t}\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\tconst _object = {\n\t\t\ttype: this.type,\n\t\t\tvalue: \"\"\n\t\t};\n\n\t\tif (typeof this.value === \"string\") _object.value = this.value;else {\n\t\t\ttry {\n\t\t\t\t_object.value = this.value.toJSON();\n\t\t\t} catch (ex) {}\n\t\t}\n\n\t\treturn _object;\n\t}\n\t//**********************************************************************************\n}\nexports.default = GeneralName; //**************************************************************************************\n//# sourceMappingURL=GeneralName.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nvar _common = require(\"./common.js\");\n\nvar _AlgorithmIdentifier = require(\"./AlgorithmIdentifier.js\");\n\nvar _AlgorithmIdentifier2 = _interopRequireDefault(_AlgorithmIdentifier);\n\nvar _RelativeDistinguishedNames = require(\"./RelativeDistinguishedNames.js\");\n\nvar _RelativeDistinguishedNames2 = _interopRequireDefault(_RelativeDistinguishedNames);\n\nvar _Time = require(\"./Time.js\");\n\nvar _Time2 = _interopRequireDefault(_Time);\n\nvar _PublicKeyInfo = require(\"./PublicKeyInfo.js\");\n\nvar _PublicKeyInfo2 = _interopRequireDefault(_PublicKeyInfo);\n\nvar _Extension = require(\"./Extension.js\");\n\nvar _Extension2 = _interopRequireDefault(_Extension);\n\nvar _Extensions = require(\"./Extensions.js\");\n\nvar _Extensions2 = _interopRequireDefault(_Extensions);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\nfunction tbsCertificate(parameters = {}) {\n\t//TBSCertificate  ::=  SEQUENCE  {\n\t//    version         [0]  EXPLICIT Version DEFAULT v1,\n\t//    serialNumber         CertificateSerialNumber,\n\t//    signature            AlgorithmIdentifier,\n\t//    issuer               Name,\n\t//    validity             Validity,\n\t//    subject              Name,\n\t//    subjectPublicKeyInfo SubjectPublicKeyInfo,\n\t//    issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,\n\t//                         -- If present, version MUST be v2 or v3\n\t//    subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,\n\t//                         -- If present, version MUST be v2 or v3\n\t//    extensions      [3]  EXPLICIT Extensions OPTIONAL\n\t//    -- If present, version MUST be v3\n\t//}\n\n\t/**\r\n  * @type {Object}\r\n  * @property {string} [blockName]\r\n  * @property {string} [tbsCertificateVersion]\r\n  * @property {string} [tbsCertificateSerialNumber]\r\n  * @property {string} [signature]\r\n  * @property {string} [issuer]\r\n  * @property {string} [tbsCertificateValidity]\r\n  * @property {string} [notBefore]\r\n  * @property {string} [notAfter]\r\n  * @property {string} [subject]\r\n  * @property {string} [subjectPublicKeyInfo]\r\n  * @property {string} [tbsCertificateIssuerUniqueID]\r\n  * @property {string} [tbsCertificateSubjectUniqueID]\r\n  * @property {string} [extensions]\r\n  */\n\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\treturn new asn1js.Sequence({\n\t\tname: names.blockName || \"tbsCertificate\",\n\t\tvalue: [new asn1js.Constructed({\n\t\t\toptional: true,\n\t\t\tidBlock: {\n\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\ttagNumber: 0 // [0]\n\t\t\t},\n\t\t\tvalue: [new asn1js.Integer({ name: names.tbsCertificateVersion || \"tbsCertificate.version\" }) // EXPLICIT integer value\n\t\t\t]\n\t\t}), new asn1js.Integer({ name: names.tbsCertificateSerialNumber || \"tbsCertificate.serialNumber\" }), _AlgorithmIdentifier2.default.schema(names.signature || {\n\t\t\tnames: {\n\t\t\t\tblockName: \"tbsCertificate.signature\"\n\t\t\t}\n\t\t}), _RelativeDistinguishedNames2.default.schema(names.issuer || {\n\t\t\tnames: {\n\t\t\t\tblockName: \"tbsCertificate.issuer\"\n\t\t\t}\n\t\t}), new asn1js.Sequence({\n\t\t\tname: names.tbsCertificateValidity || \"tbsCertificate.validity\",\n\t\t\tvalue: [_Time2.default.schema(names.notBefore || {\n\t\t\t\tnames: {\n\t\t\t\t\tutcTimeName: \"tbsCertificate.notBefore\",\n\t\t\t\t\tgeneralTimeName: \"tbsCertificate.notBefore\"\n\t\t\t\t}\n\t\t\t}), _Time2.default.schema(names.notAfter || {\n\t\t\t\tnames: {\n\t\t\t\t\tutcTimeName: \"tbsCertificate.notAfter\",\n\t\t\t\t\tgeneralTimeName: \"tbsCertificate.notAfter\"\n\t\t\t\t}\n\t\t\t})]\n\t\t}), _RelativeDistinguishedNames2.default.schema(names.subject || {\n\t\t\tnames: {\n\t\t\t\tblockName: \"tbsCertificate.subject\"\n\t\t\t}\n\t\t}), _PublicKeyInfo2.default.schema(names.subjectPublicKeyInfo || {\n\t\t\tnames: {\n\t\t\t\tblockName: \"tbsCertificate.subjectPublicKeyInfo\"\n\t\t\t}\n\t\t}), new asn1js.Primitive({\n\t\t\tname: names.tbsCertificateIssuerUniqueID || \"tbsCertificate.issuerUniqueID\",\n\t\t\toptional: true,\n\t\t\tidBlock: {\n\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\ttagNumber: 1 // [1]\n\t\t\t}\n\t\t}), // IMPLICIT bistring value\n\t\tnew asn1js.Primitive({\n\t\t\tname: names.tbsCertificateSubjectUniqueID || \"tbsCertificate.subjectUniqueID\",\n\t\t\toptional: true,\n\t\t\tidBlock: {\n\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\ttagNumber: 2 // [2]\n\t\t\t}\n\t\t}), // IMPLICIT bistring value\n\t\tnew asn1js.Constructed({\n\t\t\toptional: true,\n\t\t\tidBlock: {\n\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\ttagNumber: 3 // [3]\n\t\t\t},\n\t\t\tvalue: [_Extensions2.default.schema(names.extensions || {\n\t\t\t\tnames: {\n\t\t\t\t\tblockName: \"tbsCertificate.extensions\"\n\t\t\t\t}\n\t\t\t})]\n\t\t}) // EXPLICIT SEQUENCE value\n\t\t]\n\t});\n}\n//**************************************************************************************\n/**\r\n * Class from RFC5280\r\n */\nclass Certificate {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for Certificate class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\t/**\r\n   * @type {ArrayBuffer}\r\n   * @desc ToBeSigned (TBS) part of the certificate\r\n   */\n\t\tthis.tbs = (0, _pvutils.getParametersValue)(parameters, \"tbs\", Certificate.defaultValues(\"tbs\"));\n\t\t/**\r\n   * @type {number}\r\n   * @desc Version number\r\n   */\n\t\tthis.version = (0, _pvutils.getParametersValue)(parameters, \"version\", Certificate.defaultValues(\"version\"));\n\t\t/**\r\n   * @type {Integer}\r\n   * @desc Serial number of the certificate\r\n   */\n\t\tthis.serialNumber = (0, _pvutils.getParametersValue)(parameters, \"serialNumber\", Certificate.defaultValues(\"serialNumber\"));\n\t\t/**\r\n   * @type {AlgorithmIdentifier}\r\n   * @desc This field contains the algorithm identifier for the algorithm used by the CA to sign the certificate\r\n   */\n\t\tthis.signature = (0, _pvutils.getParametersValue)(parameters, \"signature\", Certificate.defaultValues(\"signature\"));\n\t\t/**\r\n   * @type {RelativeDistinguishedNames}\r\n   * @desc The issuer field identifies the entity that has signed and issued the certificate\r\n   */\n\t\tthis.issuer = (0, _pvutils.getParametersValue)(parameters, \"issuer\", Certificate.defaultValues(\"issuer\"));\n\t\t/**\r\n   * @type {Time}\r\n   * @desc The date on which the certificate validity period begins\r\n   */\n\t\tthis.notBefore = (0, _pvutils.getParametersValue)(parameters, \"notBefore\", Certificate.defaultValues(\"notBefore\"));\n\t\t/**\r\n   * @type {Time}\r\n   * @desc The date on which the certificate validity period ends\r\n   */\n\t\tthis.notAfter = (0, _pvutils.getParametersValue)(parameters, \"notAfter\", Certificate.defaultValues(\"notAfter\"));\n\t\t/**\r\n   * @type {RelativeDistinguishedNames}\r\n   * @desc The subject field identifies the entity associated with the public key stored in the subject public key field\r\n   */\n\t\tthis.subject = (0, _pvutils.getParametersValue)(parameters, \"subject\", Certificate.defaultValues(\"subject\"));\n\t\t/**\r\n   * @type {PublicKeyInfo}\r\n   * @desc This field is used to carry the public key and identify the algorithm with which the key is used\r\n   */\n\t\tthis.subjectPublicKeyInfo = (0, _pvutils.getParametersValue)(parameters, \"subjectPublicKeyInfo\", Certificate.defaultValues(\"subjectPublicKeyInfo\"));\n\n\t\tif (\"issuerUniqueID\" in parameters)\n\t\t\t/**\r\n    * @type {ArrayBuffer}\r\n    * @desc The subject and issuer unique identifiers are present in the certificate to handle the possibility of reuse of subject and/or issuer names over time\r\n    */\n\t\t\tthis.issuerUniqueID = (0, _pvutils.getParametersValue)(parameters, \"issuerUniqueID\", Certificate.defaultValues(\"issuerUniqueID\"));\n\n\t\tif (\"subjectUniqueID\" in parameters)\n\t\t\t/**\r\n    * @type {ArrayBuffer}\r\n    * @desc The subject and issuer unique identifiers are present in the certificate to handle the possibility of reuse of subject and/or issuer names over time\r\n    */\n\t\t\tthis.subjectUniqueID = (0, _pvutils.getParametersValue)(parameters, \"subjectUniqueID\", Certificate.defaultValues(\"subjectUniqueID\"));\n\n\t\tif (\"extensions\" in parameters)\n\t\t\t/**\r\n    * @type {Array}\r\n    * @desc If present, this field is a SEQUENCE of one or more certificate extensions\r\n    */\n\t\t\tthis.extensions = (0, _pvutils.getParametersValue)(parameters, \"extensions\", Certificate.defaultValues(\"extensions\"));\n\n\t\t/**\r\n   * @type {AlgorithmIdentifier}\r\n   * @desc The signatureAlgorithm field contains the identifier for the cryptographic algorithm used by the CA to sign this certificate\r\n   */\n\t\tthis.signatureAlgorithm = (0, _pvutils.getParametersValue)(parameters, \"signatureAlgorithm\", Certificate.defaultValues(\"signatureAlgorithm\"));\n\t\t/**\r\n   * @type {BitString}\r\n   * @desc The signatureValue field contains a digital signature computed upon the ASN.1 DER encoded tbsCertificate\r\n   */\n\t\tthis.signatureValue = (0, _pvutils.getParametersValue)(parameters, \"signatureValue\", Certificate.defaultValues(\"signatureValue\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"tbs\":\n\t\t\t\treturn new ArrayBuffer(0);\n\t\t\tcase \"version\":\n\t\t\t\treturn 0;\n\t\t\tcase \"serialNumber\":\n\t\t\t\treturn new asn1js.Integer();\n\t\t\tcase \"signature\":\n\t\t\t\treturn new _AlgorithmIdentifier2.default();\n\t\t\tcase \"issuer\":\n\t\t\t\treturn new _RelativeDistinguishedNames2.default();\n\t\t\tcase \"notBefore\":\n\t\t\t\treturn new _Time2.default();\n\t\t\tcase \"notAfter\":\n\t\t\t\treturn new _Time2.default();\n\t\t\tcase \"subject\":\n\t\t\t\treturn new _RelativeDistinguishedNames2.default();\n\t\t\tcase \"subjectPublicKeyInfo\":\n\t\t\t\treturn new _PublicKeyInfo2.default();\n\t\t\tcase \"issuerUniqueID\":\n\t\t\t\treturn new ArrayBuffer(0);\n\t\t\tcase \"subjectUniqueID\":\n\t\t\t\treturn new ArrayBuffer(0);\n\t\t\tcase \"extensions\":\n\t\t\t\treturn [];\n\t\t\tcase \"signatureAlgorithm\":\n\t\t\t\treturn new _AlgorithmIdentifier2.default();\n\t\t\tcase \"signatureValue\":\n\t\t\t\treturn new asn1js.BitString();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for Certificate class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * Certificate  ::=  SEQUENCE  {\r\n  *    tbsCertificate       TBSCertificate,\r\n  *    signatureAlgorithm   AlgorithmIdentifier,\r\n  *    signatureValue       BIT STRING  }\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}) {\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} [blockName]\r\n   * @property {string} [tbsCertificate]\r\n   * @property {string} [signatureAlgorithm]\r\n   * @property {string} [signatureValue]\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\treturn new asn1js.Sequence({\n\t\t\tname: names.blockName || \"\",\n\t\t\tvalue: [tbsCertificate(names.tbsCertificate), _AlgorithmIdentifier2.default.schema(names.signatureAlgorithm || {\n\t\t\t\tnames: {\n\t\t\t\t\tblockName: \"signatureAlgorithm\"\n\t\t\t\t}\n\t\t\t}), new asn1js.BitString({ name: names.signatureValue || \"signatureValue\" })]\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Clear input data first\n\t\t(0, _pvutils.clearProps)(schema, [\"tbsCertificate\", \"tbsCertificate.extensions\", \"tbsCertificate.version\", \"tbsCertificate.serialNumber\", \"tbsCertificate.signature\", \"tbsCertificate.issuer\", \"tbsCertificate.notBefore\", \"tbsCertificate.notAfter\", \"tbsCertificate.subject\", \"tbsCertificate.subjectPublicKeyInfo\", \"tbsCertificate.issuerUniqueID\", \"tbsCertificate.subjectUniqueID\", \"signatureAlgorithm\", \"signatureValue\"]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, Certificate.schema({\n\t\t\tnames: {\n\t\t\t\ttbsCertificate: {\n\t\t\t\t\tnames: {\n\t\t\t\t\t\textensions: {\n\t\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\t\textensions: \"tbsCertificate.extensions\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tif (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for Certificate\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.tbs = asn1.result.tbsCertificate.valueBeforeDecode;\n\n\t\tif (\"tbsCertificate.version\" in asn1.result) this.version = asn1.result[\"tbsCertificate.version\"].valueBlock.valueDec;\n\t\tthis.serialNumber = asn1.result[\"tbsCertificate.serialNumber\"];\n\t\tthis.signature = new _AlgorithmIdentifier2.default({ schema: asn1.result[\"tbsCertificate.signature\"] });\n\t\tthis.issuer = new _RelativeDistinguishedNames2.default({ schema: asn1.result[\"tbsCertificate.issuer\"] });\n\t\tthis.notBefore = new _Time2.default({ schema: asn1.result[\"tbsCertificate.notBefore\"] });\n\t\tthis.notAfter = new _Time2.default({ schema: asn1.result[\"tbsCertificate.notAfter\"] });\n\t\tthis.subject = new _RelativeDistinguishedNames2.default({ schema: asn1.result[\"tbsCertificate.subject\"] });\n\t\tthis.subjectPublicKeyInfo = new _PublicKeyInfo2.default({ schema: asn1.result[\"tbsCertificate.subjectPublicKeyInfo\"] });\n\t\tif (\"tbsCertificate.issuerUniqueID\" in asn1.result) this.issuerUniqueID = asn1.result[\"tbsCertificate.issuerUniqueID\"].valueBlock.valueHex;\n\t\tif (\"tbsCertificate.subjectUniqueID\" in asn1.result) this.subjectUniqueID = asn1.result[\"tbsCertificate.subjectUniqueID\"].valueBlock.valueHex;\n\t\tif (\"tbsCertificate.extensions\" in asn1.result) this.extensions = Array.from(asn1.result[\"tbsCertificate.extensions\"], element => new _Extension2.default({ schema: element }));\n\n\t\tthis.signatureAlgorithm = new _AlgorithmIdentifier2.default({ schema: asn1.result.signatureAlgorithm });\n\t\tthis.signatureValue = asn1.result.signatureValue;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Create ASN.1 schema for existing values of TBS part for the certificate\r\n  */\n\tencodeTBS() {\n\t\t//region Create array for output sequence\n\t\tconst outputArray = [];\n\n\t\tif (\"version\" in this && this.version !== Certificate.defaultValues(\"version\")) {\n\t\t\toutputArray.push(new asn1js.Constructed({\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalue: [new asn1js.Integer({ value: this.version }) // EXPLICIT integer value\n\t\t\t\t]\n\t\t\t}));\n\t\t}\n\n\t\toutputArray.push(this.serialNumber);\n\t\toutputArray.push(this.signature.toSchema());\n\t\toutputArray.push(this.issuer.toSchema());\n\n\t\toutputArray.push(new asn1js.Sequence({\n\t\t\tvalue: [this.notBefore.toSchema(), this.notAfter.toSchema()]\n\t\t}));\n\n\t\toutputArray.push(this.subject.toSchema());\n\t\toutputArray.push(this.subjectPublicKeyInfo.toSchema());\n\n\t\tif (\"issuerUniqueID\" in this) {\n\t\t\toutputArray.push(new asn1js.Primitive({\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tvalueHex: this.issuerUniqueID\n\t\t\t}));\n\t\t}\n\t\tif (\"subjectUniqueID\" in this) {\n\t\t\toutputArray.push(new asn1js.Primitive({\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 2 // [2]\n\t\t\t\t},\n\t\t\t\tvalueHex: this.subjectUniqueID\n\t\t\t}));\n\t\t}\n\n\t\tif (\"extensions\" in this) {\n\t\t\toutputArray.push(new asn1js.Constructed({\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 3 // [3]\n\t\t\t\t},\n\t\t\t\tvalue: [new asn1js.Sequence({\n\t\t\t\t\tvalue: Array.from(this.extensions, element => element.toSchema())\n\t\t\t\t})]\n\t\t\t}));\n\t\t}\n\t\t//endregion\n\n\t\t//region Create and return output sequence\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: outputArray\n\t\t});\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema(encodeFlag = false) {\n\t\tlet tbsSchema = {};\n\n\t\t//region Decode stored TBS value\n\t\tif (encodeFlag === false) {\n\t\t\tif (this.tbs.length === 0) // No stored certificate TBS part\n\t\t\t\treturn Certificate.schema().value[0];\n\n\t\t\ttbsSchema = asn1js.fromBER(this.tbs).result;\n\t\t}\n\t\t//endregion\n\t\t//region Create TBS schema via assembling from TBS parts\n\t\telse tbsSchema = this.encodeTBS();\n\t\t//endregion\n\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: [tbsSchema, this.signatureAlgorithm.toSchema(), this.signatureValue]\n\t\t});\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\tconst object = {\n\t\t\ttbs: (0, _pvutils.bufferToHexCodes)(this.tbs, 0, this.tbs.byteLength),\n\t\t\tserialNumber: this.serialNumber.toJSON(),\n\t\t\tsignature: this.signature.toJSON(),\n\t\t\tissuer: this.issuer.toJSON(),\n\t\t\tnotBefore: this.notBefore.toJSON(),\n\t\t\tnotAfter: this.notAfter.toJSON(),\n\t\t\tsubject: this.subject.toJSON(),\n\t\t\tsubjectPublicKeyInfo: this.subjectPublicKeyInfo.toJSON(),\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\n\t\t\tsignatureValue: this.signatureValue.toJSON()\n\t\t};\n\n\t\tif (\"version\" in this && this.version !== Certificate.defaultValues(\"version\")) object.version = this.version;\n\n\t\tif (\"issuerUniqueID\" in this) object.issuerUniqueID = (0, _pvutils.bufferToHexCodes)(this.issuerUniqueID, 0, this.issuerUniqueID.byteLength);\n\n\t\tif (\"subjectUniqueID\" in this) object.subjectUniqueID = (0, _pvutils.bufferToHexCodes)(this.subjectUniqueID, 0, this.subjectUniqueID.byteLength);\n\n\t\tif (\"extensions\" in this) object.extensions = Array.from(this.extensions, element => element.toJSON());\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Importing public key for current certificate\r\n  */\n\tgetPublicKey(parameters = null) {\n\t\treturn (0, _common.getEngine)().subtle.getPublicKey(this.subjectPublicKeyInfo, this.signatureAlgorithm, parameters);\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Get hash value for subject public key (default SHA-1)\r\n  * @param {String} [hashAlgorithm=SHA-1] Hashing algorithm name\r\n  */\n\tgetKeyHash(hashAlgorithm = \"SHA-1\") {\n\t\t//region Get a \"crypto\" extension\n\t\tconst crypto = (0, _common.getCrypto)();\n\t\tif (typeof crypto === \"undefined\") return Promise.reject(\"Unable to create WebCrypto object\");\n\t\t//endregion\n\n\t\treturn crypto.digest({ name: hashAlgorithm }, new Uint8Array(this.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex));\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Make a signature for current value from TBS section\r\n  * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n  * @param {string} [hashAlgorithm=\"SHA-1\"] Hashing algorithm\r\n  */\n\tsign(privateKey, hashAlgorithm = \"SHA-1\") {\n\t\t//region Initial checking\n\t\t//region Check private key\n\t\tif (typeof privateKey === \"undefined\") return Promise.reject(\"Need to provide a private key for signing\");\n\t\t//endregion\n\t\t//endregion\n\n\t\t//region Initial variables\n\t\tlet sequence = Promise.resolve();\n\t\tlet parameters;\n\n\t\tconst engine = (0, _common.getEngine)();\n\t\t//endregion\n\n\t\t//region Get a \"default parameters\" for current algorithm and set correct signature algorithm\n\t\tsequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\n\n\t\tsequence = sequence.then(result => {\n\t\t\tparameters = result.parameters;\n\t\t\tthis.signature = result.signatureAlgorithm;\n\t\t\tthis.signatureAlgorithm = result.signatureAlgorithm;\n\t\t});\n\t\t//endregion\n\n\t\t//region Create TBS data for signing\n\t\tsequence = sequence.then(() => {\n\t\t\tthis.tbs = this.encodeTBS().toBER(false);\n\t\t});\n\t\t//endregion\n\n\t\t//region Signing TBS data on provided private key\n\t\tsequence = sequence.then(() => engine.subtle.signWithPrivateKey(this.tbs, privateKey, parameters));\n\n\t\tsequence = sequence.then(result => {\n\t\t\tthis.signatureValue = new asn1js.BitString({ valueHex: result });\n\t\t});\n\t\t//endregion\n\n\t\treturn sequence;\n\t}\n\t//**********************************************************************************\n\tverify(issuerCertificate = null) {\n\t\t//region Global variables\n\t\tlet subjectPublicKeyInfo = {};\n\t\t//endregion\n\n\t\t//region Set correct \"subjectPublicKeyInfo\" value\n\t\tif (issuerCertificate !== null) subjectPublicKeyInfo = issuerCertificate.subjectPublicKeyInfo;else {\n\t\t\tif (this.issuer.isEqual(this.subject)) // Self-signed certificate\n\t\t\t\tsubjectPublicKeyInfo = this.subjectPublicKeyInfo;\n\t\t}\n\n\t\tif (subjectPublicKeyInfo instanceof _PublicKeyInfo2.default === false) return Promise.reject(\"Please provide issuer certificate as a parameter\");\n\t\t//endregion\n\n\t\treturn (0, _common.getEngine)().subtle.verifyWithPublicKey(this.tbs, this.signatureValue, subjectPublicKeyInfo, this.signatureAlgorithm);\n\t}\n\t//**********************************************************************************\n}\nexports.default = Certificate; //**************************************************************************************\n//# sourceMappingURL=Certificate.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nvar _GeneralName = require(\"./GeneralName.js\");\n\nvar _GeneralName2 = _interopRequireDefault(_GeneralName);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n/**\r\n * Class from RFC5280\r\n */\nclass GeneralSubtree {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for GeneralSubtree class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\t/**\r\n   * @type {GeneralName}\r\n   * @desc base\r\n   */\n\t\tthis.base = (0, _pvutils.getParametersValue)(parameters, \"base\", GeneralSubtree.defaultValues(\"base\"));\n\n\t\t/**\r\n   * @type {number|Integer}\r\n   * @desc base\r\n   */\n\t\tthis.minimum = (0, _pvutils.getParametersValue)(parameters, \"minimum\", GeneralSubtree.defaultValues(\"minimum\"));\n\n\t\tif (\"maximum\" in parameters)\n\t\t\t/**\r\n    * @type {number|Integer}\r\n    * @desc minimum\r\n    */\n\t\t\tthis.maximum = (0, _pvutils.getParametersValue)(parameters, \"maximum\", GeneralSubtree.defaultValues(\"maximum\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"base\":\n\t\t\t\treturn new _GeneralName2.default();\n\t\t\tcase \"minimum\":\n\t\t\t\treturn 0;\n\t\t\tcase \"maximum\":\n\t\t\t\treturn 0;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for GeneralSubtree class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * GeneralSubtree ::= SEQUENCE {\r\n  *    base                    GeneralName,\r\n  *    minimum         [0]     BaseDistance DEFAULT 0,\r\n  *    maximum         [1]     BaseDistance OPTIONAL }\r\n  *\r\n  * BaseDistance ::= INTEGER (0..MAX)\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}) {\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} [blockName]\r\n   * @property {string} [base]\r\n   * @property {string} [minimum]\r\n   * @property {string} [maximum]\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\treturn new asn1js.Sequence({\n\t\t\tname: names.blockName || \"\",\n\t\t\tvalue: [_GeneralName2.default.schema(names.base || {}), new asn1js.Constructed({\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalue: [new asn1js.Integer({ name: names.minimum || \"\" })]\n\t\t\t}), new asn1js.Constructed({\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tvalue: [new asn1js.Integer({ name: names.maximum || \"\" })]\n\t\t\t})]\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Clear input data first\n\t\t(0, _pvutils.clearProps)(schema, [\"base\", \"minimum\", \"maximum\"]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, GeneralSubtree.schema({\n\t\t\tnames: {\n\t\t\t\tbase: {\n\t\t\t\t\tnames: {\n\t\t\t\t\t\tblockName: \"base\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tminimum: \"minimum\",\n\t\t\t\tmaximum: \"maximum\"\n\t\t\t}\n\t\t}));\n\n\t\tif (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for GeneralSubtree\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.base = new _GeneralName2.default({ schema: asn1.result.base });\n\n\t\tif (\"minimum\" in asn1.result) {\n\t\t\tif (asn1.result.minimum.valueBlock.isHexOnly) this.minimum = asn1.result.minimum;else this.minimum = asn1.result.minimum.valueBlock.valueDec;\n\t\t}\n\n\t\tif (\"maximum\" in asn1.result) {\n\t\t\tif (asn1.result.maximum.valueBlock.isHexOnly) this.maximum = asn1.result.maximum;else this.maximum = asn1.result.maximum.valueBlock.valueDec;\n\t\t}\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\t//region Create array for output sequence\n\t\tconst outputArray = [];\n\n\t\toutputArray.push(this.base.toSchema());\n\n\t\tif (this.minimum !== 0) {\n\t\t\tlet valueMinimum = 0;\n\n\t\t\tif (this.minimum instanceof asn1js.Integer) valueMinimum = this.minimum;else valueMinimum = new asn1js.Integer({ value: this.minimum });\n\n\t\t\toutputArray.push(new asn1js.Constructed({\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalue: [valueMinimum]\n\t\t\t}));\n\t\t}\n\n\t\tif (\"maximum\" in this) {\n\t\t\tlet valueMaximum = 0;\n\n\t\t\tif (this.maximum instanceof asn1js.Integer) valueMaximum = this.maximum;else valueMaximum = new asn1js.Integer({ value: this.maximum });\n\n\t\t\toutputArray.push(new asn1js.Constructed({\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tvalue: [valueMaximum]\n\t\t\t}));\n\t\t}\n\t\t//endregion\n\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: outputArray\n\t\t});\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\tconst object = {\n\t\t\tbase: this.base.toJSON()\n\t\t};\n\n\t\tif (this.minimum !== 0) {\n\t\t\tif (typeof this.minimum === \"number\") object.minimum = this.minimum;else object.minimum = this.minimum.toJSON();\n\t\t}\n\n\t\tif (\"maximum\" in this) {\n\t\t\tif (typeof this.maximum === \"number\") object.maximum = this.maximum;else object.maximum = this.maximum.toJSON();\n\t\t}\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\nexports.default = GeneralSubtree; //**************************************************************************************\n//# sourceMappingURL=GeneralSubtree.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.verifySCTsForCertificate = exports.SignedCertificateTimestamp = undefined;\n\n//**************************************************************************************\n/**\r\n * Verify SignedCertificateTimestamp for specific certificate content\r\n * @param {Certificate} certificate Certificate for which verification would be performed\r\n * @param {Certificate} issuerCertificate Certificate of the issuer of target certificate\r\n * @param {Object[]} logs Array of objects with information about each CT Log (like here: https://ct.grahamedgecombe.com/logs.json)\r\n * @param {String} logs.log_id Identifier of the CT Log encoded in BASE-64 format\r\n * @param {String} logs.key Public key of the CT Log encoded in BASE-64 format\r\n * @param {Number} [index=-1] Index of SignedCertificateTimestamp inside SignedCertificateTimestampList (for -1 would verify all)\r\n * @return {Array} Array of verification results\r\n */\nlet verifySCTsForCertificate = exports.verifySCTsForCertificate = (() => {\n\tvar _ref = _asyncToGenerator(function* (certificate, issuerCertificate, logs, index = -1) {\n\t\t//region Initial variables\n\t\tlet parsedValue = null;\n\t\tlet tbs;\n\t\tlet issuerId;\n\n\t\tconst stream = new _bytestreamjs.SeqStream();\n\n\t\tlet preCert;\n\t\t//endregion\n\n\t\t//region Get a \"crypto\" extension\n\t\tconst crypto = (0, _common.getCrypto)();\n\t\tif (typeof crypto === \"undefined\") return Promise.reject(\"Unable to create WebCrypto object\");\n\t\t//endregion\n\n\t\t//region Remove certificate extension\n\t\tfor (let i = 0; i < certificate.extensions.length; i++) {\n\t\t\tswitch (certificate.extensions[i].extnID) {\n\t\t\t\tcase \"1.3.6.1.4.1.11129.2.4.2\":\n\t\t\t\t\t{\n\t\t\t\t\t\tparsedValue = certificate.extensions[i].parsedValue;\n\n\t\t\t\t\t\tif (parsedValue.timestamps.length === 0) throw new Error(\"Nothing to verify in the certificate\");\n\n\t\t\t\t\t\tcertificate.extensions.splice(i, 1);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t}\n\t\t}\n\t\t//endregion\n\n\t\t//region Check we do have what to verify\n\t\tif (parsedValue === null) throw new Error(\"No SignedCertificateTimestampList extension in the specified certificate\");\n\t\t//endregion\n\n\t\t//region Prepare modifier TBS value\n\t\ttbs = certificate.encodeTBS().toBER(false);\n\t\t//endregion\n\n\t\t//region Initialize \"issuer_key_hash\" value\n\t\tissuerId = yield crypto.digest({ name: \"SHA-256\" }, new Uint8Array(issuerCertificate.subjectPublicKeyInfo.toSchema().toBER(false)));\n\t\t//endregion\n\n\t\t//region Make final \"PreCert\" value\n\t\tstream.appendView(new Uint8Array(issuerId));\n\t\tstream.appendUint24(tbs.byteLength);\n\t\tstream.appendView(new Uint8Array(tbs));\n\n\t\tpreCert = stream._stream._buffer.slice(0, stream._length);\n\t\t//endregion\n\n\t\t//region Call verification function for specified index\n\t\tif (index === -1) {\n\t\t\tconst verifyArray = [];\n\n\t\t\tvar _iteratorNormalCompletion4 = true;\n\t\t\tvar _didIteratorError4 = false;\n\t\t\tvar _iteratorError4 = undefined;\n\n\t\t\ttry {\n\t\t\t\tfor (var _iterator4 = parsedValue.timestamps[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n\t\t\t\t\tconst timestamp = _step4.value;\n\n\t\t\t\t\tconst verifyResult = yield timestamp.verify(logs, preCert, 1);\n\t\t\t\t\tverifyArray.push(verifyResult);\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\t_didIteratorError4 = true;\n\t\t\t\t_iteratorError4 = err;\n\t\t\t} finally {\n\t\t\t\ttry {\n\t\t\t\t\tif (!_iteratorNormalCompletion4 && _iterator4.return) {\n\t\t\t\t\t\t_iterator4.return();\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (_didIteratorError4) {\n\t\t\t\t\t\tthrow _iteratorError4;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn verifyArray;\n\t\t}\n\n\t\tif (index >= parsedValue.timestamps.length) index = parsedValue.timestamps.length - 1;\n\n\t\treturn [yield parsedValue.timestamps[index].verify(logs, preCert, 1)];\n\t\t//endregion\n\t});\n\n\treturn function verifySCTsForCertificate(_x, _x2, _x3) {\n\t\treturn _ref.apply(this, arguments);\n\t};\n})();\n//**********************************************************************************\n\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nvar _bytestreamjs = require(\"bytestreamjs\");\n\nvar _common = require(\"./common.js\");\n\nvar _PublicKeyInfo = require(\"./PublicKeyInfo.js\");\n\nvar _PublicKeyInfo2 = _interopRequireDefault(_PublicKeyInfo);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\n//**************************************************************************************\nclass SignedCertificateTimestamp {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for SignedCertificateTimestamp class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\t/**\r\n   * @type {number}\r\n   * @desc version\r\n   */\n\t\tthis.version = (0, _pvutils.getParametersValue)(parameters, \"version\", SignedCertificateTimestamp.defaultValues(\"version\"));\n\t\t/**\r\n   * @type {ArrayBuffer}\r\n   * @desc logID\r\n   */\n\t\tthis.logID = (0, _pvutils.getParametersValue)(parameters, \"logID\", SignedCertificateTimestamp.defaultValues(\"logID\"));\n\t\t/**\r\n   * @type {Date}\r\n   * @desc timestamp\r\n   */\n\t\tthis.timestamp = (0, _pvutils.getParametersValue)(parameters, \"timestamp\", SignedCertificateTimestamp.defaultValues(\"timestamp\"));\n\t\t/**\r\n   * @type {ArrayBuffer}\r\n   * @desc extensions\r\n   */\n\t\tthis.extensions = (0, _pvutils.getParametersValue)(parameters, \"extensions\", SignedCertificateTimestamp.defaultValues(\"extensions\"));\n\t\t/**\r\n   * @type {string}\r\n   * @desc hashAlgorithm\r\n   */\n\t\tthis.hashAlgorithm = (0, _pvutils.getParametersValue)(parameters, \"hashAlgorithm\", SignedCertificateTimestamp.defaultValues(\"hashAlgorithm\"));\n\t\t/**\r\n   * @type {string}\r\n   * @desc signatureAlgorithm\r\n   */\n\t\tthis.signatureAlgorithm = (0, _pvutils.getParametersValue)(parameters, \"signatureAlgorithm\", SignedCertificateTimestamp.defaultValues(\"signatureAlgorithm\"));\n\t\t/**\r\n   * @type {Object}\r\n   * @desc signature\r\n   */\n\t\tthis.signature = (0, _pvutils.getParametersValue)(parameters, \"signature\", SignedCertificateTimestamp.defaultValues(\"signature\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\n\t\t//region If input argument array contains \"stream\"\n\t\tif (\"stream\" in parameters) this.fromStream(parameters.stream);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"version\":\n\t\t\t\treturn 0;\n\t\t\tcase \"logID\":\n\t\t\tcase \"extensions\":\n\t\t\t\treturn new ArrayBuffer(0);\n\t\t\tcase \"timestamp\":\n\t\t\t\treturn new Date(0);\n\t\t\tcase \"hashAlgorithm\":\n\t\t\tcase \"signatureAlgorithm\":\n\t\t\t\treturn \"\";\n\t\t\tcase \"signature\":\n\t\t\t\treturn new asn1js.Any();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for SignedCertificateTimestamp class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\tif (schema instanceof asn1js.RawData === false) throw new Error(\"Object's schema was not verified against input data for SignedCertificateTimestamp\");\n\n\t\tconst seqStream = new _bytestreamjs.SeqStream({\n\t\t\tstream: new _bytestreamjs.ByteStream({\n\t\t\t\tbuffer: schema.data\n\t\t\t})\n\t\t});\n\n\t\tthis.fromStream(seqStream);\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert SeqStream data into current class\r\n  * @param {!SeqStream} stream\r\n  */\n\tfromStream(stream) {\n\t\tconst blockLength = stream.getUint16();\n\n\t\tthis.version = stream.getBlock(1)[0];\n\n\t\tif (this.version === 0) {\n\t\t\tthis.logID = new Uint8Array(stream.getBlock(32)).buffer.slice(0);\n\t\t\tthis.timestamp = new Date((0, _pvutils.utilFromBase)(new Uint8Array(stream.getBlock(8)), 8));\n\n\t\t\t//region Extensions\n\t\t\tconst extensionsLength = stream.getUint16();\n\t\t\tthis.extensions = new Uint8Array(stream.getBlock(extensionsLength)).buffer.slice(0);\n\t\t\t//endregion\n\n\t\t\t//region Hash algorithm\n\t\t\tswitch (stream.getBlock(1)[0]) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.hashAlgorithm = \"none\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.hashAlgorithm = \"md5\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.hashAlgorithm = \"sha1\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tthis.hashAlgorithm = \"sha224\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tthis.hashAlgorithm = \"sha256\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5:\n\t\t\t\t\tthis.hashAlgorithm = \"sha384\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 6:\n\t\t\t\t\tthis.hashAlgorithm = \"sha512\";\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\n\t\t\t}\n\t\t\t//endregion\n\n\t\t\t//region Signature algorithm\n\t\t\tswitch (stream.getBlock(1)[0]) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.signatureAlgorithm = \"anonymous\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.signatureAlgorithm = \"rsa\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.signatureAlgorithm = \"dsa\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tthis.signatureAlgorithm = \"ecdsa\";\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\n\t\t\t}\n\t\t\t//endregion\n\n\t\t\t//region Signature\n\t\t\tconst signatureLength = stream.getUint16();\n\t\t\tconst signatureData = new Uint8Array(stream.getBlock(signatureLength)).buffer.slice(0);\n\n\t\t\tconst asn1 = asn1js.fromBER(signatureData);\n\t\t\tif (asn1.offset === -1) throw new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\n\n\t\t\tthis.signature = asn1.result;\n\t\t\t//endregion\n\n\t\t\tif (blockLength !== 47 + extensionsLength + signatureLength) throw new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\tconst stream = this.toStream();\n\n\t\treturn new asn1js.RawData({ data: stream.stream.buffer });\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to SeqStream data\r\n  * @returns {SeqStream} SeqStream object\r\n  */\n\ttoStream() {\n\t\tconst stream = new _bytestreamjs.SeqStream();\n\n\t\tstream.appendUint16(47 + this.extensions.byteLength + this.signature.valueBeforeDecode.byteLength);\n\t\tstream.appendChar(this.version);\n\t\tstream.appendView(new Uint8Array(this.logID));\n\n\t\tconst timeBuffer = new ArrayBuffer(8);\n\t\tconst timeView = new Uint8Array(timeBuffer);\n\n\t\tconst baseArray = (0, _pvutils.utilToBase)(this.timestamp.valueOf(), 8);\n\t\ttimeView.set(new Uint8Array(baseArray), 8 - baseArray.byteLength);\n\n\t\tstream.appendView(timeView);\n\t\tstream.appendUint16(this.extensions.byteLength);\n\n\t\tif (this.extensions.byteLength) stream.appendView(new Uint8Array(this.extensions));\n\n\t\tlet _hashAlgorithm;\n\n\t\tswitch (this.hashAlgorithm.toLowerCase()) {\n\t\t\tcase \"none\":\n\t\t\t\t_hashAlgorithm = 0;\n\t\t\t\tbreak;\n\t\t\tcase \"md5\":\n\t\t\t\t_hashAlgorithm = 1;\n\t\t\t\tbreak;\n\t\t\tcase \"sha1\":\n\t\t\t\t_hashAlgorithm = 2;\n\t\t\t\tbreak;\n\t\t\tcase \"sha224\":\n\t\t\t\t_hashAlgorithm = 3;\n\t\t\t\tbreak;\n\t\t\tcase \"sha256\":\n\t\t\t\t_hashAlgorithm = 4;\n\t\t\t\tbreak;\n\t\t\tcase \"sha384\":\n\t\t\t\t_hashAlgorithm = 5;\n\t\t\t\tbreak;\n\t\t\tcase \"sha512\":\n\t\t\t\t_hashAlgorithm = 6;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Incorrect data for hashAlgorithm: ${this.hashAlgorithm}`);\n\t\t}\n\n\t\tstream.appendChar(_hashAlgorithm);\n\n\t\tlet _signatureAlgorithm;\n\n\t\tswitch (this.signatureAlgorithm.toLowerCase()) {\n\t\t\tcase \"anonymous\":\n\t\t\t\t_signatureAlgorithm = 0;\n\t\t\t\tbreak;\n\t\t\tcase \"rsa\":\n\t\t\t\t_signatureAlgorithm = 1;\n\t\t\t\tbreak;\n\t\t\tcase \"dsa\":\n\t\t\t\t_signatureAlgorithm = 2;\n\t\t\t\tbreak;\n\t\t\tcase \"ecdsa\":\n\t\t\t\t_signatureAlgorithm = 3;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Incorrect data for signatureAlgorithm: ${this.signatureAlgorithm}`);\n\t\t}\n\n\t\tstream.appendChar(_signatureAlgorithm);\n\n\t\tconst _signature = this.signature.toBER(false);\n\n\t\tstream.appendUint16(_signature.byteLength);\n\t\tstream.appendView(new Uint8Array(_signature));\n\n\t\treturn stream;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\treturn {\n\t\t\tversion: this.version,\n\t\t\tlogID: (0, _pvutils.bufferToHexCodes)(this.logID),\n\t\t\ttimestamp: this.timestamp,\n\t\t\textensions: (0, _pvutils.bufferToHexCodes)(this.extensions),\n\t\t\thashAlgorithm: this.hashAlgorithm,\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm,\n\t\t\tsignature: this.signature.toJSON()\n\t\t};\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Verify SignedCertificateTimestamp for specific input data\r\n  * @param {Object[]} logs Array of objects with information about each CT Log (like here: https://ct.grahamedgecombe.com/logs.json)\r\n  * @param {String} logs.log_id Identifier of the CT Log encoded in BASE-64 format\r\n  * @param {String} logs.key Public key of the CT Log encoded in BASE-64 format\r\n  * @param {ArrayBuffer} data Data to verify signature against. Could be encoded Certificate or encoded PreCert\r\n  * @param {Number} [dataType=0] Type = 0 (data is encoded Certificate), type = 1 (data is encoded PreCert)\r\n  * @return {Promise<void>}\r\n  */\n\tverify(logs, data, dataType = 0) {\n\t\tvar _this = this;\n\n\t\treturn _asyncToGenerator(function* () {\n\t\t\t//region Initial variables\n\t\t\tlet logId = (0, _pvutils.toBase64)((0, _pvutils.arrayBufferToString)(_this.logID));\n\n\t\t\tlet publicKeyBase64 = null;\n\t\t\tlet publicKeyInfo;\n\n\t\t\tlet stream = new _bytestreamjs.SeqStream();\n\t\t\t//endregion\n\n\t\t\t//region Found and init public key\n\t\t\tvar _iteratorNormalCompletion = true;\n\t\t\tvar _didIteratorError = false;\n\t\t\tvar _iteratorError = undefined;\n\n\t\t\ttry {\n\t\t\t\tfor (var _iterator = logs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\t\tconst log = _step.value;\n\n\t\t\t\t\tif (log.log_id === logId) {\n\t\t\t\t\t\tpublicKeyBase64 = log.key;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\t_didIteratorError = true;\n\t\t\t\t_iteratorError = err;\n\t\t\t} finally {\n\t\t\t\ttry {\n\t\t\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t\t\t_iterator.return();\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (publicKeyBase64 === null) throw new Error(`Public key not found for CT with logId: ${logId}`);\n\n\t\t\tconst asn1 = asn1js.fromBER((0, _pvutils.stringToArrayBuffer)((0, _pvutils.fromBase64)(publicKeyBase64)));\n\t\t\tif (asn1.offset === -1) throw new Error(`Incorrect key value for CT Log with logId: ${logId}`);\n\n\t\t\tpublicKeyInfo = new _PublicKeyInfo2.default({ schema: asn1.result });\n\t\t\t//endregion\n\n\t\t\t//region Initialize signed data block\n\t\t\tstream.appendChar(0x00); // sct_version\n\t\t\tstream.appendChar(0x00); // signature_type = certificate_timestamp\n\n\t\t\tconst timeBuffer = new ArrayBuffer(8);\n\t\t\tconst timeView = new Uint8Array(timeBuffer);\n\n\t\t\tconst baseArray = (0, _pvutils.utilToBase)(_this.timestamp.valueOf(), 8);\n\t\t\ttimeView.set(new Uint8Array(baseArray), 8 - baseArray.byteLength);\n\n\t\t\tstream.appendView(timeView);\n\n\t\t\tstream.appendUint16(dataType);\n\n\t\t\tif (dataType === 0) stream.appendUint24(data.byteLength);\n\n\t\t\tstream.appendView(new Uint8Array(data));\n\n\t\t\tstream.appendUint16(_this.extensions.byteLength);\n\n\t\t\tif (_this.extensions.byteLength !== 0) stream.appendView(new Uint8Array(_this.extensions));\n\t\t\t//endregion\n\n\t\t\t//region Perform verification\n\t\t\treturn (0, _common.getEngine)().subtle.verifyWithPublicKey(stream._stream._buffer.slice(0, stream._length), { valueBlock: { valueHex: _this.signature.toBER(false) } }, publicKeyInfo, { algorithmId: \"\" }, \"SHA-256\");\n\t\t\t//endregion\n\t\t})();\n\t}\n\t//**********************************************************************************\n}\nexports.SignedCertificateTimestamp = SignedCertificateTimestamp; //**************************************************************************************\n/**\r\n * Class from RFC6962\r\n */\n\nclass SignedCertificateTimestampList {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for SignedCertificateTimestampList class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\t/**\r\n   * @type {Array.<SignedCertificateTimestamp>}\r\n   * @desc timestamps\r\n   */\n\t\tthis.timestamps = (0, _pvutils.getParametersValue)(parameters, \"timestamps\", SignedCertificateTimestampList.defaultValues(\"timestamps\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"timestamps\":\n\t\t\t\treturn [];\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for SignedCertificateTimestampList class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Compare values with default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  * @param {*} memberValue Value to compare with default value\r\n  */\n\tstatic compareWithDefault(memberName, memberValue) {\n\t\tswitch (memberName) {\n\t\t\tcase \"timestamps\":\n\t\t\t\treturn memberValue.length === 0;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for SignedCertificateTimestampList class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * SignedCertificateTimestampList ::= OCTET STRING\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}) {\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} [blockName]\r\n   * @property {string} [optional]\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\tif (\"optional\" in names === false) names.optional = false;\n\n\t\treturn new asn1js.OctetString({\n\t\t\tname: names.blockName || \"SignedCertificateTimestampList\",\n\t\t\toptional: names.optional\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Check the schema is valid\n\t\tif (schema instanceof asn1js.OctetString === false) throw new Error(\"Object's schema was not verified against input data for SignedCertificateTimestampList\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tconst seqStream = new _bytestreamjs.SeqStream({\n\t\t\tstream: new _bytestreamjs.ByteStream({\n\t\t\t\tbuffer: schema.valueBlock.valueHex\n\t\t\t})\n\t\t});\n\n\t\tlet dataLength = seqStream.getUint16();\n\t\tif (dataLength !== seqStream.length) throw new Error(\"Object's schema was not verified against input data for SignedCertificateTimestampList\");\n\n\t\twhile (seqStream.length) this.timestamps.push(new SignedCertificateTimestamp({ stream: seqStream }));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\t//region Initial variables\n\t\tconst stream = new _bytestreamjs.SeqStream();\n\n\t\tlet overallLength = 0;\n\n\t\tconst timestampsData = [];\n\t\t//endregion\n\n\t\t//region Get overall length\n\t\tvar _iteratorNormalCompletion2 = true;\n\t\tvar _didIteratorError2 = false;\n\t\tvar _iteratorError2 = undefined;\n\n\t\ttry {\n\t\t\tfor (var _iterator2 = this.timestamps[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n\t\t\t\tconst timestamp = _step2.value;\n\n\t\t\t\tconst timestampStream = timestamp.toStream();\n\t\t\t\ttimestampsData.push(timestampStream);\n\t\t\t\toverallLength += timestampStream.stream.buffer.byteLength;\n\t\t\t}\n\t\t\t//endregion\n\t\t} catch (err) {\n\t\t\t_didIteratorError2 = true;\n\t\t\t_iteratorError2 = err;\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (!_iteratorNormalCompletion2 && _iterator2.return) {\n\t\t\t\t\t_iterator2.return();\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tif (_didIteratorError2) {\n\t\t\t\t\tthrow _iteratorError2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tstream.appendUint16(overallLength);\n\n\t\t//region Set data from all timestamps\n\t\tvar _iteratorNormalCompletion3 = true;\n\t\tvar _didIteratorError3 = false;\n\t\tvar _iteratorError3 = undefined;\n\n\t\ttry {\n\t\t\tfor (var _iterator3 = timestampsData[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n\t\t\t\tconst timestamp = _step3.value;\n\n\t\t\t\tstream.appendView(timestamp.stream.view);\n\t\t\t} //endregion\n\t\t} catch (err) {\n\t\t\t_didIteratorError3 = true;\n\t\t\t_iteratorError3 = err;\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (!_iteratorNormalCompletion3 && _iterator3.return) {\n\t\t\t\t\t_iterator3.return();\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tif (_didIteratorError3) {\n\t\t\t\t\tthrow _iteratorError3;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn new asn1js.OctetString({ valueHex: stream.stream.buffer.slice(0) });\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\treturn {\n\t\t\ttimestamps: Array.from(this.timestamps, element => element.toJSON())\n\t\t};\n\t}\n\t//**********************************************************************************\n}exports.default = SignedCertificateTimestampList;\n//# sourceMappingURL=SignedCertificateTimestampList.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nvar _GeneralName = require(\"./GeneralName.js\");\n\nvar _GeneralName2 = _interopRequireDefault(_GeneralName);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n/**\r\n * Class from RFC5280\r\n */\nclass AccessDescription {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for AccessDescription class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\t/**\r\n   * @type {string}\r\n   * @desc The type and format of the information are specified by the accessMethod field. This profile defines two accessMethod OIDs: id-ad-caIssuers and id-ad-ocsp\r\n   */\n\t\tthis.accessMethod = (0, _pvutils.getParametersValue)(parameters, \"accessMethod\", AccessDescription.defaultValues(\"accessMethod\"));\n\t\t/**\r\n   * @type {GeneralName}\r\n   * @desc The accessLocation field specifies the location of the information\r\n   */\n\t\tthis.accessLocation = (0, _pvutils.getParametersValue)(parameters, \"accessLocation\", AccessDescription.defaultValues(\"accessLocation\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"accessMethod\":\n\t\t\t\treturn \"\";\n\t\t\tcase \"accessLocation\":\n\t\t\t\treturn new _GeneralName2.default();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for AccessDescription class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * AccessDescription  ::=  SEQUENCE {\r\n  *    accessMethod          OBJECT IDENTIFIER,\r\n  *    accessLocation        GeneralName  }\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}) {\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} [blockName]\r\n   * @property {string} [accessMethod]\r\n   * @property {string} [accessLocation]\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\treturn new asn1js.Sequence({\n\t\t\tname: names.blockName || \"\",\n\t\t\tvalue: [new asn1js.ObjectIdentifier({ name: names.accessMethod || \"\" }), _GeneralName2.default.schema(names.accessLocation || {})]\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Clear input data first\n\t\t(0, _pvutils.clearProps)(schema, [\"accessMethod\", \"accessLocation\"]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, AccessDescription.schema({\n\t\t\tnames: {\n\t\t\t\taccessMethod: \"accessMethod\",\n\t\t\t\taccessLocation: {\n\t\t\t\t\tnames: {\n\t\t\t\t\t\tblockName: \"accessLocation\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tif (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for AccessDescription\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.accessMethod = asn1.result.accessMethod.valueBlock.toString();\n\t\tthis.accessLocation = new _GeneralName2.default({ schema: asn1.result.accessLocation });\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: [new asn1js.ObjectIdentifier({ value: this.accessMethod }), this.accessLocation.toSchema()]\n\t\t});\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\treturn {\n\t\t\taccessMethod: this.accessMethod,\n\t\t\taccessLocation: this.accessLocation.toJSON()\n\t\t};\n\t}\n\t//**********************************************************************************\n}\nexports.default = AccessDescription; //**************************************************************************************\n//# sourceMappingURL=AccessDescription.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nvar _GeneralName = require(\"./GeneralName.js\");\n\nvar _GeneralName2 = _interopRequireDefault(_GeneralName);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n/**\r\n * Class from RFC5280\r\n */\nclass GeneralNames {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for GeneralNames class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\t/**\r\n   * @type {Array.<GeneralName>}\r\n   * @desc Array of \"general names\"\r\n   */\n\t\tthis.names = (0, _pvutils.getParametersValue)(parameters, \"names\", GeneralNames.defaultValues(\"names\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"names\":\n\t\t\t\treturn [];\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for GeneralNames class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * GeneralNames ::= SEQUENCE SIZE (1..MAX) OF GeneralName\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @param {boolean} [optional=false] Flag would be element optional or not\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}, optional = false) {\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} utcTimeName Name for \"utcTimeName\" choice\r\n   * @property {string} generalTimeName Name for \"generalTimeName\" choice\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\treturn new asn1js.Sequence({\n\t\t\toptional,\n\t\t\tname: names.blockName || \"\",\n\t\t\tvalue: [new asn1js.Repeated({\n\t\t\t\tname: names.generalNames || \"\",\n\t\t\t\tvalue: _GeneralName2.default.schema()\n\t\t\t})]\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Clear input data first\n\t\t(0, _pvutils.clearProps)(schema, [\"names\", \"generalNames\"]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, GeneralNames.schema({\n\t\t\tnames: {\n\t\t\t\tblockName: \"names\",\n\t\t\t\tgeneralNames: \"generalNames\"\n\t\t\t}\n\t\t}));\n\n\t\tif (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for GeneralNames\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.names = Array.from(asn1.result.generalNames, element => new _GeneralName2.default({ schema: element }));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: Array.from(this.names, element => element.toSchema())\n\t\t});\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\treturn {\n\t\t\tnames: Array.from(this.names, element => element.toJSON())\n\t\t};\n\t}\n\t//**********************************************************************************\n}\nexports.default = GeneralNames; //**************************************************************************************\n//# sourceMappingURL=GeneralNames.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nvar _Attribute = require(\"./Attribute.js\");\n\nvar _Attribute2 = _interopRequireDefault(_Attribute);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n/**\r\n * Class from RFC5280\r\n */\nclass SubjectDirectoryAttributes {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for SubjectDirectoryAttributes class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\t/**\r\n   * @type {Array.<Attribute>}\r\n   * @desc attributes\r\n   */\n\t\tthis.attributes = (0, _pvutils.getParametersValue)(parameters, \"attributes\", SubjectDirectoryAttributes.defaultValues(\"attributes\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"attributes\":\n\t\t\t\treturn [];\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for SubjectDirectoryAttributes class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * SubjectDirectoryAttributes ::= SEQUENCE SIZE (1..MAX) OF Attribute\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}) {\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} [blockName]\r\n   * @property {string} [utcTimeName] Name for \"utcTimeName\" choice\r\n   * @property {string} [generalTimeName] Name for \"generalTimeName\" choice\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\treturn new asn1js.Sequence({\n\t\t\tname: names.blockName || \"\",\n\t\t\tvalue: [new asn1js.Repeated({\n\t\t\t\tname: names.attributes || \"\",\n\t\t\t\tvalue: _Attribute2.default.schema()\n\t\t\t})]\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Clear input data first\n\t\t(0, _pvutils.clearProps)(schema, [\"attributes\"]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, SubjectDirectoryAttributes.schema({\n\t\t\tnames: {\n\t\t\t\tattributes: \"attributes\"\n\t\t\t}\n\t\t}));\n\n\t\tif (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for SubjectDirectoryAttributes\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.attributes = Array.from(asn1.result.attributes, element => new _Attribute2.default({ schema: element }));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: Array.from(this.attributes, element => element.toSchema())\n\t\t});\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\treturn {\n\t\t\tattributes: Array.from(this.attributes, element => element.toJSON())\n\t\t};\n\t}\n\t//**********************************************************************************\n}\nexports.default = SubjectDirectoryAttributes; //**************************************************************************************\n//# sourceMappingURL=SubjectDirectoryAttributes.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nvar _DistributionPoint = require(\"./DistributionPoint.js\");\n\nvar _DistributionPoint2 = _interopRequireDefault(_DistributionPoint);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n/**\r\n * Class from RFC5280\r\n */\nclass CRLDistributionPoints {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for CRLDistributionPoints class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\t/**\r\n   * @type {Array.<DistributionPoint>}\r\n   * @desc distributionPoints\r\n   */\n\t\tthis.distributionPoints = (0, _pvutils.getParametersValue)(parameters, \"distributionPoints\", CRLDistributionPoints.defaultValues(\"distributionPoints\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"distributionPoints\":\n\t\t\t\treturn [];\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for CRLDistributionPoints class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * CRLDistributionPoints ::= SEQUENCE SIZE (1..MAX) OF DistributionPoint\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}) {\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} [blockName]\r\n   * @property {string} [distributionPoints]\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\treturn new asn1js.Sequence({\n\t\t\tname: names.blockName || \"\",\n\t\t\tvalue: [new asn1js.Repeated({\n\t\t\t\tname: names.distributionPoints || \"\",\n\t\t\t\tvalue: _DistributionPoint2.default.schema()\n\t\t\t})]\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Clear input data first\n\t\t(0, _pvutils.clearProps)(schema, [\"distributionPoints\"]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, CRLDistributionPoints.schema({\n\t\t\tnames: {\n\t\t\t\tdistributionPoints: \"distributionPoints\"\n\t\t\t}\n\t\t}));\n\n\t\tif (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for CRLDistributionPoints\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.distributionPoints = Array.from(asn1.result.distributionPoints, element => new _DistributionPoint2.default({ schema: element }));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: Array.from(this.distributionPoints, element => element.toSchema())\n\t\t});\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\treturn {\n\t\t\tdistributionPoints: Array.from(this.distributionPoints, element => element.toJSON())\n\t\t};\n\t}\n\t//**********************************************************************************\n}\nexports.default = CRLDistributionPoints; //**************************************************************************************\n//# sourceMappingURL=CRLDistributionPoints.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nvar _PolicyQualifierInfo = require(\"./PolicyQualifierInfo.js\");\n\nvar _PolicyQualifierInfo2 = _interopRequireDefault(_PolicyQualifierInfo);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n/**\r\n * Class from RFC5280\r\n */\nclass PolicyInformation {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for PolicyInformation class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\t/**\r\n   * @type {string}\r\n   * @desc policyIdentifier\r\n   */\n\t\tthis.policyIdentifier = (0, _pvutils.getParametersValue)(parameters, \"policyIdentifier\", PolicyInformation.defaultValues(\"policyIdentifier\"));\n\n\t\tif (\"policyQualifiers\" in parameters)\n\t\t\t/**\r\n    * @type {Array.<PolicyQualifierInfo>}\r\n    * @desc Value of the TIME class\r\n    */\n\t\t\tthis.policyQualifiers = (0, _pvutils.getParametersValue)(parameters, \"policyQualifiers\", PolicyInformation.defaultValues(\"policyQualifiers\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"policyIdentifier\":\n\t\t\t\treturn \"\";\n\t\t\tcase \"policyQualifiers\":\n\t\t\t\treturn [];\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for PolicyInformation class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * PolicyInformation ::= SEQUENCE {\r\n  *    policyIdentifier   CertPolicyId,\r\n  *    policyQualifiers   SEQUENCE SIZE (1..MAX) OF\r\n  *    PolicyQualifierInfo OPTIONAL }\r\n  *\r\n  * CertPolicyId ::= OBJECT IDENTIFIER\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}) {\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} [blockName]\r\n   * @property {string} [policyIdentifier]\r\n   * @property {string} [policyQualifiers]\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\treturn new asn1js.Sequence({\n\t\t\tname: names.blockName || \"\",\n\t\t\tvalue: [new asn1js.ObjectIdentifier({ name: names.policyIdentifier || \"\" }), new asn1js.Sequence({\n\t\t\t\toptional: true,\n\t\t\t\tvalue: [new asn1js.Repeated({\n\t\t\t\t\tname: names.policyQualifiers || \"\",\n\t\t\t\t\tvalue: _PolicyQualifierInfo2.default.schema()\n\t\t\t\t})]\n\t\t\t})]\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Clear input data first\n\t\t(0, _pvutils.clearProps)(schema, [\"policyIdentifier\", \"policyQualifiers\"]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, PolicyInformation.schema({\n\t\t\tnames: {\n\t\t\t\tpolicyIdentifier: \"policyIdentifier\",\n\t\t\t\tpolicyQualifiers: \"policyQualifiers\"\n\t\t\t}\n\t\t}));\n\n\t\tif (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for PolicyInformation\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.policyIdentifier = asn1.result.policyIdentifier.valueBlock.toString();\n\n\t\tif (\"policyQualifiers\" in asn1.result) this.policyQualifiers = Array.from(asn1.result.policyQualifiers, element => new _PolicyQualifierInfo2.default({ schema: element }));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\t//region Create array for output sequence\n\t\tconst outputArray = [];\n\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.policyIdentifier }));\n\n\t\tif (\"policyQualifiers\" in this) {\n\t\t\toutputArray.push(new asn1js.Sequence({\n\t\t\t\tvalue: Array.from(this.policyQualifiers, element => element.toSchema())\n\t\t\t}));\n\t\t}\n\t\t//endregion\n\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: outputArray\n\t\t});\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\tconst object = {\n\t\t\tpolicyIdentifier: this.policyIdentifier\n\t\t};\n\n\t\tif (\"policyQualifiers\" in this) object.policyQualifiers = Array.from(this.policyQualifiers, element => element.toJSON());\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\nexports.default = PolicyInformation; //**************************************************************************************\n//# sourceMappingURL=PolicyInformation.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nvar _common = require(\"./common.js\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n/**\r\n * Class from RFC5280\r\n */\nclass AttributeTypeAndValue {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for AttributeTypeAndValue class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\t/**\r\n   * @type {string}\r\n   * @desc type\r\n   */\n\t\tthis.type = (0, _pvutils.getParametersValue)(parameters, \"type\", AttributeTypeAndValue.defaultValues(\"type\"));\n\t\t/**\r\n   * @type {Object}\r\n   * @desc Value of the AttributeTypeAndValue class\r\n   */\n\t\tthis.value = (0, _pvutils.getParametersValue)(parameters, \"value\", AttributeTypeAndValue.defaultValues(\"value\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"type\":\n\t\t\t\treturn \"\";\n\t\t\tcase \"value\":\n\t\t\t\treturn {};\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for AttributeTypeAndValue class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * AttributeTypeAndValue ::= Sequence {\r\n  *    type     AttributeType,\r\n  *    value    AttributeValue }\r\n  *\r\n  * AttributeType ::= OBJECT IDENTIFIER\r\n  *\r\n  * AttributeValue ::= ANY -- DEFINED BY AttributeType\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}) {\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} [blockName] Name for entire block\r\n   * @property {string} [type] Name for \"type\" element\r\n   * @property {string} [value] Name for \"value\" element\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\treturn new asn1js.Sequence({\n\t\t\tname: names.blockName || \"\",\n\t\t\tvalue: [new asn1js.ObjectIdentifier({ name: names.type || \"\" }), new asn1js.Any({ name: names.value || \"\" })]\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Clear input data first\n\t\t(0, _pvutils.clearProps)(schema, [\"type\", \"typeValue\"]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, AttributeTypeAndValue.schema({\n\t\t\tnames: {\n\t\t\t\ttype: \"type\",\n\t\t\t\tvalue: \"typeValue\"\n\t\t\t}\n\t\t}));\n\n\t\tif (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for AttributeTypeAndValue\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.type = asn1.result.type.valueBlock.toString();\n\t\t// noinspection JSUnresolvedVariable\n\t\tthis.value = asn1.result.typeValue;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: [new asn1js.ObjectIdentifier({ value: this.type }), this.value]\n\t\t});\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\tconst _object = {\n\t\t\ttype: this.type\n\t\t};\n\n\t\tif (Object.keys(this.value).length !== 0) _object.value = this.value.toJSON();else _object.value = this.value;\n\n\t\treturn _object;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Compare two AttributeTypeAndValue values, or AttributeTypeAndValue with ArrayBuffer value\r\n  * @param {(AttributeTypeAndValue|ArrayBuffer)} compareTo The value compare to current\r\n  * @returns {boolean}\r\n  */\n\tisEqual(compareTo) {\n\t\tif (compareTo instanceof AttributeTypeAndValue) {\n\t\t\tif (this.type !== compareTo.type) return false;\n\n\t\t\t// noinspection OverlyComplexBooleanExpressionJS\n\t\t\tif (this.value instanceof asn1js.Utf8String && compareTo.value instanceof asn1js.Utf8String || this.value instanceof asn1js.BmpString && compareTo.value instanceof asn1js.BmpString || this.value instanceof asn1js.UniversalString && compareTo.value instanceof asn1js.UniversalString || this.value instanceof asn1js.NumericString && compareTo.value instanceof asn1js.NumericString || this.value instanceof asn1js.PrintableString && compareTo.value instanceof asn1js.PrintableString || this.value instanceof asn1js.TeletexString && compareTo.value instanceof asn1js.TeletexString || this.value instanceof asn1js.VideotexString && compareTo.value instanceof asn1js.VideotexString || this.value instanceof asn1js.IA5String && compareTo.value instanceof asn1js.IA5String || this.value instanceof asn1js.GraphicString && compareTo.value instanceof asn1js.GraphicString || this.value instanceof asn1js.VisibleString && compareTo.value instanceof asn1js.VisibleString || this.value instanceof asn1js.GeneralString && compareTo.value instanceof asn1js.GeneralString || this.value instanceof asn1js.CharacterString && compareTo.value instanceof asn1js.CharacterString) {\n\t\t\t\tconst value1 = (0, _common.stringPrep)(this.value.valueBlock.value);\n\t\t\t\tconst value2 = (0, _common.stringPrep)(compareTo.value.valueBlock.value);\n\n\t\t\t\tif (value1.localeCompare(value2) !== 0) return false;\n\t\t\t} else // Comparing as two ArrayBuffers\n\t\t\t\t{\n\t\t\t\t\tif ((0, _pvutils.isEqualBuffer)(this.value.valueBeforeDecode, compareTo.value.valueBeforeDecode) === false) return false;\n\t\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tif (compareTo instanceof ArrayBuffer) return (0, _pvutils.isEqualBuffer)(this.value.valueBeforeDecode, compareTo);\n\n\t\treturn false;\n\t}\n\t//**********************************************************************************\n}\nexports.default = AttributeTypeAndValue; //**************************************************************************************\n//# sourceMappingURL=AttributeTypeAndValue.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nvar _common = require(\"./common.js\");\n\nvar _PublicKeyInfo = require(\"./PublicKeyInfo.js\");\n\nvar _PublicKeyInfo2 = _interopRequireDefault(_PublicKeyInfo);\n\nvar _RelativeDistinguishedNames = require(\"./RelativeDistinguishedNames.js\");\n\nvar _RelativeDistinguishedNames2 = _interopRequireDefault(_RelativeDistinguishedNames);\n\nvar _AlgorithmIdentifier = require(\"./AlgorithmIdentifier.js\");\n\nvar _AlgorithmIdentifier2 = _interopRequireDefault(_AlgorithmIdentifier);\n\nvar _Attribute = require(\"./Attribute.js\");\n\nvar _Attribute2 = _interopRequireDefault(_Attribute);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\nfunction CertificationRequestInfo(parameters = {}) {\n\t//CertificationRequestInfo ::= SEQUENCE {\n\t//    version       INTEGER { v1(0) } (v1,...),\n\t//    subject       Name,\n\t//    subjectPKInfo SubjectPublicKeyInfo{{ PKInfoAlgorithms }},\n\t//    attributes    [0] Attributes{{ CRIAttributes }}\n\t//}\n\n\t/**\r\n  * @type {Object}\r\n  * @property {string} [blockName]\r\n  * @property {string} [CertificationRequestInfo]\r\n  * @property {string} [CertificationRequestInfoVersion]\r\n  * @property {string} [subject]\r\n  * @property {string} [CertificationRequestInfoAttributes]\r\n  * @property {string} [attributes]\r\n  */\n\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\treturn new asn1js.Sequence({\n\t\tname: names.CertificationRequestInfo || \"CertificationRequestInfo\",\n\t\tvalue: [new asn1js.Integer({ name: names.CertificationRequestInfoVersion || \"CertificationRequestInfo.version\" }), _RelativeDistinguishedNames2.default.schema(names.subject || {\n\t\t\tnames: {\n\t\t\t\tblockName: \"CertificationRequestInfo.subject\"\n\t\t\t}\n\t\t}), _PublicKeyInfo2.default.schema({\n\t\t\tnames: {\n\t\t\t\tblockName: \"CertificationRequestInfo.subjectPublicKeyInfo\"\n\t\t\t}\n\t\t}), new asn1js.Constructed({\n\t\t\toptional: true,\n\t\t\tidBlock: {\n\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\ttagNumber: 0 // [0]\n\t\t\t},\n\t\t\tvalue: [new asn1js.Repeated({\n\t\t\t\toptional: true, // Because OpenSSL makes wrong \"attributes\" field\n\t\t\t\tname: names.CertificationRequestInfoAttributes || \"CertificationRequestInfo.attributes\",\n\t\t\t\tvalue: _Attribute2.default.schema(names.attributes || {})\n\t\t\t})]\n\t\t})]\n\t});\n}\n//**************************************************************************************\n/**\r\n * Class from RFC2986\r\n */\nclass CertificationRequest {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for Attribute class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\t/**\r\n   * @type {ArrayBuffer}\r\n   * @desc tbs\r\n   */\n\t\tthis.tbs = (0, _pvutils.getParametersValue)(parameters, \"tbs\", CertificationRequest.defaultValues(\"tbs\"));\n\t\t/**\r\n   * @type {number}\r\n   * @desc version\r\n   */\n\t\tthis.version = (0, _pvutils.getParametersValue)(parameters, \"version\", CertificationRequest.defaultValues(\"version\"));\n\t\t/**\r\n   * @type {RelativeDistinguishedNames}\r\n   * @desc subject\r\n   */\n\t\tthis.subject = (0, _pvutils.getParametersValue)(parameters, \"subject\", CertificationRequest.defaultValues(\"subject\"));\n\t\t/**\r\n   * @type {PublicKeyInfo}\r\n   * @desc subjectPublicKeyInfo\r\n   */\n\t\tthis.subjectPublicKeyInfo = (0, _pvutils.getParametersValue)(parameters, \"subjectPublicKeyInfo\", CertificationRequest.defaultValues(\"subjectPublicKeyInfo\"));\n\n\t\tif (\"attributes\" in parameters)\n\t\t\t/**\r\n    * @type {Array.<Attribute>}\r\n    * @desc attributes\r\n    */\n\t\t\tthis.attributes = (0, _pvutils.getParametersValue)(parameters, \"attributes\", CertificationRequest.defaultValues(\"attributes\"));\n\n\t\t/**\r\n   * @type {AlgorithmIdentifier}\r\n   * @desc signatureAlgorithm\r\n   */\n\t\tthis.signatureAlgorithm = (0, _pvutils.getParametersValue)(parameters, \"signatureAlgorithm\", CertificationRequest.defaultValues(\"signatureAlgorithm\"));\n\t\t/**\r\n   * @type {BitString}\r\n   * @desc signatureAlgorithm\r\n   */\n\t\tthis.signatureValue = (0, _pvutils.getParametersValue)(parameters, \"signatureValue\", CertificationRequest.defaultValues(\"signatureValue\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"tbs\":\n\t\t\t\treturn new ArrayBuffer(0);\n\t\t\tcase \"version\":\n\t\t\t\treturn 0;\n\t\t\tcase \"subject\":\n\t\t\t\treturn new _RelativeDistinguishedNames2.default();\n\t\t\tcase \"subjectPublicKeyInfo\":\n\t\t\t\treturn new _PublicKeyInfo2.default();\n\t\t\tcase \"attributes\":\n\t\t\t\treturn [];\n\t\t\tcase \"signatureAlgorithm\":\n\t\t\t\treturn new _AlgorithmIdentifier2.default();\n\t\t\tcase \"signatureValue\":\n\t\t\t\treturn new asn1js.BitString();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for CertificationRequest class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * CertificationRequest ::= SEQUENCE {\r\n  *    certificationRequestInfo CertificationRequestInfo,\r\n  *    signatureAlgorithm       AlgorithmIdentifier{{ SignatureAlgorithms }},\r\n  *    signature                BIT STRING\r\n  * }\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}) {\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} [blockName]\r\n   * @property {string} [certificationRequestInfo]\r\n   * @property {string} [signatureAlgorithm]\r\n   * @property {string} [signatureValue]\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: [CertificationRequestInfo(names.certificationRequestInfo || {}), new asn1js.Sequence({\n\t\t\t\tname: names.signatureAlgorithm || \"signatureAlgorithm\",\n\t\t\t\tvalue: [new asn1js.ObjectIdentifier(), new asn1js.Any({ optional: true })]\n\t\t\t}), new asn1js.BitString({ name: names.signatureValue || \"signatureValue\" })]\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Clear input data first\n\t\t(0, _pvutils.clearProps)(schema, [\"CertificationRequestInfo\", \"CertificationRequestInfo.version\", \"CertificationRequestInfo.subject\", \"CertificationRequestInfo.subjectPublicKeyInfo\", \"CertificationRequestInfo.attributes\", \"signatureAlgorithm\", \"signatureValue\"]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, CertificationRequest.schema());\n\n\t\tif (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for CertificationRequest\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.tbs = asn1.result.CertificationRequestInfo.valueBeforeDecode;\n\n\t\tthis.version = asn1.result[\"CertificationRequestInfo.version\"].valueBlock.valueDec;\n\t\tthis.subject = new _RelativeDistinguishedNames2.default({ schema: asn1.result[\"CertificationRequestInfo.subject\"] });\n\t\tthis.subjectPublicKeyInfo = new _PublicKeyInfo2.default({ schema: asn1.result[\"CertificationRequestInfo.subjectPublicKeyInfo\"] });\n\t\tif (\"CertificationRequestInfo.attributes\" in asn1.result) this.attributes = Array.from(asn1.result[\"CertificationRequestInfo.attributes\"], element => new _Attribute2.default({ schema: element }));\n\n\t\tthis.signatureAlgorithm = new _AlgorithmIdentifier2.default({ schema: asn1.result.signatureAlgorithm });\n\t\tthis.signatureValue = asn1.result.signatureValue;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function making ASN1js Sequence from current TBS\r\n  * @returns {Sequence}\r\n  */\n\tencodeTBS() {\n\t\t//region Create array for output sequence\n\t\tconst outputArray = [new asn1js.Integer({ value: this.version }), this.subject.toSchema(), this.subjectPublicKeyInfo.toSchema()];\n\n\t\tif (\"attributes\" in this) {\n\t\t\toutputArray.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalue: Array.from(this.attributes, element => element.toSchema())\n\t\t\t}));\n\t\t}\n\t\t//endregion\n\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: outputArray\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema(encodeFlag = false) {\n\t\t//region Decode stored TBS value\n\t\tlet tbsSchema;\n\n\t\tif (encodeFlag === false) {\n\t\t\tif (this.tbs.byteLength === 0) // No stored TBS part\n\t\t\t\treturn CertificationRequest.schema();\n\n\t\t\ttbsSchema = asn1js.fromBER(this.tbs).result;\n\t\t}\n\t\t//endregion\n\t\t//region Create TBS schema via assembling from TBS parts\n\t\telse tbsSchema = this.encodeTBS();\n\t\t//endregion\n\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: [tbsSchema, this.signatureAlgorithm.toSchema(), this.signatureValue]\n\t\t});\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\tconst object = {\n\t\t\ttbs: (0, _pvutils.bufferToHexCodes)(this.tbs, 0, this.tbs.byteLength),\n\t\t\tversion: this.version,\n\t\t\tsubject: this.subject.toJSON(),\n\t\t\tsubjectPublicKeyInfo: this.subjectPublicKeyInfo.toJSON(),\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\n\t\t\tsignatureValue: this.signatureValue.toJSON()\n\t\t};\n\n\t\tif (\"attributes\" in this) object.attributes = Array.from(this.attributes, element => element.toJSON());\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Makes signature for currect certification request\r\n  * @param {Object} privateKey WebCrypto private key\r\n  * @param {string} [hashAlgorithm=SHA-1] String representing current hashing algorithm\r\n  */\n\tsign(privateKey, hashAlgorithm = \"SHA-1\") {\n\t\t//region Initial checking\n\t\t//region Get a private key from function parameter\n\t\tif (typeof privateKey === \"undefined\") return Promise.reject(\"Need to provide a private key for signing\");\n\t\t//endregion\n\t\t//endregion\n\n\t\t//region Initial variables\n\t\tlet sequence = Promise.resolve();\n\t\tlet parameters;\n\n\t\tconst engine = (0, _common.getEngine)();\n\t\t//endregion\n\n\t\t//region Get a \"default parameters\" for current algorithm and set correct signature algorithm\n\t\tsequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\n\n\t\tsequence = sequence.then(result => {\n\t\t\tparameters = result.parameters;\n\t\t\tthis.signatureAlgorithm = result.signatureAlgorithm;\n\t\t});\n\t\t//endregion\n\n\t\t//region Create TBS data for signing\n\t\tsequence = sequence.then(() => {\n\t\t\tthis.tbs = this.encodeTBS().toBER(false);\n\t\t});\n\t\t//endregion\n\n\t\t//region Signing TBS data on provided private key\n\t\tsequence = sequence.then(() => engine.subtle.signWithPrivateKey(this.tbs, privateKey, parameters));\n\n\t\tsequence = sequence.then(result => {\n\t\t\tthis.signatureValue = new asn1js.BitString({ valueHex: result });\n\t\t});\n\t\t//endregion\n\n\t\treturn sequence;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Verify existing certification request signature\r\n  * @returns {*}\r\n  */\n\tverify() {\n\t\treturn (0, _common.getEngine)().subtle.verifyWithPublicKey(this.tbs, this.signatureValue, this.subjectPublicKeyInfo, this.signatureAlgorithm);\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Importing public key for current certificate request\r\n  */\n\tgetPublicKey(parameters = null) {\n\t\treturn (0, _common.getEngine)().getPublicKey(this.subjectPublicKeyInfo, this.signatureAlgorithm, parameters);\n\t}\n\t//**********************************************************************************\n}\nexports.default = CertificationRequest; //**************************************************************************************\n//# sourceMappingURL=CertificationRequest.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nvar _GeneralName = require(\"./GeneralName.js\");\n\nvar _GeneralName2 = _interopRequireDefault(_GeneralName);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n/**\r\n * Class from RFC5280\r\n */\nclass AuthorityKeyIdentifier {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for AuthorityKeyIdentifier class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\tif (\"keyIdentifier\" in parameters)\n\t\t\t/**\r\n    * @type {OctetString}\r\n    * @desc keyIdentifier\r\n    */\n\t\t\tthis.keyIdentifier = (0, _pvutils.getParametersValue)(parameters, \"keyIdentifier\", AuthorityKeyIdentifier.defaultValues(\"keyIdentifier\"));\n\n\t\tif (\"authorityCertIssuer\" in parameters)\n\t\t\t/**\r\n    * @type {Array.<GeneralName>}\r\n    * @desc authorityCertIssuer\r\n    */\n\t\t\tthis.authorityCertIssuer = (0, _pvutils.getParametersValue)(parameters, \"authorityCertIssuer\", AuthorityKeyIdentifier.defaultValues(\"authorityCertIssuer\"));\n\n\t\tif (\"authorityCertSerialNumber\" in parameters)\n\t\t\t/**\r\n    * @type {Integer}\r\n    * @desc authorityCertIssuer\r\n    */\n\t\t\tthis.authorityCertSerialNumber = (0, _pvutils.getParametersValue)(parameters, \"authorityCertSerialNumber\", AuthorityKeyIdentifier.defaultValues(\"authorityCertSerialNumber\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"keyIdentifier\":\n\t\t\t\treturn new asn1js.OctetString();\n\t\t\tcase \"authorityCertIssuer\":\n\t\t\t\treturn [];\n\t\t\tcase \"authorityCertSerialNumber\":\n\t\t\t\treturn new asn1js.Integer();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for AuthorityKeyIdentifier class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * AuthorityKeyIdentifier OID ::= 2.5.29.35\r\n  *\r\n  * AuthorityKeyIdentifier ::= SEQUENCE {\r\n  *    keyIdentifier             [0] KeyIdentifier           OPTIONAL,\r\n  *    authorityCertIssuer       [1] GeneralNames            OPTIONAL,\r\n  *    authorityCertSerialNumber [2] CertificateSerialNumber OPTIONAL  }\r\n  *\r\n  * KeyIdentifier ::= OCTET STRING\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}) {\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} [blockName]\r\n   * @property {string} [keyIdentifier]\r\n   * @property {string} [authorityCertIssuer]\r\n   * @property {string} [authorityCertSerialNumber]\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\treturn new asn1js.Sequence({\n\t\t\tname: names.blockName || \"\",\n\t\t\tvalue: [new asn1js.Primitive({\n\t\t\t\tname: names.keyIdentifier || \"\",\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t}\n\t\t\t}), new asn1js.Constructed({\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tvalue: [new asn1js.Repeated({\n\t\t\t\t\tname: names.authorityCertIssuer || \"\",\n\t\t\t\t\tvalue: _GeneralName2.default.schema()\n\t\t\t\t})]\n\t\t\t}), new asn1js.Primitive({\n\t\t\t\tname: names.authorityCertSerialNumber || \"\",\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 2 // [2]\n\t\t\t\t}\n\t\t\t})]\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Clear input data first\n\t\t(0, _pvutils.clearProps)(schema, [\"keyIdentifier\", \"authorityCertIssuer\", \"authorityCertSerialNumber\"]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, AuthorityKeyIdentifier.schema({\n\t\t\tnames: {\n\t\t\t\tkeyIdentifier: \"keyIdentifier\",\n\t\t\t\tauthorityCertIssuer: \"authorityCertIssuer\",\n\t\t\t\tauthorityCertSerialNumber: \"authorityCertSerialNumber\"\n\t\t\t}\n\t\t}));\n\n\t\tif (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for AuthorityKeyIdentifier\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tif (\"keyIdentifier\" in asn1.result) this.keyIdentifier = new asn1js.OctetString({ valueHex: asn1.result.keyIdentifier.valueBlock.valueHex });\n\n\t\tif (\"authorityCertIssuer\" in asn1.result) this.authorityCertIssuer = Array.from(asn1.result.authorityCertIssuer, element => new _GeneralName2.default({ schema: element }));\n\n\t\tif (\"authorityCertSerialNumber\" in asn1.result) this.authorityCertSerialNumber = new asn1js.Integer({ valueHex: asn1.result.authorityCertSerialNumber.valueBlock.valueHex });\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\t//region Create array for output sequence\n\t\tconst outputArray = [];\n\n\t\tif (\"keyIdentifier\" in this) {\n\t\t\toutputArray.push(new asn1js.Primitive({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalueHex: this.keyIdentifier.valueBlock.valueHex\n\t\t\t}));\n\t\t}\n\n\t\tif (\"authorityCertIssuer\" in this) {\n\t\t\toutputArray.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tvalue: Array.from(this.authorityCertIssuer, element => element.toSchema())\n\t\t\t}));\n\t\t}\n\n\t\tif (\"authorityCertSerialNumber\" in this) {\n\t\t\toutputArray.push(new asn1js.Primitive({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 2 // [2]\n\t\t\t\t},\n\t\t\t\tvalueHex: this.authorityCertSerialNumber.valueBlock.valueHex\n\t\t\t}));\n\t\t}\n\t\t//endregion\n\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: outputArray\n\t\t});\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\tconst object = {};\n\n\t\tif (\"keyIdentifier\" in this) object.keyIdentifier = this.keyIdentifier.toJSON();\n\n\t\tif (\"authorityCertIssuer\" in this) object.authorityCertIssuer = Array.from(this.authorityCertIssuer, element => element.toJSON());\n\n\t\tif (\"authorityCertSerialNumber\" in this) object.authorityCertSerialNumber = this.authorityCertSerialNumber.toJSON();\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\nexports.default = AuthorityKeyIdentifier; //**************************************************************************************\n//# sourceMappingURL=AuthorityKeyIdentifier.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n/**\r\n * Class from RFC5280\r\n */\nclass ExtKeyUsage {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for ExtKeyUsage class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\t/**\r\n   * @type {Array.<string>}\r\n   * @desc keyPurposes\r\n   */\n\t\tthis.keyPurposes = (0, _pvutils.getParametersValue)(parameters, \"keyPurposes\", ExtKeyUsage.defaultValues(\"keyPurposes\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"keyPurposes\":\n\t\t\t\treturn [];\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for ExtKeyUsage class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * ExtKeyUsage ::= SEQUENCE SIZE (1..MAX) OF KeyPurposeId\r\n  *\r\n  * KeyPurposeId ::= OBJECT IDENTIFIER\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}) {\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} [blockName]\r\n   * @property {string} [keyPurposes]\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\treturn new asn1js.Sequence({\n\t\t\tname: names.blockName || \"\",\n\t\t\tvalue: [new asn1js.Repeated({\n\t\t\t\tname: names.keyPurposes || \"\",\n\t\t\t\tvalue: new asn1js.ObjectIdentifier()\n\t\t\t})]\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Clear input data first\n\t\t(0, _pvutils.clearProps)(schema, [\"keyPurposes\"]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, ExtKeyUsage.schema({\n\t\t\tnames: {\n\t\t\t\tkeyPurposes: \"keyPurposes\"\n\t\t\t}\n\t\t}));\n\n\t\tif (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for ExtKeyUsage\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.keyPurposes = Array.from(asn1.result.keyPurposes, element => element.valueBlock.toString());\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: Array.from(this.keyPurposes, element => new asn1js.ObjectIdentifier({ value: element }))\n\t\t});\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\treturn {\n\t\t\tkeyPurposes: Array.from(this.keyPurposes)\n\t\t};\n\t}\n\t//**********************************************************************************\n}\nexports.default = ExtKeyUsage; //**************************************************************************************\n//# sourceMappingURL=ExtKeyUsage.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n/**\r\n * Class from RFC5280\r\n */\nclass Time {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for Time class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  * @property {number} [type] 0 - UTCTime; 1 - GeneralizedTime; 2 - empty value\r\n  * @property {Date} [value] Value of the TIME class\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\t/**\r\n   * @type {number}\r\n   * @desc 0 - UTCTime; 1 - GeneralizedTime; 2 - empty value\r\n   */\n\t\tthis.type = (0, _pvutils.getParametersValue)(parameters, \"type\", Time.defaultValues(\"type\"));\n\t\t/**\r\n   * @type {Date}\r\n   * @desc Value of the TIME class\r\n   */\n\t\tthis.value = (0, _pvutils.getParametersValue)(parameters, \"value\", Time.defaultValues(\"value\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"type\":\n\t\t\t\treturn 0;\n\t\t\tcase \"value\":\n\t\t\t\treturn new Date(0, 0, 0);\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for Time class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * Time ::= CHOICE {\r\n     *   utcTime        UTCTime,\r\n     *   generalTime    GeneralizedTime }\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @param {boolean} optional Flag that current schema should be optional\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}, optional = false) {\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} [blockName]\r\n   * @property {string} [utcTimeName] Name for \"utcTimeName\" choice\r\n   * @property {string} [generalTimeName] Name for \"generalTimeName\" choice\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\treturn new asn1js.Choice({\n\t\t\toptional,\n\t\t\tvalue: [new asn1js.UTCTime({ name: names.utcTimeName || \"\" }), new asn1js.GeneralizedTime({ name: names.generalTimeName || \"\" })]\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Clear input data first\n\t\t(0, _pvutils.clearProps)(schema, [\"utcTimeName\", \"generalTimeName\"]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, Time.schema({\n\t\t\tnames: {\n\t\t\t\tutcTimeName: \"utcTimeName\",\n\t\t\t\tgeneralTimeName: \"generalTimeName\"\n\t\t\t}\n\t\t}));\n\n\t\tif (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for Time\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tif (\"utcTimeName\" in asn1.result) {\n\t\t\tthis.type = 0;\n\t\t\tthis.value = asn1.result.utcTimeName.toDate();\n\t\t}\n\t\tif (\"generalTimeName\" in asn1.result) {\n\t\t\tthis.type = 1;\n\t\t\tthis.value = asn1.result.generalTimeName.toDate();\n\t\t}\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\tlet result = {};\n\n\t\tif (this.type === 0) result = new asn1js.UTCTime({ valueDate: this.value });\n\t\tif (this.type === 1) result = new asn1js.GeneralizedTime({ valueDate: this.value });\n\n\t\treturn result;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\treturn {\n\t\t\ttype: this.type,\n\t\t\tvalue: this.value\n\t\t};\n\t}\n\t//**********************************************************************************\n}\nexports.default = Time; //**************************************************************************************\n//# sourceMappingURL=Time.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nvar _AttributeTypeAndValue = require(\"./AttributeTypeAndValue.js\");\n\nvar _AttributeTypeAndValue2 = _interopRequireDefault(_AttributeTypeAndValue);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n/**\r\n * Class from RFC5280\r\n */\nclass RelativeDistinguishedNames {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for RelativeDistinguishedNames class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  * @property {Array.<AttributeTypeAndValue>} [typesAndValues] Array of \"type and value\" objects\r\n  * @property {ArrayBuffer} [valueBeforeDecode] Value of the RDN before decoding from schema\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\t/**\r\n   * @type {Array.<AttributeTypeAndValue>}\r\n   * @desc Array of \"type and value\" objects\r\n   */\n\t\tthis.typesAndValues = (0, _pvutils.getParametersValue)(parameters, \"typesAndValues\", RelativeDistinguishedNames.defaultValues(\"typesAndValues\"));\n\t\t/**\r\n   * @type {ArrayBuffer}\r\n   * @desc Value of the RDN before decoding from schema\r\n   */\n\t\tthis.valueBeforeDecode = (0, _pvutils.getParametersValue)(parameters, \"valueBeforeDecode\", RelativeDistinguishedNames.defaultValues(\"valueBeforeDecode\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"typesAndValues\":\n\t\t\t\treturn [];\n\t\t\tcase \"valueBeforeDecode\":\n\t\t\t\treturn new ArrayBuffer(0);\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for RelativeDistinguishedNames class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Compare values with default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  * @param {*} memberValue Value to compare with default value\r\n  */\n\tstatic compareWithDefault(memberName, memberValue) {\n\t\tswitch (memberName) {\n\t\t\tcase \"typesAndValues\":\n\t\t\t\treturn memberValue.length === 0;\n\t\t\tcase \"valueBeforeDecode\":\n\t\t\t\treturn memberValue.byteLength === 0;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for RelativeDistinguishedNames class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * RDNSequence ::= Sequence OF RelativeDistinguishedName\r\n  *\r\n  * RelativeDistinguishedName ::=\r\n  * SET SIZE (1..MAX) OF AttributeTypeAndValue\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}) {\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} [blockName] Name for entire block\r\n   * @property {string} [repeatedSequence] Name for \"repeatedSequence\" block\r\n   * @property {string} [repeatedSet] Name for \"repeatedSet\" block\r\n   * @property {string} [typeAndValue] Name for \"typeAndValue\" block\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\treturn new asn1js.Sequence({\n\t\t\tname: names.blockName || \"\",\n\t\t\tvalue: [new asn1js.Repeated({\n\t\t\t\tname: names.repeatedSequence || \"\",\n\t\t\t\tvalue: new asn1js.Set({\n\t\t\t\t\tvalue: [new asn1js.Repeated({\n\t\t\t\t\t\tname: names.repeatedSet || \"\",\n\t\t\t\t\t\tvalue: _AttributeTypeAndValue2.default.schema(names.typeAndValue || {})\n\t\t\t\t\t})]\n\t\t\t\t})\n\t\t\t})]\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Clear input data first\n\t\t(0, _pvutils.clearProps)(schema, [\"RDN\", \"typesAndValues\"]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, RelativeDistinguishedNames.schema({\n\t\t\tnames: {\n\t\t\t\tblockName: \"RDN\",\n\t\t\t\trepeatedSet: \"typesAndValues\"\n\t\t\t}\n\t\t}));\n\n\t\tif (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for RelativeDistinguishedNames\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tif (\"typesAndValues\" in asn1.result) // Could be a case when there is no \"types and values\"\n\t\t\tthis.typesAndValues = Array.from(asn1.result.typesAndValues, element => new _AttributeTypeAndValue2.default({ schema: element }));\n\n\t\t// noinspection JSUnresolvedVariable\n\t\tthis.valueBeforeDecode = asn1.result.RDN.valueBeforeDecode;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\t//region Decode stored TBS value\n\t\tif (this.valueBeforeDecode.byteLength === 0) // No stored encoded array, create \"from scratch\"\n\t\t\t{\n\t\t\t\treturn new asn1js.Sequence({\n\t\t\t\t\tvalue: [new asn1js.Set({\n\t\t\t\t\t\tvalue: Array.from(this.typesAndValues, element => element.toSchema())\n\t\t\t\t\t})]\n\t\t\t\t});\n\t\t\t}\n\n\t\tconst asn1 = asn1js.fromBER(this.valueBeforeDecode);\n\t\t//endregion\n\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn asn1.result;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\treturn {\n\t\t\ttypesAndValues: Array.from(this.typesAndValues, element => element.toJSON())\n\t\t};\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Compare two RDN values, or RDN with ArrayBuffer value\r\n  * @param {(RelativeDistinguishedNames|ArrayBuffer)} compareTo The value compare to current\r\n  * @returns {boolean}\r\n  */\n\tisEqual(compareTo) {\n\t\tif (compareTo instanceof RelativeDistinguishedNames) {\n\t\t\tif (this.typesAndValues.length !== compareTo.typesAndValues.length) return false;\n\n\t\t\tvar _iteratorNormalCompletion = true;\n\t\t\tvar _didIteratorError = false;\n\t\t\tvar _iteratorError = undefined;\n\n\t\t\ttry {\n\t\t\t\tfor (var _iterator = this.typesAndValues.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\t\tconst _ref = _step.value;\n\n\t\t\t\t\tvar _ref2 = _slicedToArray(_ref, 2);\n\n\t\t\t\t\tconst index = _ref2[0];\n\t\t\t\t\tconst typeAndValue = _ref2[1];\n\n\t\t\t\t\tif (typeAndValue.isEqual(compareTo.typesAndValues[index]) === false) return false;\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\t_didIteratorError = true;\n\t\t\t\t_iteratorError = err;\n\t\t\t} finally {\n\t\t\t\ttry {\n\t\t\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t\t\t_iterator.return();\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tif (compareTo instanceof ArrayBuffer) return (0, _pvutils.isEqualBuffer)(this.valueBeforeDecode, compareTo);\n\n\t\treturn false;\n\t}\n\t//**********************************************************************************\n}\nexports.default = RelativeDistinguishedNames; //**************************************************************************************\n//# sourceMappingURL=RelativeDistinguishedNames.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.RawData = exports.Repeated = exports.Any = exports.Choice = exports.TIME = exports.Duration = exports.DateTime = exports.TimeOfDay = exports.DATE = exports.GeneralizedTime = exports.UTCTime = exports.CharacterString = exports.GeneralString = exports.VisibleString = exports.GraphicString = exports.IA5String = exports.VideotexString = exports.TeletexString = exports.PrintableString = exports.NumericString = exports.UniversalString = exports.BmpString = exports.Utf8String = exports.ObjectIdentifier = exports.Enumerated = exports.Integer = exports.BitString = exports.OctetString = exports.Null = exports.Set = exports.Sequence = exports.Boolean = exports.EndOfContent = exports.Constructed = exports.Primitive = exports.BaseBlock = undefined;\nexports.fromBER = fromBER;\nexports.compareSchema = compareSchema;\nexports.verifySchema = verifySchema;\nexports.fromJSON = fromJSON;\n\nvar _pvutils = require(\"pvutils\");\n\n//**************************************************************************************\n//region Declaration of global variables\n//**************************************************************************************\nconst powers2 = [new Uint8Array([1])]; /* eslint-disable indent */\n/*\r\n * Copyright (c) 2016-2018, Peculiar Ventures\r\n * All rights reserved.\r\n *\r\n * Author 2016-2018, Yury Strozhevsky <www.strozhevsky.com>.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its contributors\r\n *    may be used to endorse or promote products derived from this software without\r\n *    specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY\r\n * OF SUCH DAMAGE.\r\n *\r\n */\n//**************************************************************************************\n\nconst digitsString = \"0123456789\";\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration for \"LocalBaseBlock\" class\n//**************************************************************************************\n/**\r\n * Class used as a base block for all remaining ASN.1 classes\r\n * @typedef LocalBaseBlock\r\n * @interface\r\n * @property {number} blockLength\r\n * @property {string} error\r\n * @property {Array.<string>} warnings\r\n * @property {ArrayBuffer} valueBeforeDecode\r\n */\nclass LocalBaseBlock {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"LocalBaseBlock\" class\r\n  * @param {Object} [parameters={}]\r\n  * @property {ArrayBuffer} [valueBeforeDecode]\r\n  */\n\tconstructor(parameters = {}) {\n\t\t/**\r\n   * @type {number} blockLength\r\n   */\n\t\tthis.blockLength = (0, _pvutils.getParametersValue)(parameters, \"blockLength\", 0);\n\t\t/**\r\n   * @type {string} error\r\n   */\n\t\tthis.error = (0, _pvutils.getParametersValue)(parameters, \"error\", \"\");\n\t\t/**\r\n   * @type {Array.<string>} warnings\r\n   */\n\t\tthis.warnings = (0, _pvutils.getParametersValue)(parameters, \"warnings\", []);\n\t\t//noinspection JSCheckFunctionSignatures\n\t\t/**\r\n   * @type {ArrayBuffer} valueBeforeDecode\r\n   */\n\t\tif (\"valueBeforeDecode\" in parameters) this.valueBeforeDecode = parameters.valueBeforeDecode.slice(0);else this.valueBeforeDecode = new ArrayBuffer(0);\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"baseBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the block to JSON object\r\n  * @returns {{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n  */\n\ttoJSON() {\n\t\treturn {\n\t\t\tblockName: this.constructor.blockName(),\n\t\t\tblockLength: this.blockLength,\n\t\t\terror: this.error,\n\t\t\twarnings: this.warnings,\n\t\t\tvalueBeforeDecode: (0, _pvutils.bufferToHexCodes)(this.valueBeforeDecode, 0, this.valueBeforeDecode.byteLength)\n\t\t};\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Description for \"LocalHexBlock\" class\n//**************************************************************************************\n/**\r\n * Class used as a base block for all remaining ASN.1 classes\r\n * @extends LocalBaseBlock\r\n * @typedef LocalHexBlock\r\n * @property {number} blockLength\r\n * @property {string} error\r\n * @property {Array.<string>} warnings\r\n * @property {ArrayBuffer} valueBeforeDecode\r\n * @property {boolean} isHexOnly\r\n * @property {ArrayBuffer} valueHex\r\n */\n//noinspection JSUnusedLocalSymbols\nconst LocalHexBlock = BaseClass => class LocalHexBlockMixin extends BaseClass {\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\r\n  * Constructor for \"LocalHexBlock\" class\r\n  * @param {Object} [parameters={}]\r\n  * @property {ArrayBuffer} [valueHex]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters);\n\n\t\t/**\r\n   * @type {boolean}\r\n   */\n\t\tthis.isHexOnly = (0, _pvutils.getParametersValue)(parameters, \"isHexOnly\", false);\n\t\t/**\r\n   * @type {ArrayBuffer}\r\n   */\n\t\tif (\"valueHex\" in parameters) this.valueHex = parameters.valueHex.slice(0);else this.valueHex = new ArrayBuffer(0);\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"hexBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Base function for converting block from BER encoded array of bytes\r\n  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n  * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n  * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n  * @returns {number} Offset after least decoded byte\r\n  */\n\tfromBER(inputBuffer, inputOffset, inputLength) {\n\t\t//region Basic check for parameters\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tif ((0, _pvutils.checkBufferParams)(this, inputBuffer, inputOffset, inputLength) === false) return -1;\n\t\t//endregion\n\n\t\t//region Getting Uint8Array from ArrayBuffer\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n\t\t//endregion\n\n\t\t//region Initial checks\n\t\tif (intBuffer.length === 0) {\n\t\t\tthis.warnings.push(\"Zero buffer length\");\n\t\t\treturn inputOffset;\n\t\t}\n\t\t//endregion\n\n\t\t//region Copy input buffer to internal buffer\n\t\tthis.valueHex = inputBuffer.slice(inputOffset, inputOffset + inputLength);\n\t\t//endregion\n\n\t\tthis.blockLength = inputLength;\n\n\t\treturn inputOffset + inputLength;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n  * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n  * @returns {ArrayBuffer}\r\n  */\n\ttoBER(sizeOnly = false) {\n\t\tif (this.isHexOnly !== true) {\n\t\t\tthis.error = \"Flag \\\"isHexOnly\\\" is not set, abort\";\n\t\t\treturn new ArrayBuffer(0);\n\t\t}\n\n\t\tif (sizeOnly === true) return new ArrayBuffer(this.valueHex.byteLength);\n\n\t\t//noinspection JSCheckFunctionSignatures\n\t\treturn this.valueHex.slice(0);\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the block to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\tlet object = {};\n\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry {\n\t\t\tobject = super.toJSON();\n\t\t} catch (ex) {}\n\t\t//endregion\n\n\t\tobject.blockName = this.constructor.blockName();\n\t\tobject.isHexOnly = this.isHexOnly;\n\t\tobject.valueHex = (0, _pvutils.bufferToHexCodes)(this.valueHex, 0, this.valueHex.byteLength);\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n};\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of identification block class\n//**************************************************************************************\nclass LocalIdentificationBlock extends LocalHexBlock(LocalBaseBlock) {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"LocalBaseBlock\" class\r\n  * @param {Object} [parameters={}]\r\n  * @property {Object} [idBlock]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper();\n\n\t\tif (\"idBlock\" in parameters) {\n\t\t\t//region Properties from hexBlock class\n\t\t\tthis.isHexOnly = (0, _pvutils.getParametersValue)(parameters.idBlock, \"isHexOnly\", false);\n\t\t\tthis.valueHex = (0, _pvutils.getParametersValue)(parameters.idBlock, \"valueHex\", new ArrayBuffer(0));\n\t\t\t//endregion\n\n\t\t\tthis.tagClass = (0, _pvutils.getParametersValue)(parameters.idBlock, \"tagClass\", -1);\n\t\t\tthis.tagNumber = (0, _pvutils.getParametersValue)(parameters.idBlock, \"tagNumber\", -1);\n\t\t\tthis.isConstructed = (0, _pvutils.getParametersValue)(parameters.idBlock, \"isConstructed\", false);\n\t\t} else {\n\t\t\tthis.tagClass = -1;\n\t\t\tthis.tagNumber = -1;\n\t\t\tthis.isConstructed = false;\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"identificationBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n  * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n  * @returns {ArrayBuffer}\r\n  */\n\ttoBER(sizeOnly = false) {\n\t\t//region Initial variables\n\t\tlet firstOctet = 0;\n\t\tlet retBuf;\n\t\tlet retView;\n\t\t//endregion\n\n\t\tswitch (this.tagClass) {\n\t\t\tcase 1:\n\t\t\t\tfirstOctet |= 0x00; // UNIVERSAL\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tfirstOctet |= 0x40; // APPLICATION\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tfirstOctet |= 0x80; // CONTEXT-SPECIFIC\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tfirstOctet |= 0xC0; // PRIVATE\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.error = \"Unknown tag class\";\n\t\t\t\treturn new ArrayBuffer(0);\n\t\t}\n\n\t\tif (this.isConstructed) firstOctet |= 0x20;\n\n\t\tif (this.tagNumber < 31 && !this.isHexOnly) {\n\t\t\tretBuf = new ArrayBuffer(1);\n\t\t\tretView = new Uint8Array(retBuf);\n\n\t\t\tif (!sizeOnly) {\n\t\t\t\tlet number = this.tagNumber;\n\t\t\t\tnumber &= 0x1F;\n\t\t\t\tfirstOctet |= number;\n\n\t\t\t\tretView[0] = firstOctet;\n\t\t\t}\n\n\t\t\treturn retBuf;\n\t\t}\n\n\t\tif (this.isHexOnly === false) {\n\t\t\tconst encodedBuf = (0, _pvutils.utilToBase)(this.tagNumber, 7);\n\t\t\tconst encodedView = new Uint8Array(encodedBuf);\n\t\t\tconst size = encodedBuf.byteLength;\n\n\t\t\tretBuf = new ArrayBuffer(size + 1);\n\t\t\tretView = new Uint8Array(retBuf);\n\t\t\tretView[0] = firstOctet | 0x1F;\n\n\t\t\tif (!sizeOnly) {\n\t\t\t\tfor (let i = 0; i < size - 1; i++) retView[i + 1] = encodedView[i] | 0x80;\n\n\t\t\t\tretView[size] = encodedView[size - 1];\n\t\t\t}\n\n\t\t\treturn retBuf;\n\t\t}\n\n\t\tretBuf = new ArrayBuffer(this.valueHex.byteLength + 1);\n\t\tretView = new Uint8Array(retBuf);\n\n\t\tretView[0] = firstOctet | 0x1F;\n\n\t\tif (sizeOnly === false) {\n\t\t\tconst curView = new Uint8Array(this.valueHex);\n\n\t\t\tfor (let i = 0; i < curView.length - 1; i++) retView[i + 1] = curView[i] | 0x80;\n\n\t\t\tretView[this.valueHex.byteLength] = curView[curView.length - 1];\n\t\t}\n\n\t\treturn retBuf;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Base function for converting block from BER encoded array of bytes\r\n  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n  * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n  * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n  * @returns {number}\r\n  */\n\tfromBER(inputBuffer, inputOffset, inputLength) {\n\t\t//region Basic check for parameters\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tif ((0, _pvutils.checkBufferParams)(this, inputBuffer, inputOffset, inputLength) === false) return -1;\n\t\t//endregion\n\n\t\t//region Getting Uint8Array from ArrayBuffer\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n\t\t//endregion\n\n\t\t//region Initial checks\n\t\tif (intBuffer.length === 0) {\n\t\t\tthis.error = \"Zero buffer length\";\n\t\t\treturn -1;\n\t\t}\n\t\t//endregion\n\n\t\t//region Find tag class\n\t\tconst tagClassMask = intBuffer[0] & 0xC0;\n\n\t\tswitch (tagClassMask) {\n\t\t\tcase 0x00:\n\t\t\t\tthis.tagClass = 1; // UNIVERSAL\n\t\t\t\tbreak;\n\t\t\tcase 0x40:\n\t\t\t\tthis.tagClass = 2; // APPLICATION\n\t\t\t\tbreak;\n\t\t\tcase 0x80:\n\t\t\t\tthis.tagClass = 3; // CONTEXT-SPECIFIC\n\t\t\t\tbreak;\n\t\t\tcase 0xC0:\n\t\t\t\tthis.tagClass = 4; // PRIVATE\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.error = \"Unknown tag class\";\n\t\t\t\treturn -1;\n\t\t}\n\t\t//endregion\n\n\t\t//region Find it's constructed or not\n\t\tthis.isConstructed = (intBuffer[0] & 0x20) === 0x20;\n\t\t//endregion\n\n\t\t//region Find tag number\n\t\tthis.isHexOnly = false;\n\n\t\tconst tagNumberMask = intBuffer[0] & 0x1F;\n\n\t\t//region Simple case (tag number < 31)\n\t\tif (tagNumberMask !== 0x1F) {\n\t\t\tthis.tagNumber = tagNumberMask;\n\t\t\tthis.blockLength = 1;\n\t\t}\n\t\t//endregion\n\t\t//region Tag number bigger or equal to 31\n\t\telse {\n\t\t\t\tlet count = 1;\n\n\t\t\t\tthis.valueHex = new ArrayBuffer(255);\n\t\t\t\tlet tagNumberBufferMaxLength = 255;\n\t\t\t\tlet intTagNumberBuffer = new Uint8Array(this.valueHex);\n\n\t\t\t\t//noinspection JSBitwiseOperatorUsage\n\t\t\t\twhile (intBuffer[count] & 0x80) {\n\t\t\t\t\tintTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F;\n\t\t\t\t\tcount++;\n\n\t\t\t\t\tif (count >= intBuffer.length) {\n\t\t\t\t\t\tthis.error = \"End of input reached before message was fully decoded\";\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\n\t\t\t\t\t//region In case if tag number length is greater than 255 bytes (rare but possible case)\n\t\t\t\t\tif (count === tagNumberBufferMaxLength) {\n\t\t\t\t\t\ttagNumberBufferMaxLength += 255;\n\n\t\t\t\t\t\tconst tempBuffer = new ArrayBuffer(tagNumberBufferMaxLength);\n\t\t\t\t\t\tconst tempBufferView = new Uint8Array(tempBuffer);\n\n\t\t\t\t\t\tfor (let i = 0; i < intTagNumberBuffer.length; i++) tempBufferView[i] = intTagNumberBuffer[i];\n\n\t\t\t\t\t\tthis.valueHex = new ArrayBuffer(tagNumberBufferMaxLength);\n\t\t\t\t\t\tintTagNumberBuffer = new Uint8Array(this.valueHex);\n\t\t\t\t\t}\n\t\t\t\t\t//endregion\n\t\t\t\t}\n\n\t\t\t\tthis.blockLength = count + 1;\n\t\t\t\tintTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F; // Write last byte to buffer\n\n\t\t\t\t//region Cut buffer\n\t\t\t\tconst tempBuffer = new ArrayBuffer(count);\n\t\t\t\tconst tempBufferView = new Uint8Array(tempBuffer);\n\n\t\t\t\tfor (let i = 0; i < count; i++) tempBufferView[i] = intTagNumberBuffer[i];\n\n\t\t\t\tthis.valueHex = new ArrayBuffer(count);\n\t\t\t\tintTagNumberBuffer = new Uint8Array(this.valueHex);\n\t\t\t\tintTagNumberBuffer.set(tempBufferView);\n\t\t\t\t//endregion\n\n\t\t\t\t//region Try to convert long tag number to short form\n\t\t\t\tif (this.blockLength <= 9) this.tagNumber = (0, _pvutils.utilFromBase)(intTagNumberBuffer, 7);else {\n\t\t\t\t\tthis.isHexOnly = true;\n\t\t\t\t\tthis.warnings.push(\"Tag too long, represented as hex-coded\");\n\t\t\t\t}\n\t\t\t\t//endregion\n\t\t\t}\n\t\t//endregion\n\t\t//endregion\n\n\t\t//region Check if constructed encoding was using for primitive type\n\t\tif (this.tagClass === 1 && this.isConstructed) {\n\t\t\tswitch (this.tagNumber) {\n\t\t\t\tcase 1: // Boolean\n\t\t\t\tcase 2: // REAL\n\t\t\t\tcase 5: // Null\n\t\t\t\tcase 6: // OBJECT IDENTIFIER\n\t\t\t\tcase 9: // REAL\n\t\t\t\tcase 14: // Time\n\t\t\t\tcase 23:\n\t\t\t\tcase 24:\n\t\t\t\tcase 31:\n\t\t\t\tcase 32:\n\t\t\t\tcase 33:\n\t\t\t\tcase 34:\n\t\t\t\t\tthis.error = \"Constructed encoding used for primitive type\";\n\t\t\t\t\treturn -1;\n\t\t\t\tdefault:\n\t\t\t}\n\t\t}\n\t\t//endregion\n\n\t\treturn inputOffset + this.blockLength; // Return current offset in input buffer\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the block to JSON object\r\n  * @returns {{blockName: string,\r\n  *  tagClass: number,\r\n  *  tagNumber: number,\r\n  *  isConstructed: boolean,\r\n  *  isHexOnly: boolean,\r\n  *  valueHex: ArrayBuffer,\r\n  *  blockLength: number,\r\n  *  error: string, warnings: Array.<string>,\r\n  *  valueBeforeDecode: string}}\r\n  */\n\ttoJSON() {\n\t\tlet object = {};\n\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry {\n\t\t\tobject = super.toJSON();\n\t\t} catch (ex) {}\n\t\t//endregion\n\n\t\tobject.blockName = this.constructor.blockName();\n\t\tobject.tagClass = this.tagClass;\n\t\tobject.tagNumber = this.tagNumber;\n\t\tobject.isConstructed = this.isConstructed;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of length block class\n//**************************************************************************************\nclass LocalLengthBlock extends LocalBaseBlock {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"LocalLengthBlock\" class\r\n  * @param {Object} [parameters={}]\r\n  * @property {Object} [lenBlock]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper();\n\n\t\tif (\"lenBlock\" in parameters) {\n\t\t\tthis.isIndefiniteForm = (0, _pvutils.getParametersValue)(parameters.lenBlock, \"isIndefiniteForm\", false);\n\t\t\tthis.longFormUsed = (0, _pvutils.getParametersValue)(parameters.lenBlock, \"longFormUsed\", false);\n\t\t\tthis.length = (0, _pvutils.getParametersValue)(parameters.lenBlock, \"length\", 0);\n\t\t} else {\n\t\t\tthis.isIndefiniteForm = false;\n\t\t\tthis.longFormUsed = false;\n\t\t\tthis.length = 0;\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"lengthBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Base function for converting block from BER encoded array of bytes\r\n  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n  * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n  * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n  * @returns {number}\r\n  */\n\tfromBER(inputBuffer, inputOffset, inputLength) {\n\t\t//region Basic check for parameters\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tif ((0, _pvutils.checkBufferParams)(this, inputBuffer, inputOffset, inputLength) === false) return -1;\n\t\t//endregion\n\n\t\t//region Getting Uint8Array from ArrayBuffer\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n\t\t//endregion\n\n\t\t//region Initial checks\n\t\tif (intBuffer.length === 0) {\n\t\t\tthis.error = \"Zero buffer length\";\n\t\t\treturn -1;\n\t\t}\n\n\t\tif (intBuffer[0] === 0xFF) {\n\t\t\tthis.error = \"Length block 0xFF is reserved by standard\";\n\t\t\treturn -1;\n\t\t}\n\t\t//endregion\n\n\t\t//region Check for length form type\n\t\tthis.isIndefiniteForm = intBuffer[0] === 0x80;\n\t\t//endregion\n\n\t\t//region Stop working in case of indefinite length form\n\t\tif (this.isIndefiniteForm === true) {\n\t\t\tthis.blockLength = 1;\n\t\t\treturn inputOffset + this.blockLength;\n\t\t}\n\t\t//endregion\n\n\t\t//region Check is long form of length encoding using\n\t\tthis.longFormUsed = !!(intBuffer[0] & 0x80);\n\t\t//endregion\n\n\t\t//region Stop working in case of short form of length value\n\t\tif (this.longFormUsed === false) {\n\t\t\tthis.length = intBuffer[0];\n\t\t\tthis.blockLength = 1;\n\t\t\treturn inputOffset + this.blockLength;\n\t\t}\n\t\t//endregion\n\n\t\t//region Calculate length value in case of long form\n\t\tconst count = intBuffer[0] & 0x7F;\n\n\t\tif (count > 8) // Too big length value\n\t\t\t{\n\t\t\t\tthis.error = \"Too big integer\";\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\tif (count + 1 > intBuffer.length) {\n\t\t\tthis.error = \"End of input reached before message was fully decoded\";\n\t\t\treturn -1;\n\t\t}\n\n\t\tconst lengthBufferView = new Uint8Array(count);\n\n\t\tfor (let i = 0; i < count; i++) lengthBufferView[i] = intBuffer[i + 1];\n\n\t\tif (lengthBufferView[count - 1] === 0x00) this.warnings.push(\"Needlessly long encoded length\");\n\n\t\tthis.length = (0, _pvutils.utilFromBase)(lengthBufferView, 8);\n\n\t\tif (this.longFormUsed && this.length <= 127) this.warnings.push(\"Unneccesary usage of long length form\");\n\n\t\tthis.blockLength = count + 1;\n\t\t//endregion\n\n\t\treturn inputOffset + this.blockLength; // Return current offset in input buffer\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n  * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n  * @returns {ArrayBuffer}\r\n  */\n\ttoBER(sizeOnly = false) {\n\t\t//region Initial variables\n\t\tlet retBuf;\n\t\tlet retView;\n\t\t//endregion\n\n\t\tif (this.length > 127) this.longFormUsed = true;\n\n\t\tif (this.isIndefiniteForm) {\n\t\t\tretBuf = new ArrayBuffer(1);\n\n\t\t\tif (sizeOnly === false) {\n\t\t\t\tretView = new Uint8Array(retBuf);\n\t\t\t\tretView[0] = 0x80;\n\t\t\t}\n\n\t\t\treturn retBuf;\n\t\t}\n\n\t\tif (this.longFormUsed === true) {\n\t\t\tconst encodedBuf = (0, _pvutils.utilToBase)(this.length, 8);\n\n\t\t\tif (encodedBuf.byteLength > 127) {\n\t\t\t\tthis.error = \"Too big length\";\n\t\t\t\treturn new ArrayBuffer(0);\n\t\t\t}\n\n\t\t\tretBuf = new ArrayBuffer(encodedBuf.byteLength + 1);\n\n\t\t\tif (sizeOnly === true) return retBuf;\n\n\t\t\tconst encodedView = new Uint8Array(encodedBuf);\n\t\t\tretView = new Uint8Array(retBuf);\n\n\t\t\tretView[0] = encodedBuf.byteLength | 0x80;\n\n\t\t\tfor (let i = 0; i < encodedBuf.byteLength; i++) retView[i + 1] = encodedView[i];\n\n\t\t\treturn retBuf;\n\t\t}\n\n\t\tretBuf = new ArrayBuffer(1);\n\n\t\tif (sizeOnly === false) {\n\t\t\tretView = new Uint8Array(retBuf);\n\n\t\t\tretView[0] = this.length;\n\t\t}\n\n\t\treturn retBuf;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the block to JSON object\r\n  * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n  */\n\ttoJSON() {\n\t\tlet object = {};\n\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry {\n\t\t\tobject = super.toJSON();\n\t\t} catch (ex) {}\n\t\t//endregion\n\n\t\tobject.blockName = this.constructor.blockName();\n\t\tobject.isIndefiniteForm = this.isIndefiniteForm;\n\t\tobject.longFormUsed = this.longFormUsed;\n\t\tobject.length = this.length;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of value block class\n//**************************************************************************************\nclass LocalValueBlock extends LocalBaseBlock {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"LocalValueBlock\" class\r\n  * @param {Object} [parameters={}]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters);\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"valueBlock\";\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedLocalSymbols,JSUnusedLocalSymbols,JSUnusedLocalSymbols\n\t/**\r\n  * Base function for converting block from BER encoded array of bytes\r\n  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n  * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n  * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n  * @returns {number}\r\n  */\n\tfromBER(inputBuffer, inputOffset, inputLength) {\n\t\t//region Throw an exception for a function which needs to be specified in extended classes\n\t\tthrow TypeError(\"User need to make a specific function in a class which extends \\\"LocalValueBlock\\\"\");\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedLocalSymbols\n\t/**\r\n  * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n  * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n  * @returns {ArrayBuffer}\r\n  */\n\ttoBER(sizeOnly = false) {\n\t\t//region Throw an exception for a function which needs to be specified in extended classes\n\t\tthrow TypeError(\"User need to make a specific function in a class which extends \\\"LocalValueBlock\\\"\");\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of basic ASN.1 block class\n//**************************************************************************************\nclass BaseBlock extends LocalBaseBlock {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"BaseBlock\" class\r\n  * @param {Object} [parameters={}]\r\n  * @property {Object} [primitiveSchema]\r\n  * @property {string} [name]\r\n  * @property {boolean} [optional]\r\n  * @param valueBlockType Type of value block\r\n  */\n\tconstructor(parameters = {}, valueBlockType = LocalValueBlock) {\n\t\tsuper(parameters);\n\n\t\tif (\"name\" in parameters) this.name = parameters.name;\n\t\tif (\"optional\" in parameters) this.optional = parameters.optional;\n\t\tif (\"primitiveSchema\" in parameters) this.primitiveSchema = parameters.primitiveSchema;\n\n\t\tthis.idBlock = new LocalIdentificationBlock(parameters);\n\t\tthis.lenBlock = new LocalLengthBlock(parameters);\n\t\tthis.valueBlock = new valueBlockType(parameters);\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"BaseBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Base function for converting block from BER encoded array of bytes\r\n  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n  * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n  * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n  * @returns {number}\r\n  */\n\tfromBER(inputBuffer, inputOffset, inputLength) {\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm === true ? inputLength : this.lenBlock.length);\n\t\tif (resultOffset === -1) {\n\t\t\tthis.error = this.valueBlock.error;\n\t\t\treturn resultOffset;\n\t\t}\n\n\t\tif (this.idBlock.error.length === 0) this.blockLength += this.idBlock.blockLength;\n\n\t\tif (this.lenBlock.error.length === 0) this.blockLength += this.lenBlock.blockLength;\n\n\t\tif (this.valueBlock.error.length === 0) this.blockLength += this.valueBlock.blockLength;\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n  * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n  * @returns {ArrayBuffer}\r\n  */\n\ttoBER(sizeOnly = false) {\n\t\tlet retBuf;\n\n\t\tconst idBlockBuf = this.idBlock.toBER(sizeOnly);\n\t\tconst valueBlockSizeBuf = this.valueBlock.toBER(true);\n\n\t\tthis.lenBlock.length = valueBlockSizeBuf.byteLength;\n\t\tconst lenBlockBuf = this.lenBlock.toBER(sizeOnly);\n\n\t\tretBuf = (0, _pvutils.utilConcatBuf)(idBlockBuf, lenBlockBuf);\n\n\t\tlet valueBlockBuf;\n\n\t\tif (sizeOnly === false) valueBlockBuf = this.valueBlock.toBER(sizeOnly);else valueBlockBuf = new ArrayBuffer(this.lenBlock.length);\n\n\t\tretBuf = (0, _pvutils.utilConcatBuf)(retBuf, valueBlockBuf);\n\n\t\tif (this.lenBlock.isIndefiniteForm === true) {\n\t\t\tconst indefBuf = new ArrayBuffer(2);\n\n\t\t\tif (sizeOnly === false) {\n\t\t\t\tconst indefView = new Uint8Array(indefBuf);\n\n\t\t\t\tindefView[0] = 0x00;\n\t\t\t\tindefView[1] = 0x00;\n\t\t\t}\n\n\t\t\tretBuf = (0, _pvutils.utilConcatBuf)(retBuf, indefBuf);\n\t\t}\n\n\t\treturn retBuf;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the block to JSON object\r\n  * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n  */\n\ttoJSON() {\n\t\tlet object = {};\n\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry {\n\t\t\tobject = super.toJSON();\n\t\t} catch (ex) {}\n\t\t//endregion\n\n\t\tobject.idBlock = this.idBlock.toJSON();\n\t\tobject.lenBlock = this.lenBlock.toJSON();\n\t\tobject.valueBlock = this.valueBlock.toJSON();\n\n\t\tif (\"name\" in this) object.name = this.name;\n\t\tif (\"optional\" in this) object.optional = this.optional;\n\t\tif (\"primitiveSchema\" in this) object.primitiveSchema = this.primitiveSchema.toJSON();\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\nexports.BaseBlock = BaseBlock; //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of basic block for all PRIMITIVE types\n//**************************************************************************************\n\nclass LocalPrimitiveValueBlock extends LocalValueBlock {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"LocalPrimitiveValueBlock\" class\r\n  * @param {Object} [parameters={}]\r\n  * @property {ArrayBuffer} [valueBeforeDecode]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters);\n\n\t\t//region Variables from \"hexBlock\" class\n\t\tif (\"valueHex\" in parameters) this.valueHex = parameters.valueHex.slice(0);else this.valueHex = new ArrayBuffer(0);\n\n\t\tthis.isHexOnly = (0, _pvutils.getParametersValue)(parameters, \"isHexOnly\", true);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Base function for converting block from BER encoded array of bytes\r\n  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n  * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n  * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n  * @returns {number}\r\n  */\n\tfromBER(inputBuffer, inputOffset, inputLength) {\n\t\t//region Basic check for parameters\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tif ((0, _pvutils.checkBufferParams)(this, inputBuffer, inputOffset, inputLength) === false) return -1;\n\t\t//endregion\n\n\t\t//region Getting Uint8Array from ArrayBuffer\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n\t\t//endregion\n\n\t\t//region Initial checks\n\t\tif (intBuffer.length === 0) {\n\t\t\tthis.warnings.push(\"Zero buffer length\");\n\t\t\treturn inputOffset;\n\t\t}\n\t\t//endregion\n\n\t\t//region Copy input buffer into internal buffer\n\t\tthis.valueHex = new ArrayBuffer(intBuffer.length);\n\t\tconst valueHexView = new Uint8Array(this.valueHex);\n\n\t\tfor (let i = 0; i < intBuffer.length; i++) valueHexView[i] = intBuffer[i];\n\t\t//endregion\n\n\t\tthis.blockLength = inputLength;\n\n\t\treturn inputOffset + inputLength;\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedLocalSymbols\n\t/**\r\n  * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n  * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n  * @returns {ArrayBuffer}\r\n  */\n\ttoBER(sizeOnly = false) {\n\t\treturn this.valueHex.slice(0);\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"PrimitiveValueBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the block to JSON object\r\n  * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n  */\n\ttoJSON() {\n\t\tlet object = {};\n\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry {\n\t\t\tobject = super.toJSON();\n\t\t} catch (ex) {}\n\t\t//endregion\n\n\t\tobject.valueHex = (0, _pvutils.bufferToHexCodes)(this.valueHex, 0, this.valueHex.byteLength);\n\t\tobject.isHexOnly = this.isHexOnly;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nclass Primitive extends BaseBlock {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"Primitive\" class\r\n  * @param {Object} [parameters={}]\r\n  * @property {ArrayBuffer} [valueHex]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters, LocalPrimitiveValueBlock);\n\n\t\tthis.idBlock.isConstructed = false;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"PRIMITIVE\";\n\t}\n\t//**********************************************************************************\n}\nexports.Primitive = Primitive; //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of basic block for all CONSTRUCTED types\n//**************************************************************************************\n\nclass LocalConstructedValueBlock extends LocalValueBlock {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"LocalConstructedValueBlock\" class\r\n  * @param {Object} [parameters={}]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters);\n\n\t\tthis.value = (0, _pvutils.getParametersValue)(parameters, \"value\", []);\n\t\tthis.isIndefiniteForm = (0, _pvutils.getParametersValue)(parameters, \"isIndefiniteForm\", false);\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Base function for converting block from BER encoded array of bytes\r\n  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n  * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n  * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n  * @returns {number}\r\n  */\n\tfromBER(inputBuffer, inputOffset, inputLength) {\n\t\t//region Store initial offset and length\n\t\tconst initialOffset = inputOffset;\n\t\tconst initialLength = inputLength;\n\t\t//endregion\n\n\t\t//region Basic check for parameters\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tif ((0, _pvutils.checkBufferParams)(this, inputBuffer, inputOffset, inputLength) === false) return -1;\n\t\t//endregion\n\n\t\t//region Getting Uint8Array from ArrayBuffer\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n\t\t//endregion\n\n\t\t//region Initial checks\n\t\tif (intBuffer.length === 0) {\n\t\t\tthis.warnings.push(\"Zero buffer length\");\n\t\t\treturn inputOffset;\n\t\t}\n\t\t//endregion\n\n\t\t//region Aux function\n\t\tfunction checkLen(indefiniteLength, length) {\n\t\t\tif (indefiniteLength === true) return 1;\n\n\t\t\treturn length;\n\t\t}\n\t\t//endregion\n\n\t\tlet currentOffset = inputOffset;\n\n\t\twhile (checkLen(this.isIndefiniteForm, inputLength) > 0) {\n\t\t\tconst returnObject = LocalFromBER(inputBuffer, currentOffset, inputLength);\n\t\t\tif (returnObject.offset === -1) {\n\t\t\t\tthis.error = returnObject.result.error;\n\t\t\t\tthis.warnings.concat(returnObject.result.warnings);\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\tcurrentOffset = returnObject.offset;\n\n\t\t\tthis.blockLength += returnObject.result.blockLength;\n\t\t\tinputLength -= returnObject.result.blockLength;\n\n\t\t\tthis.value.push(returnObject.result);\n\n\t\t\tif (this.isIndefiniteForm === true && returnObject.result.constructor.blockName() === EndOfContent.blockName()) break;\n\t\t}\n\n\t\tif (this.isIndefiniteForm === true) {\n\t\t\tif (this.value[this.value.length - 1].constructor.blockName() === EndOfContent.blockName()) this.value.pop();else this.warnings.push(\"No EndOfContent block encoded\");\n\t\t}\n\n\t\t//region Copy \"inputBuffer\" to \"valueBeforeDecode\"\n\t\tthis.valueBeforeDecode = inputBuffer.slice(initialOffset, initialOffset + initialLength);\n\t\t//endregion\n\n\t\treturn currentOffset;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n  * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n  * @returns {ArrayBuffer}\r\n  */\n\ttoBER(sizeOnly = false) {\n\t\tlet retBuf = new ArrayBuffer(0);\n\n\t\tfor (let i = 0; i < this.value.length; i++) {\n\t\t\tconst valueBuf = this.value[i].toBER(sizeOnly);\n\t\t\tretBuf = (0, _pvutils.utilConcatBuf)(retBuf, valueBuf);\n\t\t}\n\n\t\treturn retBuf;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"ConstructedValueBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the block to JSON object\r\n  * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n  */\n\ttoJSON() {\n\t\tlet object = {};\n\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry {\n\t\t\tobject = super.toJSON();\n\t\t} catch (ex) {}\n\t\t//endregion\n\n\t\tobject.isIndefiniteForm = this.isIndefiniteForm;\n\t\tobject.value = [];\n\t\tfor (let i = 0; i < this.value.length; i++) object.value.push(this.value[i].toJSON());\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nclass Constructed extends BaseBlock {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"Constructed\" class\r\n  * @param {Object} [parameters={}]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters, LocalConstructedValueBlock);\n\n\t\tthis.idBlock.isConstructed = true;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"CONSTRUCTED\";\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Base function for converting block from BER encoded array of bytes\r\n  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n  * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n  * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n  * @returns {number}\r\n  */\n\tfromBER(inputBuffer, inputOffset, inputLength) {\n\t\tthis.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\n\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm === true ? inputLength : this.lenBlock.length);\n\t\tif (resultOffset === -1) {\n\t\t\tthis.error = this.valueBlock.error;\n\t\t\treturn resultOffset;\n\t\t}\n\n\t\tif (this.idBlock.error.length === 0) this.blockLength += this.idBlock.blockLength;\n\n\t\tif (this.lenBlock.error.length === 0) this.blockLength += this.lenBlock.blockLength;\n\n\t\tif (this.valueBlock.error.length === 0) this.blockLength += this.valueBlock.blockLength;\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n}\nexports.Constructed = Constructed; //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of ASN.1 EndOfContent type class\n//**************************************************************************************\n\nclass LocalEndOfContentValueBlock extends LocalValueBlock {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"LocalEndOfContentValueBlock\" class\r\n  * @param {Object} [parameters={}]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters);\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedLocalSymbols,JSUnusedLocalSymbols\n\t/**\r\n  * Base function for converting block from BER encoded array of bytes\r\n  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n  * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n  * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n  * @returns {number}\r\n  */\n\tfromBER(inputBuffer, inputOffset, inputLength) {\n\t\t//region There is no \"value block\" for EndOfContent type and we need to return the same offset\n\t\treturn inputOffset;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedLocalSymbols\n\t/**\r\n  * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n  * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n  * @returns {ArrayBuffer}\r\n  */\n\ttoBER(sizeOnly = false) {\n\t\treturn new ArrayBuffer(0);\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"EndOfContentValueBlock\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nclass EndOfContent extends BaseBlock {\n\t//**********************************************************************************\n\tconstructor(paramaters = {}) {\n\t\tsuper(paramaters, LocalEndOfContentValueBlock);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 0; // EndOfContent\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"EndOfContent\";\n\t}\n\t//**********************************************************************************\n}\nexports.EndOfContent = EndOfContent; //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of ASN.1 Boolean type class\n//**************************************************************************************\n\nclass LocalBooleanValueBlock extends LocalValueBlock {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"LocalBooleanValueBlock\" class\r\n  * @param {Object} [parameters={}]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters);\n\n\t\tthis.value = (0, _pvutils.getParametersValue)(parameters, \"value\", false);\n\t\tthis.isHexOnly = (0, _pvutils.getParametersValue)(parameters, \"isHexOnly\", false);\n\n\t\tif (\"valueHex\" in parameters) this.valueHex = parameters.valueHex.slice(0);else {\n\t\t\tthis.valueHex = new ArrayBuffer(1);\n\t\t\tif (this.value === true) {\n\t\t\t\tconst view = new Uint8Array(this.valueHex);\n\t\t\t\tview[0] = 0xFF;\n\t\t\t}\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Base function for converting block from BER encoded array of bytes\r\n  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n  * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n  * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n  * @returns {number} Offset after least decoded byte\r\n  */\n\tfromBER(inputBuffer, inputOffset, inputLength) {\n\t\t//region Basic check for parameters\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tif ((0, _pvutils.checkBufferParams)(this, inputBuffer, inputOffset, inputLength) === false) return -1;\n\t\t//endregion\n\n\t\t//region Getting Uint8Array from ArrayBuffer\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n\t\t//endregion\n\n\t\tif (inputLength > 1) this.warnings.push(\"Boolean value encoded in more then 1 octet\");\n\n\t\tthis.isHexOnly = true;\n\n\t\t//region Copy input buffer to internal array\n\t\tthis.valueHex = new ArrayBuffer(intBuffer.length);\n\t\tconst view = new Uint8Array(this.valueHex);\n\n\t\tfor (let i = 0; i < intBuffer.length; i++) view[i] = intBuffer[i];\n\t\t//endregion\n\n\t\tif (_pvutils.utilDecodeTC.call(this) !== 0) this.value = true;else this.value = false;\n\n\t\tthis.blockLength = inputLength;\n\n\t\treturn inputOffset + inputLength;\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedLocalSymbols\n\t/**\r\n  * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n  * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n  * @returns {ArrayBuffer}\r\n  */\n\ttoBER(sizeOnly = false) {\n\t\treturn this.valueHex;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"BooleanValueBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the block to JSON object\r\n  * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n  */\n\ttoJSON() {\n\t\tlet object = {};\n\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry {\n\t\t\tobject = super.toJSON();\n\t\t} catch (ex) {}\n\t\t//endregion\n\n\t\tobject.value = this.value;\n\t\tobject.isHexOnly = this.isHexOnly;\n\t\tobject.valueHex = (0, _pvutils.bufferToHexCodes)(this.valueHex, 0, this.valueHex.byteLength);\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nclass Boolean extends BaseBlock {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"Boolean\" class\r\n  * @param {Object} [parameters={}]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters, LocalBooleanValueBlock);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 1; // Boolean\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"Boolean\";\n\t}\n\t//**********************************************************************************\n}\nexports.Boolean = Boolean; //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of ASN.1 Sequence and Set type classes\n//**************************************************************************************\n\nclass Sequence extends Constructed {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"Sequence\" class\r\n  * @param {Object} [parameters={}]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 16; // Sequence\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"Sequence\";\n\t}\n\t//**********************************************************************************\n}\nexports.Sequence = Sequence; //**************************************************************************************\n\nclass Set extends Constructed {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"Set\" class\r\n  * @param {Object} [parameters={}]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 17; // Set\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"Set\";\n\t}\n\t//**********************************************************************************\n}\nexports.Set = Set; //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of ASN.1 Null type class\n//**************************************************************************************\n\nclass Null extends BaseBlock {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"Null\" class\r\n  * @param {Object} [parameters={}]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters, LocalBaseBlock); // We will not have a call to \"Null value block\" because of specified \"fromBER\" and \"toBER\" functions\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 5; // Null\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"Null\";\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedLocalSymbols\n\t/**\r\n  * Base function for converting block from BER encoded array of bytes\r\n  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n  * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n  * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n  * @returns {number} Offset after least decoded byte\r\n  */\n\tfromBER(inputBuffer, inputOffset, inputLength) {\n\t\tif (this.lenBlock.length > 0) this.warnings.push(\"Non-zero length of value block for Null type\");\n\n\t\tif (this.idBlock.error.length === 0) this.blockLength += this.idBlock.blockLength;\n\n\t\tif (this.lenBlock.error.length === 0) this.blockLength += this.lenBlock.blockLength;\n\n\t\tthis.blockLength += inputLength;\n\n\t\tif (inputOffset + inputLength > inputBuffer.byteLength) {\n\t\t\tthis.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\n\t\t\treturn -1;\n\t\t}\n\n\t\treturn inputOffset + inputLength;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n  * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n  * @returns {ArrayBuffer}\r\n  */\n\ttoBER(sizeOnly = false) {\n\t\tconst retBuf = new ArrayBuffer(2);\n\n\t\tif (sizeOnly === true) return retBuf;\n\n\t\tconst retView = new Uint8Array(retBuf);\n\t\tretView[0] = 0x05;\n\t\tretView[1] = 0x00;\n\n\t\treturn retBuf;\n\t}\n\t//**********************************************************************************\n}\nexports.Null = Null; //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of ASN.1 OctetString type class\n//**************************************************************************************\n\nclass LocalOctetStringValueBlock extends LocalHexBlock(LocalConstructedValueBlock) {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"LocalOctetStringValueBlock\" class\r\n  * @param {Object} [parameters={}]\r\n  * @property {ArrayBuffer} [valueHex]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters);\n\n\t\tthis.isConstructed = (0, _pvutils.getParametersValue)(parameters, \"isConstructed\", false);\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Base function for converting block from BER encoded array of bytes\r\n  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n  * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n  * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n  * @returns {number} Offset after least decoded byte\r\n  */\n\tfromBER(inputBuffer, inputOffset, inputLength) {\n\t\tlet resultOffset = 0;\n\n\t\tif (this.isConstructed === true) {\n\t\t\tthis.isHexOnly = false;\n\n\t\t\tresultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);\n\t\t\tif (resultOffset === -1) return resultOffset;\n\n\t\t\tfor (let i = 0; i < this.value.length; i++) {\n\t\t\t\tconst currentBlockName = this.value[i].constructor.blockName();\n\n\t\t\t\tif (currentBlockName === EndOfContent.blockName()) {\n\t\t\t\t\tif (this.isIndefiniteForm === true) break;else {\n\t\t\t\t\t\tthis.error = \"EndOfContent is unexpected, OCTET STRING may consists of OCTET STRINGs only\";\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (currentBlockName !== OctetString.blockName()) {\n\t\t\t\t\tthis.error = \"OCTET STRING may consists of OCTET STRINGs only\";\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthis.isHexOnly = true;\n\n\t\t\tresultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);\n\t\t\tthis.blockLength = inputLength;\n\t\t}\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n  * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n  * @returns {ArrayBuffer}\r\n  */\n\ttoBER(sizeOnly = false) {\n\t\tif (this.isConstructed === true) return LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly);\n\n\t\tlet retBuf = new ArrayBuffer(this.valueHex.byteLength);\n\n\t\tif (sizeOnly === true) return retBuf;\n\n\t\tif (this.valueHex.byteLength === 0) return retBuf;\n\n\t\tretBuf = this.valueHex.slice(0);\n\n\t\treturn retBuf;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"OctetStringValueBlock\";\n\t}\n\t//**********************************************************************************\n\ttoJSON() {\n\t\tlet object = {};\n\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry {\n\t\t\tobject = super.toJSON();\n\t\t} catch (ex) {}\n\t\t//endregion\n\n\t\tobject.isConstructed = this.isConstructed;\n\t\tobject.isHexOnly = this.isHexOnly;\n\t\tobject.valueHex = (0, _pvutils.bufferToHexCodes)(this.valueHex, 0, this.valueHex.byteLength);\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nclass OctetString extends BaseBlock {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"OctetString\" class\r\n  * @param {Object} [parameters={}]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters, LocalOctetStringValueBlock);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 4; // OctetString\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Base function for converting block from BER encoded array of bytes\r\n  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n  * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n  * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n  * @returns {number} Offset after least decoded byte\r\n  */\n\tfromBER(inputBuffer, inputOffset, inputLength) {\n\t\tthis.valueBlock.isConstructed = this.idBlock.isConstructed;\n\t\tthis.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\n\n\t\t//region Ability to encode empty OCTET STRING\n\t\tif (inputLength === 0) {\n\t\t\tif (this.idBlock.error.length === 0) this.blockLength += this.idBlock.blockLength;\n\n\t\t\tif (this.lenBlock.error.length === 0) this.blockLength += this.lenBlock.blockLength;\n\n\t\t\treturn inputOffset;\n\t\t}\n\t\t//endregion\n\n\t\treturn super.fromBER(inputBuffer, inputOffset, inputLength);\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"OctetString\";\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\r\n  * Checking that two OCTETSTRINGs are equal\r\n  * @param {OctetString} octetString\r\n  */\n\tisEqual(octetString) {\n\t\t//region Check input type\n\t\tif (octetString instanceof OctetString === false) return false;\n\t\t//endregion\n\n\t\t//region Compare two JSON strings\n\t\tif (JSON.stringify(this) !== JSON.stringify(octetString)) return false;\n\t\t//endregion\n\n\t\treturn true;\n\t}\n\t//**********************************************************************************\n}\nexports.OctetString = OctetString; //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of ASN.1 BitString type class\n//**************************************************************************************\n\nclass LocalBitStringValueBlock extends LocalHexBlock(LocalConstructedValueBlock) {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"LocalBitStringValueBlock\" class\r\n  * @param {Object} [parameters={}]\r\n  * @property {ArrayBuffer} [valueHex]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters);\n\n\t\tthis.unusedBits = (0, _pvutils.getParametersValue)(parameters, \"unusedBits\", 0);\n\t\tthis.isConstructed = (0, _pvutils.getParametersValue)(parameters, \"isConstructed\", false);\n\t\tthis.blockLength = this.valueHex.byteLength;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Base function for converting block from BER encoded array of bytes\r\n  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n  * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n  * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n  * @returns {number} Offset after least decoded byte\r\n  */\n\tfromBER(inputBuffer, inputOffset, inputLength) {\n\t\t//region Ability to decode zero-length BitString value\n\t\tif (inputLength === 0) return inputOffset;\n\t\t//endregion\n\n\t\tlet resultOffset = -1;\n\n\t\t//region If the BISTRING supposed to be a constructed value\n\t\tif (this.isConstructed === true) {\n\t\t\tresultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);\n\t\t\tif (resultOffset === -1) return resultOffset;\n\n\t\t\tfor (let i = 0; i < this.value.length; i++) {\n\t\t\t\tconst currentBlockName = this.value[i].constructor.blockName();\n\n\t\t\t\tif (currentBlockName === EndOfContent.blockName()) {\n\t\t\t\t\tif (this.isIndefiniteForm === true) break;else {\n\t\t\t\t\t\tthis.error = \"EndOfContent is unexpected, BIT STRING may consists of BIT STRINGs only\";\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (currentBlockName !== BitString.blockName()) {\n\t\t\t\t\tthis.error = \"BIT STRING may consists of BIT STRINGs only\";\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\n\t\t\t\tif (this.unusedBits > 0 && this.value[i].valueBlock.unusedBits > 0) {\n\t\t\t\t\tthis.error = \"Usign of \\\"unused bits\\\" inside constructive BIT STRING allowed for least one only\";\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\n\t\t\t\tthis.unusedBits = this.value[i].valueBlock.unusedBits;\n\t\t\t\tif (this.unusedBits > 7) {\n\t\t\t\t\tthis.error = \"Unused bits for BitString must be in range 0-7\";\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn resultOffset;\n\t\t}\n\t\t//endregion\n\t\t//region If the BitString supposed to be a primitive value\n\t\t//region Basic check for parameters\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tif ((0, _pvutils.checkBufferParams)(this, inputBuffer, inputOffset, inputLength) === false) return -1;\n\t\t//endregion\n\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n\n\t\tthis.unusedBits = intBuffer[0];\n\n\t\tif (this.unusedBits > 7) {\n\t\t\tthis.error = \"Unused bits for BitString must be in range 0-7\";\n\t\t\treturn -1;\n\t\t}\n\n\t\t//region Copy input buffer to internal buffer\n\t\tthis.valueHex = new ArrayBuffer(intBuffer.length - 1);\n\t\tconst view = new Uint8Array(this.valueHex);\n\t\tfor (let i = 0; i < inputLength - 1; i++) view[i] = intBuffer[i + 1];\n\t\t//endregion\n\n\t\tthis.blockLength = intBuffer.length;\n\n\t\treturn inputOffset + inputLength;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n  * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n  * @returns {ArrayBuffer}\r\n  */\n\ttoBER(sizeOnly = false) {\n\t\tif (this.isConstructed === true) return LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly);\n\n\t\tif (sizeOnly === true) return new ArrayBuffer(this.valueHex.byteLength + 1);\n\n\t\tif (this.valueHex.byteLength === 0) return new ArrayBuffer(0);\n\n\t\tconst curView = new Uint8Array(this.valueHex);\n\n\t\tconst retBuf = new ArrayBuffer(this.valueHex.byteLength + 1);\n\t\tconst retView = new Uint8Array(retBuf);\n\n\t\tretView[0] = this.unusedBits;\n\n\t\tfor (let i = 0; i < this.valueHex.byteLength; i++) retView[i + 1] = curView[i];\n\n\t\treturn retBuf;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"BitStringValueBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the block to JSON object\r\n  * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n  */\n\ttoJSON() {\n\t\tlet object = {};\n\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry {\n\t\t\tobject = super.toJSON();\n\t\t} catch (ex) {}\n\t\t//endregion\n\n\t\tobject.unusedBits = this.unusedBits;\n\t\tobject.isConstructed = this.isConstructed;\n\t\tobject.isHexOnly = this.isHexOnly;\n\t\tobject.valueHex = (0, _pvutils.bufferToHexCodes)(this.valueHex, 0, this.valueHex.byteLength);\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nclass BitString extends BaseBlock {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"BitString\" class\r\n  * @param {Object} [parameters={}]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters, LocalBitStringValueBlock);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 3; // BitString\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"BitString\";\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Base function for converting block from BER encoded array of bytes\r\n  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n  * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n  * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n  * @returns {number} Offset after least decoded byte\r\n  */\n\tfromBER(inputBuffer, inputOffset, inputLength) {\n\t\t//region Ability to encode empty BitString\n\t\tif (inputLength === 0) return inputOffset;\n\t\t//endregion\n\n\t\tthis.valueBlock.isConstructed = this.idBlock.isConstructed;\n\t\tthis.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\n\n\t\treturn super.fromBER(inputBuffer, inputOffset, inputLength);\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Checking that two BITSTRINGs are equal\r\n  * @param {BitString} bitString\r\n  */\n\tisEqual(bitString) {\n\t\t//region Check input type\n\t\tif (bitString instanceof BitString === false) return false;\n\t\t//endregion\n\n\t\t//region Compare two JSON strings\n\t\tif (JSON.stringify(this) !== JSON.stringify(bitString)) return false;\n\t\t//endregion\n\n\t\treturn true;\n\t}\n\t//**********************************************************************************\n}\nexports.BitString = BitString; //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of ASN.1 Integer type class\n//**************************************************************************************\n/**\r\n * @extends LocalValueBlock\r\n */\n\nclass LocalIntegerValueBlock extends LocalHexBlock(LocalValueBlock) {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"LocalIntegerValueBlock\" class\r\n  * @param {Object} [parameters={}]\r\n  * @property {ArrayBuffer} [valueHex]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters);\n\n\t\tif (\"value\" in parameters) this.valueDec = parameters.value;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Setter for \"valueHex\"\r\n  * @param {ArrayBuffer} _value\r\n  */\n\tset valueHex(_value) {\n\t\tthis._valueHex = _value.slice(0);\n\n\t\tif (_value.byteLength >= 4) {\n\t\t\tthis.warnings.push(\"Too big Integer for decoding, hex only\");\n\t\t\tthis.isHexOnly = true;\n\t\t\tthis._valueDec = 0;\n\t\t} else {\n\t\t\tthis.isHexOnly = false;\n\n\t\t\tif (_value.byteLength > 0) this._valueDec = _pvutils.utilDecodeTC.call(this);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Getter for \"valueHex\"\r\n  * @returns {ArrayBuffer}\r\n  */\n\tget valueHex() {\n\t\treturn this._valueHex;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Getter for \"valueDec\"\r\n  * @param {number} _value\r\n  */\n\tset valueDec(_value) {\n\t\tthis._valueDec = _value;\n\n\t\tthis.isHexOnly = false;\n\t\tthis._valueHex = (0, _pvutils.utilEncodeTC)(_value);\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Getter for \"valueDec\"\r\n  * @returns {number}\r\n  */\n\tget valueDec() {\n\t\treturn this._valueDec;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Base function for converting block from DER encoded array of bytes\r\n  * @param {!ArrayBuffer} inputBuffer ASN.1 DER encoded array\r\n  * @param {!number} inputOffset Offset in ASN.1 DER encoded array where decoding should be started\r\n  * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n  * @param {number} [expectedLength=0] Expected length of converted \"valueHex\" buffer\r\n  * @returns {number} Offset after least decoded byte\r\n  */\n\tfromDER(inputBuffer, inputOffset, inputLength, expectedLength = 0) {\n\t\tconst offset = this.fromBER(inputBuffer, inputOffset, inputLength);\n\t\tif (offset === -1) return offset;\n\n\t\tconst view = new Uint8Array(this._valueHex);\n\n\t\tif (view[0] === 0x00 && (view[1] & 0x80) !== 0) {\n\t\t\tconst updatedValueHex = new ArrayBuffer(this._valueHex.byteLength - 1);\n\t\t\tconst updatedView = new Uint8Array(updatedValueHex);\n\n\t\t\tupdatedView.set(new Uint8Array(this._valueHex, 1, this._valueHex.byteLength - 1));\n\n\t\t\tthis._valueHex = updatedValueHex.slice(0);\n\t\t} else {\n\t\t\tif (expectedLength !== 0) {\n\t\t\t\tif (this._valueHex.byteLength < expectedLength) {\n\t\t\t\t\tif (expectedLength - this._valueHex.byteLength > 1) expectedLength = this._valueHex.byteLength + 1;\n\n\t\t\t\t\tconst updatedValueHex = new ArrayBuffer(expectedLength);\n\t\t\t\t\tconst updatedView = new Uint8Array(updatedValueHex);\n\n\t\t\t\t\tupdatedView.set(view, expectedLength - this._valueHex.byteLength);\n\n\t\t\t\t\tthis._valueHex = updatedValueHex.slice(0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn offset;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Encoding of current ASN.1 block into ASN.1 encoded array (DER rules)\r\n  * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n  * @returns {ArrayBuffer}\r\n  */\n\ttoDER(sizeOnly = false) {\n\t\tconst view = new Uint8Array(this._valueHex);\n\n\t\tswitch (true) {\n\t\t\tcase (view[0] & 0x80) !== 0:\n\t\t\t\t{\n\t\t\t\t\tconst updatedValueHex = new ArrayBuffer(this._valueHex.byteLength + 1);\n\t\t\t\t\tconst updatedView = new Uint8Array(updatedValueHex);\n\n\t\t\t\t\tupdatedView[0] = 0x00;\n\t\t\t\t\tupdatedView.set(view, 1);\n\n\t\t\t\t\tthis._valueHex = updatedValueHex.slice(0);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase view[0] === 0x00 && (view[1] & 0x80) === 0:\n\t\t\t\t{\n\t\t\t\t\tconst updatedValueHex = new ArrayBuffer(this._valueHex.byteLength - 1);\n\t\t\t\t\tconst updatedView = new Uint8Array(updatedValueHex);\n\n\t\t\t\t\tupdatedView.set(new Uint8Array(this._valueHex, 1, this._valueHex.byteLength - 1));\n\n\t\t\t\t\tthis._valueHex = updatedValueHex.slice(0);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\n\t\treturn this.toBER(sizeOnly);\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Base function for converting block from BER encoded array of bytes\r\n  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n  * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n  * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n  * @returns {number} Offset after least decoded byte\r\n  */\n\tfromBER(inputBuffer, inputOffset, inputLength) {\n\t\tconst resultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);\n\t\tif (resultOffset === -1) return resultOffset;\n\n\t\tthis.blockLength = inputLength;\n\n\t\treturn inputOffset + inputLength;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n  * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n  * @returns {ArrayBuffer}\r\n  */\n\ttoBER(sizeOnly = false) {\n\t\t//noinspection JSCheckFunctionSignatures\n\t\treturn this.valueHex.slice(0);\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"IntegerValueBlock\";\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\r\n  * Convertion for the block to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\tlet object = {};\n\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry {\n\t\t\tobject = super.toJSON();\n\t\t} catch (ex) {}\n\t\t//endregion\n\n\t\tobject.valueDec = this.valueDec;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current value to decimal string representation\r\n  */\n\ttoString() {\n\t\t//region Aux functions\n\t\tfunction viewAdd(first, second) {\n\t\t\t//region Initial variables\n\t\t\tconst c = new Uint8Array([0]);\n\n\t\t\tlet firstView = new Uint8Array(first);\n\t\t\tlet secondView = new Uint8Array(second);\n\n\t\t\tlet firstViewCopy = firstView.slice(0);\n\t\t\tconst firstViewCopyLength = firstViewCopy.length - 1;\n\t\t\tlet secondViewCopy = secondView.slice(0);\n\t\t\tconst secondViewCopyLength = secondViewCopy.length - 1;\n\n\t\t\tlet value = 0;\n\n\t\t\tconst max = secondViewCopyLength < firstViewCopyLength ? firstViewCopyLength : secondViewCopyLength;\n\n\t\t\tlet counter = 0;\n\t\t\t//endregion\n\n\t\t\tfor (let i = max; i >= 0; i--, counter++) {\n\t\t\t\tswitch (true) {\n\t\t\t\t\tcase counter < secondViewCopy.length:\n\t\t\t\t\t\tvalue = firstViewCopy[firstViewCopyLength - counter] + secondViewCopy[secondViewCopyLength - counter] + c[0];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tvalue = firstViewCopy[firstViewCopyLength - counter] + c[0];\n\t\t\t\t}\n\n\t\t\t\tc[0] = value / 10;\n\n\t\t\t\tswitch (true) {\n\t\t\t\t\tcase counter >= firstViewCopy.length:\n\t\t\t\t\t\tfirstViewCopy = (0, _pvutils.utilConcatView)(new Uint8Array([value % 10]), firstViewCopy);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tfirstViewCopy[firstViewCopyLength - counter] = value % 10;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (c[0] > 0) firstViewCopy = (0, _pvutils.utilConcatView)(c, firstViewCopy);\n\n\t\t\treturn firstViewCopy.slice(0);\n\t\t}\n\n\t\tfunction power2(n) {\n\t\t\tif (n >= powers2.length) {\n\t\t\t\tfor (let p = powers2.length; p <= n; p++) {\n\t\t\t\t\tconst c = new Uint8Array([0]);\n\t\t\t\t\tlet digits = powers2[p - 1].slice(0);\n\n\t\t\t\t\tfor (let i = digits.length - 1; i >= 0; i--) {\n\t\t\t\t\t\tconst newValue = new Uint8Array([(digits[i] << 1) + c[0]]);\n\t\t\t\t\t\tc[0] = newValue[0] / 10;\n\t\t\t\t\t\tdigits[i] = newValue[0] % 10;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (c[0] > 0) digits = (0, _pvutils.utilConcatView)(c, digits);\n\n\t\t\t\t\tpowers2.push(digits);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn powers2[n];\n\t\t}\n\n\t\tfunction viewSub(first, second) {\n\t\t\t//region Initial variables\n\t\t\tlet b = 0;\n\n\t\t\tlet firstView = new Uint8Array(first);\n\t\t\tlet secondView = new Uint8Array(second);\n\n\t\t\tlet firstViewCopy = firstView.slice(0);\n\t\t\tconst firstViewCopyLength = firstViewCopy.length - 1;\n\t\t\tlet secondViewCopy = secondView.slice(0);\n\t\t\tconst secondViewCopyLength = secondViewCopy.length - 1;\n\n\t\t\tlet value;\n\n\t\t\tlet counter = 0;\n\t\t\t//endregion\n\n\t\t\tfor (let i = secondViewCopyLength; i >= 0; i--, counter++) {\n\t\t\t\tvalue = firstViewCopy[firstViewCopyLength - counter] - secondViewCopy[secondViewCopyLength - counter] - b;\n\n\t\t\t\tswitch (true) {\n\t\t\t\t\tcase value < 0:\n\t\t\t\t\t\tb = 1;\n\t\t\t\t\t\tfirstViewCopy[firstViewCopyLength - counter] = value + 10;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tb = 0;\n\t\t\t\t\t\tfirstViewCopy[firstViewCopyLength - counter] = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (b > 0) {\n\t\t\t\tfor (let i = firstViewCopyLength - secondViewCopyLength + 1; i >= 0; i--, counter++) {\n\t\t\t\t\tvalue = firstViewCopy[firstViewCopyLength - counter] - b;\n\n\t\t\t\t\tif (value < 0) {\n\t\t\t\t\t\tb = 1;\n\t\t\t\t\t\tfirstViewCopy[firstViewCopyLength - counter] = value + 10;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tb = 0;\n\t\t\t\t\t\tfirstViewCopy[firstViewCopyLength - counter] = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn firstViewCopy.slice();\n\t\t}\n\t\t//endregion\n\n\t\t//region Initial variables\n\t\tconst firstBit = this._valueHex.byteLength * 8 - 1;\n\n\t\tlet digits = new Uint8Array(this._valueHex.byteLength * 8 / 3);\n\t\tlet bitNumber = 0;\n\t\tlet currentByte;\n\n\t\tconst asn1View = new Uint8Array(this._valueHex);\n\n\t\tlet result = \"\";\n\n\t\tlet flag = false;\n\t\t//endregion\n\n\t\t//region Calculate number\n\t\tfor (let byteNumber = this._valueHex.byteLength - 1; byteNumber >= 0; byteNumber--) {\n\t\t\tcurrentByte = asn1View[byteNumber];\n\n\t\t\tfor (let i = 0; i < 8; i++) {\n\t\t\t\tif ((currentByte & 1) === 1) {\n\t\t\t\t\tswitch (bitNumber) {\n\t\t\t\t\t\tcase firstBit:\n\t\t\t\t\t\t\tdigits = viewSub(power2(bitNumber), digits);\n\t\t\t\t\t\t\tresult = \"-\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdigits = viewAdd(digits, power2(bitNumber));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbitNumber++;\n\t\t\t\tcurrentByte >>= 1;\n\t\t\t}\n\t\t}\n\t\t//endregion\n\n\t\t//region Print number\n\t\tfor (let i = 0; i < digits.length; i++) {\n\t\t\tif (digits[i]) flag = true;\n\n\t\t\tif (flag) result += digitsString.charAt(digits[i]);\n\t\t}\n\n\t\tif (flag === false) result += digitsString.charAt(0);\n\t\t//endregion\n\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nclass Integer extends BaseBlock {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"Integer\" class\r\n  * @param {Object} [parameters={}]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters, LocalIntegerValueBlock);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 2; // Integer\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"Integer\";\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\r\n  * Compare two Integer object, or Integer and ArrayBuffer objects\r\n  * @param {!Integer|ArrayBuffer} otherValue\r\n  * @returns {boolean}\r\n  */\n\tisEqual(otherValue) {\n\t\tif (otherValue instanceof Integer) {\n\t\t\tif (this.valueBlock.isHexOnly && otherValue.valueBlock.isHexOnly) // Compare two ArrayBuffers\n\t\t\t\treturn (0, _pvutils.isEqualBuffer)(this.valueBlock.valueHex, otherValue.valueBlock.valueHex);\n\n\t\t\tif (this.valueBlock.isHexOnly === otherValue.valueBlock.isHexOnly) return this.valueBlock.valueDec === otherValue.valueBlock.valueDec;\n\n\t\t\treturn false;\n\t\t}\n\n\t\tif (otherValue instanceof ArrayBuffer) return (0, _pvutils.isEqualBuffer)(this.valueBlock.valueHex, otherValue);\n\n\t\treturn false;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current Integer value from BER into DER format\r\n  * @returns {Integer}\r\n  */\n\tconvertToDER() {\n\t\tconst integer = new Integer({ valueHex: this.valueBlock.valueHex });\n\t\tinteger.valueBlock.toDER();\n\n\t\treturn integer;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current Integer value from DER to BER format\r\n  * @returns {Integer}\r\n  */\n\tconvertFromDER() {\n\t\tconst expectedLength = this.valueBlock.valueHex.byteLength % 2 ? this.valueBlock.valueHex.byteLength + 1 : this.valueBlock.valueHex.byteLength;\n\t\tconst integer = new Integer({ valueHex: this.valueBlock.valueHex });\n\t\tinteger.valueBlock.fromDER(integer.valueBlock.valueHex, 0, integer.valueBlock.valueHex.byteLength, expectedLength);\n\n\t\treturn integer;\n\t}\n\t//**********************************************************************************\n}\nexports.Integer = Integer; //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of ASN.1 Enumerated type class\n//**************************************************************************************\n\nclass Enumerated extends Integer {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"Enumerated\" class\r\n  * @param {Object} [parameters={}]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 10; // Enumerated\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"Enumerated\";\n\t}\n\t//**********************************************************************************\n}\nexports.Enumerated = Enumerated; //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of ASN.1 ObjectIdentifier type class\n//**************************************************************************************\n\nclass LocalSidValueBlock extends LocalHexBlock(LocalBaseBlock) {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"LocalSidValueBlock\" class\r\n  * @param {Object} [parameters={}]\r\n  * @property {number} [valueDec]\r\n  * @property {boolean} [isFirstSid]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters);\n\n\t\tthis.valueDec = (0, _pvutils.getParametersValue)(parameters, \"valueDec\", -1);\n\t\tthis.isFirstSid = (0, _pvutils.getParametersValue)(parameters, \"isFirstSid\", false);\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"sidBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Base function for converting block from BER encoded array of bytes\r\n  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n  * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n  * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n  * @returns {number} Offset after least decoded byte\r\n  */\n\tfromBER(inputBuffer, inputOffset, inputLength) {\n\t\tif (inputLength === 0) return inputOffset;\n\n\t\t//region Basic check for parameters\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tif ((0, _pvutils.checkBufferParams)(this, inputBuffer, inputOffset, inputLength) === false) return -1;\n\t\t//endregion\n\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n\n\t\tthis.valueHex = new ArrayBuffer(inputLength);\n\t\tlet view = new Uint8Array(this.valueHex);\n\n\t\tfor (let i = 0; i < inputLength; i++) {\n\t\t\tview[i] = intBuffer[i] & 0x7F;\n\n\t\t\tthis.blockLength++;\n\n\t\t\tif ((intBuffer[i] & 0x80) === 0x00) break;\n\t\t}\n\n\t\t//region Ajust size of valueHex buffer\n\t\tconst tempValueHex = new ArrayBuffer(this.blockLength);\n\t\tconst tempView = new Uint8Array(tempValueHex);\n\n\t\tfor (let i = 0; i < this.blockLength; i++) tempView[i] = view[i];\n\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tthis.valueHex = tempValueHex.slice(0);\n\t\tview = new Uint8Array(this.valueHex);\n\t\t//endregion\n\n\t\tif ((intBuffer[this.blockLength - 1] & 0x80) !== 0x00) {\n\t\t\tthis.error = \"End of input reached before message was fully decoded\";\n\t\t\treturn -1;\n\t\t}\n\n\t\tif (view[0] === 0x00) this.warnings.push(\"Needlessly long format of SID encoding\");\n\n\t\tif (this.blockLength <= 8) this.valueDec = (0, _pvutils.utilFromBase)(view, 7);else {\n\t\t\tthis.isHexOnly = true;\n\t\t\tthis.warnings.push(\"Too big SID for decoding, hex only\");\n\t\t}\n\n\t\treturn inputOffset + this.blockLength;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n  * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n  * @returns {ArrayBuffer}\r\n  */\n\ttoBER(sizeOnly = false) {\n\t\t//region Initial variables\n\t\tlet retBuf;\n\t\tlet retView;\n\t\t//endregion\n\n\t\tif (this.isHexOnly) {\n\t\t\tif (sizeOnly === true) return new ArrayBuffer(this.valueHex.byteLength);\n\n\t\t\tconst curView = new Uint8Array(this.valueHex);\n\n\t\t\tretBuf = new ArrayBuffer(this.blockLength);\n\t\t\tretView = new Uint8Array(retBuf);\n\n\t\t\tfor (let i = 0; i < this.blockLength - 1; i++) retView[i] = curView[i] | 0x80;\n\n\t\t\tretView[this.blockLength - 1] = curView[this.blockLength - 1];\n\n\t\t\treturn retBuf;\n\t\t}\n\n\t\tconst encodedBuf = (0, _pvutils.utilToBase)(this.valueDec, 7);\n\t\tif (encodedBuf.byteLength === 0) {\n\t\t\tthis.error = \"Error during encoding SID value\";\n\t\t\treturn new ArrayBuffer(0);\n\t\t}\n\n\t\tretBuf = new ArrayBuffer(encodedBuf.byteLength);\n\n\t\tif (sizeOnly === false) {\n\t\t\tconst encodedView = new Uint8Array(encodedBuf);\n\t\t\tretView = new Uint8Array(retBuf);\n\n\t\t\tfor (let i = 0; i < encodedBuf.byteLength - 1; i++) retView[i] = encodedView[i] | 0x80;\n\n\t\t\tretView[encodedBuf.byteLength - 1] = encodedView[encodedBuf.byteLength - 1];\n\t\t}\n\n\t\treturn retBuf;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Create string representation of current SID block\r\n  * @returns {string}\r\n  */\n\ttoString() {\n\t\tlet result = \"\";\n\n\t\tif (this.isHexOnly === true) result = (0, _pvutils.bufferToHexCodes)(this.valueHex, 0, this.valueHex.byteLength);else {\n\t\t\tif (this.isFirstSid) {\n\t\t\t\tlet sidValue = this.valueDec;\n\n\t\t\t\tif (this.valueDec <= 39) result = \"0.\";else {\n\t\t\t\t\tif (this.valueDec <= 79) {\n\t\t\t\t\t\tresult = \"1.\";\n\t\t\t\t\t\tsidValue -= 40;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult = \"2.\";\n\t\t\t\t\t\tsidValue -= 80;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tresult += sidValue.toString();\n\t\t\t} else result = this.valueDec.toString();\n\t\t}\n\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\r\n  * Convertion for the block to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\tlet object = {};\n\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry {\n\t\t\tobject = super.toJSON();\n\t\t} catch (ex) {}\n\t\t//endregion\n\n\t\tobject.valueDec = this.valueDec;\n\t\tobject.isFirstSid = this.isFirstSid;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nclass LocalObjectIdentifierValueBlock extends LocalValueBlock {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"LocalObjectIdentifierValueBlock\" class\r\n  * @param {Object} [parameters={}]\r\n  * @property {ArrayBuffer} [valueHex]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters);\n\n\t\tthis.fromString((0, _pvutils.getParametersValue)(parameters, \"value\", \"\"));\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Base function for converting block from BER encoded array of bytes\r\n  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n  * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n  * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n  * @returns {number} Offset after least decoded byte\r\n  */\n\tfromBER(inputBuffer, inputOffset, inputLength) {\n\t\tlet resultOffset = inputOffset;\n\n\t\twhile (inputLength > 0) {\n\t\t\tconst sidBlock = new LocalSidValueBlock();\n\t\t\tresultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);\n\t\t\tif (resultOffset === -1) {\n\t\t\t\tthis.blockLength = 0;\n\t\t\t\tthis.error = sidBlock.error;\n\t\t\t\treturn resultOffset;\n\t\t\t}\n\n\t\t\tif (this.value.length === 0) sidBlock.isFirstSid = true;\n\n\t\t\tthis.blockLength += sidBlock.blockLength;\n\t\t\tinputLength -= sidBlock.blockLength;\n\n\t\t\tthis.value.push(sidBlock);\n\t\t}\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n  * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n  * @returns {ArrayBuffer}\r\n  */\n\ttoBER(sizeOnly = false) {\n\t\tlet retBuf = new ArrayBuffer(0);\n\n\t\tfor (let i = 0; i < this.value.length; i++) {\n\t\t\tconst valueBuf = this.value[i].toBER(sizeOnly);\n\t\t\tif (valueBuf.byteLength === 0) {\n\t\t\t\tthis.error = this.value[i].error;\n\t\t\t\treturn new ArrayBuffer(0);\n\t\t\t}\n\n\t\t\tretBuf = (0, _pvutils.utilConcatBuf)(retBuf, valueBuf);\n\t\t}\n\n\t\treturn retBuf;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Create \"LocalObjectIdentifierValueBlock\" class from string\r\n  * @param {string} string Input string to convert from\r\n  * @returns {boolean}\r\n  */\n\tfromString(string) {\n\t\tthis.value = []; // Clear existing SID values\n\n\t\tlet pos1 = 0;\n\t\tlet pos2 = 0;\n\n\t\tlet sid = \"\";\n\n\t\tlet flag = false;\n\n\t\tdo {\n\t\t\tpos2 = string.indexOf(\".\", pos1);\n\t\t\tif (pos2 === -1) sid = string.substr(pos1);else sid = string.substr(pos1, pos2 - pos1);\n\n\t\t\tpos1 = pos2 + 1;\n\n\t\t\tif (flag) {\n\t\t\t\tconst sidBlock = this.value[0];\n\n\t\t\t\tlet plus = 0;\n\n\t\t\t\tswitch (sidBlock.valueDec) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tplus = 40;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tplus = 80;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthis.value = []; // clear SID array\n\t\t\t\t\t\treturn false; // ???\n\t\t\t\t}\n\n\t\t\t\tconst parsedSID = parseInt(sid, 10);\n\t\t\t\tif (isNaN(parsedSID)) return true;\n\n\t\t\t\tsidBlock.valueDec = parsedSID + plus;\n\n\t\t\t\tflag = false;\n\t\t\t} else {\n\t\t\t\tconst sidBlock = new LocalSidValueBlock();\n\t\t\t\tsidBlock.valueDec = parseInt(sid, 10);\n\t\t\t\tif (isNaN(sidBlock.valueDec)) return true;\n\n\t\t\t\tif (this.value.length === 0) {\n\t\t\t\t\tsidBlock.isFirstSid = true;\n\t\t\t\t\tflag = true;\n\t\t\t\t}\n\n\t\t\t\tthis.value.push(sidBlock);\n\t\t\t}\n\t\t} while (pos2 !== -1);\n\n\t\treturn true;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Converts \"LocalObjectIdentifierValueBlock\" class to string\r\n  * @returns {string}\r\n  */\n\ttoString() {\n\t\tlet result = \"\";\n\t\tlet isHexOnly = false;\n\n\t\tfor (let i = 0; i < this.value.length; i++) {\n\t\t\tisHexOnly = this.value[i].isHexOnly;\n\n\t\t\tlet sidStr = this.value[i].toString();\n\n\t\t\tif (i !== 0) result = `${result}.`;\n\n\t\t\tif (isHexOnly) {\n\t\t\t\tsidStr = `{${sidStr}}`;\n\n\t\t\t\tif (this.value[i].isFirstSid) result = `2.{${sidStr} - 80}`;else result += sidStr;\n\t\t\t} else result += sidStr;\n\t\t}\n\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"ObjectIdentifierValueBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the block to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\tlet object = {};\n\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry {\n\t\t\tobject = super.toJSON();\n\t\t} catch (ex) {}\n\t\t//endregion\n\n\t\tobject.value = this.toString();\n\t\tobject.sidArray = [];\n\t\tfor (let i = 0; i < this.value.length; i++) object.sidArray.push(this.value[i].toJSON());\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\r\n * @extends BaseBlock\r\n */\nclass ObjectIdentifier extends BaseBlock {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"ObjectIdentifier\" class\r\n  * @param {Object} [parameters={}]\r\n  * @property {ArrayBuffer} [valueHex]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters, LocalObjectIdentifierValueBlock);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 6; // OBJECT IDENTIFIER\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"ObjectIdentifier\";\n\t}\n\t//**********************************************************************************\n}\nexports.ObjectIdentifier = ObjectIdentifier; //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of all string's classes\n//**************************************************************************************\n\nclass LocalUtf8StringValueBlock extends LocalHexBlock(LocalBaseBlock) {\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\r\n  * Constructor for \"LocalUtf8StringValueBlock\" class\r\n  * @param {Object} [parameters={}]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters);\n\n\t\tthis.isHexOnly = true;\n\t\tthis.value = \"\"; // String representation of decoded ArrayBuffer\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"Utf8StringValueBlock\";\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\r\n  * Convertion for the block to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\tlet object = {};\n\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry {\n\t\t\tobject = super.toJSON();\n\t\t} catch (ex) {}\n\t\t//endregion\n\n\t\tobject.value = this.value;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\r\n * @extends BaseBlock\r\n */\nclass Utf8String extends BaseBlock {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"Utf8String\" class\r\n  * @param {Object} [parameters={}]\r\n  * @property {ArrayBuffer} [valueHex]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters, LocalUtf8StringValueBlock);\n\n\t\tif (\"value\" in parameters) this.fromString(parameters.value);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 12; // Utf8String\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"Utf8String\";\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Base function for converting block from BER encoded array of bytes\r\n  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n  * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n  * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n  * @returns {number} Offset after least decoded byte\r\n  */\n\tfromBER(inputBuffer, inputOffset, inputLength) {\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm === true ? inputLength : this.lenBlock.length);\n\t\tif (resultOffset === -1) {\n\t\t\tthis.error = this.valueBlock.error;\n\t\t\treturn resultOffset;\n\t\t}\n\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\n\n\t\tif (this.idBlock.error.length === 0) this.blockLength += this.idBlock.blockLength;\n\n\t\tif (this.lenBlock.error.length === 0) this.blockLength += this.lenBlock.blockLength;\n\n\t\tif (this.valueBlock.error.length === 0) this.blockLength += this.valueBlock.blockLength;\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Function converting ArrayBuffer into ASN.1 internal string\r\n  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n  */\n\tfromBuffer(inputBuffer) {\n\t\tthis.valueBlock.value = String.fromCharCode.apply(null, new Uint8Array(inputBuffer));\n\n\t\ttry {\n\t\t\t//noinspection JSDeprecatedSymbols\n\t\t\tthis.valueBlock.value = decodeURIComponent(escape(this.valueBlock.value));\n\t\t} catch (ex) {\n\t\t\tthis.warnings.push(`Error during \"decodeURIComponent\": ${ex}, using raw string`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Function converting JavaScript string into ASN.1 internal class\r\n  * @param {!string} inputString ASN.1 BER encoded array\r\n  */\n\tfromString(inputString) {\n\t\t//noinspection JSDeprecatedSymbols\n\t\tconst str = unescape(encodeURIComponent(inputString));\n\t\tconst strLen = str.length;\n\n\t\tthis.valueBlock.valueHex = new ArrayBuffer(strLen);\n\t\tconst view = new Uint8Array(this.valueBlock.valueHex);\n\n\t\tfor (let i = 0; i < strLen; i++) view[i] = str.charCodeAt(i);\n\n\t\tthis.valueBlock.value = inputString;\n\t}\n\t//**********************************************************************************\n}\nexports.Utf8String = Utf8String; //**************************************************************************************\n/**\r\n * @extends LocalBaseBlock\r\n * @extends LocalHexBlock\r\n */\n\nclass LocalBmpStringValueBlock extends LocalHexBlock(LocalBaseBlock) {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"LocalBmpStringValueBlock\" class\r\n  * @param {Object} [parameters={}]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters);\n\n\t\tthis.isHexOnly = true;\n\t\tthis.value = \"\";\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"BmpStringValueBlock\";\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\r\n  * Convertion for the block to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\tlet object = {};\n\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry {\n\t\t\tobject = super.toJSON();\n\t\t} catch (ex) {}\n\t\t//endregion\n\n\t\tobject.value = this.value;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\r\n * @extends BaseBlock\r\n */\nclass BmpString extends BaseBlock {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"BmpString\" class\r\n  * @param {Object} [parameters={}]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters, LocalBmpStringValueBlock);\n\n\t\tif (\"value\" in parameters) this.fromString(parameters.value);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 30; // BmpString\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"BmpString\";\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Base function for converting block from BER encoded array of bytes\r\n  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n  * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n  * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n  * @returns {number} Offset after least decoded byte\r\n  */\n\tfromBER(inputBuffer, inputOffset, inputLength) {\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm === true ? inputLength : this.lenBlock.length);\n\t\tif (resultOffset === -1) {\n\t\t\tthis.error = this.valueBlock.error;\n\t\t\treturn resultOffset;\n\t\t}\n\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\n\n\t\tif (this.idBlock.error.length === 0) this.blockLength += this.idBlock.blockLength;\n\n\t\tif (this.lenBlock.error.length === 0) this.blockLength += this.lenBlock.blockLength;\n\n\t\tif (this.valueBlock.error.length === 0) this.blockLength += this.valueBlock.blockLength;\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Function converting ArrayBuffer into ASN.1 internal string\r\n  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n  */\n\tfromBuffer(inputBuffer) {\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tconst copyBuffer = inputBuffer.slice(0);\n\t\tconst valueView = new Uint8Array(copyBuffer);\n\n\t\tfor (let i = 0; i < valueView.length; i += 2) {\n\t\t\tconst temp = valueView[i];\n\n\t\t\tvalueView[i] = valueView[i + 1];\n\t\t\tvalueView[i + 1] = temp;\n\t\t}\n\n\t\tthis.valueBlock.value = String.fromCharCode.apply(null, new Uint16Array(copyBuffer));\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Function converting JavaScript string into ASN.1 internal class\r\n  * @param {!string} inputString ASN.1 BER encoded array\r\n  */\n\tfromString(inputString) {\n\t\tconst strLength = inputString.length;\n\n\t\tthis.valueBlock.valueHex = new ArrayBuffer(strLength * 2);\n\t\tconst valueHexView = new Uint8Array(this.valueBlock.valueHex);\n\n\t\tfor (let i = 0; i < strLength; i++) {\n\t\t\tconst codeBuf = (0, _pvutils.utilToBase)(inputString.charCodeAt(i), 8);\n\t\t\tconst codeView = new Uint8Array(codeBuf);\n\t\t\tif (codeView.length > 2) continue;\n\n\t\t\tconst dif = 2 - codeView.length;\n\n\t\t\tfor (let j = codeView.length - 1; j >= 0; j--) valueHexView[i * 2 + j + dif] = codeView[j];\n\t\t}\n\n\t\tthis.valueBlock.value = inputString;\n\t}\n\t//**********************************************************************************\n}\nexports.BmpString = BmpString; //**************************************************************************************\n\nclass LocalUniversalStringValueBlock extends LocalHexBlock(LocalBaseBlock) {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"LocalUniversalStringValueBlock\" class\r\n  * @param {Object} [parameters={}]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters);\n\n\t\tthis.isHexOnly = true;\n\t\tthis.value = \"\";\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"UniversalStringValueBlock\";\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\r\n  * Convertion for the block to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\tlet object = {};\n\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry {\n\t\t\tobject = super.toJSON();\n\t\t} catch (ex) {}\n\t\t//endregion\n\n\t\tobject.value = this.value;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\r\n * @extends BaseBlock\r\n */\nclass UniversalString extends BaseBlock {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"UniversalString\" class\r\n  * @param {Object} [parameters={}]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters, LocalUniversalStringValueBlock);\n\n\t\tif (\"value\" in parameters) this.fromString(parameters.value);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 28; // UniversalString\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"UniversalString\";\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Base function for converting block from BER encoded array of bytes\r\n  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n  * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n  * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n  * @returns {number} Offset after least decoded byte\r\n  */\n\tfromBER(inputBuffer, inputOffset, inputLength) {\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm === true ? inputLength : this.lenBlock.length);\n\t\tif (resultOffset === -1) {\n\t\t\tthis.error = this.valueBlock.error;\n\t\t\treturn resultOffset;\n\t\t}\n\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\n\n\t\tif (this.idBlock.error.length === 0) this.blockLength += this.idBlock.blockLength;\n\n\t\tif (this.lenBlock.error.length === 0) this.blockLength += this.lenBlock.blockLength;\n\n\t\tif (this.valueBlock.error.length === 0) this.blockLength += this.valueBlock.blockLength;\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Function converting ArrayBuffer into ASN.1 internal string\r\n  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n  */\n\tfromBuffer(inputBuffer) {\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tconst copyBuffer = inputBuffer.slice(0);\n\t\tconst valueView = new Uint8Array(copyBuffer);\n\n\t\tfor (let i = 0; i < valueView.length; i += 4) {\n\t\t\tvalueView[i] = valueView[i + 3];\n\t\t\tvalueView[i + 1] = valueView[i + 2];\n\t\t\tvalueView[i + 2] = 0x00;\n\t\t\tvalueView[i + 3] = 0x00;\n\t\t}\n\n\t\tthis.valueBlock.value = String.fromCharCode.apply(null, new Uint32Array(copyBuffer));\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Function converting JavaScript string into ASN.1 internal class\r\n  * @param {!string} inputString ASN.1 BER encoded array\r\n  */\n\tfromString(inputString) {\n\t\tconst strLength = inputString.length;\n\n\t\tthis.valueBlock.valueHex = new ArrayBuffer(strLength * 4);\n\t\tconst valueHexView = new Uint8Array(this.valueBlock.valueHex);\n\n\t\tfor (let i = 0; i < strLength; i++) {\n\t\t\tconst codeBuf = (0, _pvutils.utilToBase)(inputString.charCodeAt(i), 8);\n\t\t\tconst codeView = new Uint8Array(codeBuf);\n\t\t\tif (codeView.length > 4) continue;\n\n\t\t\tconst dif = 4 - codeView.length;\n\n\t\t\tfor (let j = codeView.length - 1; j >= 0; j--) valueHexView[i * 4 + j + dif] = codeView[j];\n\t\t}\n\n\t\tthis.valueBlock.value = inputString;\n\t}\n\t//**********************************************************************************\n}\nexports.UniversalString = UniversalString; //**************************************************************************************\n\nclass LocalSimpleStringValueBlock extends LocalHexBlock(LocalBaseBlock) {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"LocalSimpleStringValueBlock\" class\r\n  * @param {Object} [parameters={}]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters);\n\n\t\tthis.value = \"\";\n\t\tthis.isHexOnly = true;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"SimpleStringValueBlock\";\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\r\n  * Convertion for the block to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\tlet object = {};\n\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry {\n\t\t\tobject = super.toJSON();\n\t\t} catch (ex) {}\n\t\t//endregion\n\n\t\tobject.value = this.value;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\r\n * @extends BaseBlock\r\n */\nclass LocalSimpleStringBlock extends BaseBlock {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"LocalSimpleStringBlock\" class\r\n  * @param {Object} [parameters={}]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters, LocalSimpleStringValueBlock);\n\n\t\tif (\"value\" in parameters) this.fromString(parameters.value);\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"SIMPLESTRING\";\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Base function for converting block from BER encoded array of bytes\r\n  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n  * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n  * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n  * @returns {number} Offset after least decoded byte\r\n  */\n\tfromBER(inputBuffer, inputOffset, inputLength) {\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm === true ? inputLength : this.lenBlock.length);\n\t\tif (resultOffset === -1) {\n\t\t\tthis.error = this.valueBlock.error;\n\t\t\treturn resultOffset;\n\t\t}\n\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\n\n\t\tif (this.idBlock.error.length === 0) this.blockLength += this.idBlock.blockLength;\n\n\t\tif (this.lenBlock.error.length === 0) this.blockLength += this.lenBlock.blockLength;\n\n\t\tif (this.valueBlock.error.length === 0) this.blockLength += this.valueBlock.blockLength;\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Function converting ArrayBuffer into ASN.1 internal string\r\n  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n  */\n\tfromBuffer(inputBuffer) {\n\t\tthis.valueBlock.value = String.fromCharCode.apply(null, new Uint8Array(inputBuffer));\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Function converting JavaScript string into ASN.1 internal class\r\n  * @param {!string} inputString ASN.1 BER encoded array\r\n  */\n\tfromString(inputString) {\n\t\tconst strLen = inputString.length;\n\n\t\tthis.valueBlock.valueHex = new ArrayBuffer(strLen);\n\t\tconst view = new Uint8Array(this.valueBlock.valueHex);\n\n\t\tfor (let i = 0; i < strLen; i++) view[i] = inputString.charCodeAt(i);\n\n\t\tthis.valueBlock.value = inputString;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\nclass NumericString extends LocalSimpleStringBlock {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"NumericString\" class\r\n  * @param {Object} [parameters={}]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 18; // NumericString\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"NumericString\";\n\t}\n\t//**********************************************************************************\n}\nexports.NumericString = NumericString; //**************************************************************************************\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\n\nclass PrintableString extends LocalSimpleStringBlock {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"PrintableString\" class\r\n  * @param {Object} [parameters={}]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 19; // PrintableString\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"PrintableString\";\n\t}\n\t//**********************************************************************************\n}\nexports.PrintableString = PrintableString; //**************************************************************************************\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\n\nclass TeletexString extends LocalSimpleStringBlock {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"TeletexString\" class\r\n  * @param {Object} [parameters={}]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 20; // TeletexString\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"TeletexString\";\n\t}\n\t//**********************************************************************************\n}\nexports.TeletexString = TeletexString; //**************************************************************************************\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\n\nclass VideotexString extends LocalSimpleStringBlock {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"VideotexString\" class\r\n  * @param {Object} [parameters={}]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 21; // VideotexString\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"VideotexString\";\n\t}\n\t//**********************************************************************************\n}\nexports.VideotexString = VideotexString; //**************************************************************************************\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\n\nclass IA5String extends LocalSimpleStringBlock {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"IA5String\" class\r\n  * @param {Object} [parameters={}]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 22; // IA5String\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"IA5String\";\n\t}\n\t//**********************************************************************************\n}\nexports.IA5String = IA5String; //**************************************************************************************\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\n\nclass GraphicString extends LocalSimpleStringBlock {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"GraphicString\" class\r\n  * @param {Object} [parameters={}]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 25; // GraphicString\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"GraphicString\";\n\t}\n\t//**********************************************************************************\n}\nexports.GraphicString = GraphicString; //**************************************************************************************\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\n\nclass VisibleString extends LocalSimpleStringBlock {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"VisibleString\" class\r\n  * @param {Object} [parameters={}]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 26; // VisibleString\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"VisibleString\";\n\t}\n\t//**********************************************************************************\n}\nexports.VisibleString = VisibleString; //**************************************************************************************\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\n\nclass GeneralString extends LocalSimpleStringBlock {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"GeneralString\" class\r\n  * @param {Object} [parameters={}]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 27; // GeneralString\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"GeneralString\";\n\t}\n\t//**********************************************************************************\n}\nexports.GeneralString = GeneralString; //**************************************************************************************\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\n\nclass CharacterString extends LocalSimpleStringBlock {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"CharacterString\" class\r\n  * @param {Object} [parameters={}]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 29; // CharacterString\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"CharacterString\";\n\t}\n\t//**********************************************************************************\n}\nexports.CharacterString = CharacterString; //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of all date and time classes\n//**************************************************************************************\n/**\r\n * @extends VisibleString\r\n */\n\nclass UTCTime extends VisibleString {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"UTCTime\" class\r\n  * @param {Object} [parameters={}]\r\n  * @property {string} [value] String representatio of the date\r\n  * @property {Date} [valueDate] JavaScript \"Date\" object\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters);\n\n\t\tthis.year = 0;\n\t\tthis.month = 0;\n\t\tthis.day = 0;\n\t\tthis.hour = 0;\n\t\tthis.minute = 0;\n\t\tthis.second = 0;\n\n\t\t//region Create UTCTime from ASN.1 UTC string value\n\t\tif (\"value\" in parameters) {\n\t\t\tthis.fromString(parameters.value);\n\n\t\t\tthis.valueBlock.valueHex = new ArrayBuffer(parameters.value.length);\n\t\t\tconst view = new Uint8Array(this.valueBlock.valueHex);\n\n\t\t\tfor (let i = 0; i < parameters.value.length; i++) view[i] = parameters.value.charCodeAt(i);\n\t\t}\n\t\t//endregion\n\t\t//region Create GeneralizedTime from JavaScript Date type\n\t\tif (\"valueDate\" in parameters) {\n\t\t\tthis.fromDate(parameters.valueDate);\n\t\t\tthis.valueBlock.valueHex = this.toBuffer();\n\t\t}\n\t\t//endregion\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 23; // UTCTime\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Base function for converting block from BER encoded array of bytes\r\n  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n  * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n  * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n  * @returns {number} Offset after least decoded byte\r\n  */\n\tfromBER(inputBuffer, inputOffset, inputLength) {\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm === true ? inputLength : this.lenBlock.length);\n\t\tif (resultOffset === -1) {\n\t\t\tthis.error = this.valueBlock.error;\n\t\t\treturn resultOffset;\n\t\t}\n\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\n\n\t\tif (this.idBlock.error.length === 0) this.blockLength += this.idBlock.blockLength;\n\n\t\tif (this.lenBlock.error.length === 0) this.blockLength += this.lenBlock.blockLength;\n\n\t\tif (this.valueBlock.error.length === 0) this.blockLength += this.valueBlock.blockLength;\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Function converting ArrayBuffer into ASN.1 internal string\r\n  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n  */\n\tfromBuffer(inputBuffer) {\n\t\tthis.fromString(String.fromCharCode.apply(null, new Uint8Array(inputBuffer)));\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Function converting ASN.1 internal string into ArrayBuffer\r\n  * @returns {ArrayBuffer}\r\n  */\n\ttoBuffer() {\n\t\tconst str = this.toString();\n\n\t\tconst buffer = new ArrayBuffer(str.length);\n\t\tconst view = new Uint8Array(buffer);\n\n\t\tfor (let i = 0; i < str.length; i++) view[i] = str.charCodeAt(i);\n\n\t\treturn buffer;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Function converting \"Date\" object into ASN.1 internal string\r\n  * @param {!Date} inputDate JavaScript \"Date\" object\r\n  */\n\tfromDate(inputDate) {\n\t\tthis.year = inputDate.getUTCFullYear();\n\t\tthis.month = inputDate.getUTCMonth() + 1;\n\t\tthis.day = inputDate.getUTCDate();\n\t\tthis.hour = inputDate.getUTCHours();\n\t\tthis.minute = inputDate.getUTCMinutes();\n\t\tthis.second = inputDate.getUTCSeconds();\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\r\n  * Function converting ASN.1 internal string into \"Date\" object\r\n  * @returns {Date}\r\n  */\n\ttoDate() {\n\t\treturn new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second));\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Function converting JavaScript string into ASN.1 internal class\r\n  * @param {!string} inputString ASN.1 BER encoded array\r\n  */\n\tfromString(inputString) {\n\t\t//region Parse input string\n\t\tconst parser = /(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})Z/ig;\n\t\tconst parserArray = parser.exec(inputString);\n\t\tif (parserArray === null) {\n\t\t\tthis.error = \"Wrong input string for convertion\";\n\t\t\treturn;\n\t\t}\n\t\t//endregion\n\n\t\t//region Store parsed values\n\t\tconst year = parseInt(parserArray[1], 10);\n\t\tif (year >= 50) this.year = 1900 + year;else this.year = 2000 + year;\n\n\t\tthis.month = parseInt(parserArray[2], 10);\n\t\tthis.day = parseInt(parserArray[3], 10);\n\t\tthis.hour = parseInt(parserArray[4], 10);\n\t\tthis.minute = parseInt(parserArray[5], 10);\n\t\tthis.second = parseInt(parserArray[6], 10);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Function converting ASN.1 internal class into JavaScript string\r\n  * @returns {string}\r\n  */\n\ttoString() {\n\t\tconst outputArray = new Array(7);\n\n\t\toutputArray[0] = (0, _pvutils.padNumber)(this.year < 2000 ? this.year - 1900 : this.year - 2000, 2);\n\t\toutputArray[1] = (0, _pvutils.padNumber)(this.month, 2);\n\t\toutputArray[2] = (0, _pvutils.padNumber)(this.day, 2);\n\t\toutputArray[3] = (0, _pvutils.padNumber)(this.hour, 2);\n\t\toutputArray[4] = (0, _pvutils.padNumber)(this.minute, 2);\n\t\toutputArray[5] = (0, _pvutils.padNumber)(this.second, 2);\n\t\toutputArray[6] = \"Z\";\n\n\t\treturn outputArray.join(\"\");\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"UTCTime\";\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the block to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\tlet object = {};\n\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry {\n\t\t\tobject = super.toJSON();\n\t\t} catch (ex) {}\n\t\t//endregion\n\n\t\tobject.year = this.year;\n\t\tobject.month = this.month;\n\t\tobject.day = this.day;\n\t\tobject.hour = this.hour;\n\t\tobject.minute = this.minute;\n\t\tobject.second = this.second;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\nexports.UTCTime = UTCTime; //**************************************************************************************\n/**\r\n * @extends VisibleString\r\n */\n\nclass GeneralizedTime extends VisibleString {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"GeneralizedTime\" class\r\n  * @param {Object} [parameters={}]\r\n  * @property {string} [value] String representatio of the date\r\n  * @property {Date} [valueDate] JavaScript \"Date\" object\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters);\n\n\t\tthis.year = 0;\n\t\tthis.month = 0;\n\t\tthis.day = 0;\n\t\tthis.hour = 0;\n\t\tthis.minute = 0;\n\t\tthis.second = 0;\n\t\tthis.millisecond = 0;\n\n\t\t//region Create UTCTime from ASN.1 UTC string value\n\t\tif (\"value\" in parameters) {\n\t\t\tthis.fromString(parameters.value);\n\n\t\t\tthis.valueBlock.valueHex = new ArrayBuffer(parameters.value.length);\n\t\t\tconst view = new Uint8Array(this.valueBlock.valueHex);\n\n\t\t\tfor (let i = 0; i < parameters.value.length; i++) view[i] = parameters.value.charCodeAt(i);\n\t\t}\n\t\t//endregion\n\t\t//region Create GeneralizedTime from JavaScript Date type\n\t\tif (\"valueDate\" in parameters) {\n\t\t\tthis.fromDate(parameters.valueDate);\n\t\t\tthis.valueBlock.valueHex = this.toBuffer();\n\t\t}\n\t\t//endregion\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 24; // GeneralizedTime\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Base function for converting block from BER encoded array of bytes\r\n  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n  * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n  * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n  * @returns {number} Offset after least decoded byte\r\n  */\n\tfromBER(inputBuffer, inputOffset, inputLength) {\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm === true ? inputLength : this.lenBlock.length);\n\t\tif (resultOffset === -1) {\n\t\t\tthis.error = this.valueBlock.error;\n\t\t\treturn resultOffset;\n\t\t}\n\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\n\n\t\tif (this.idBlock.error.length === 0) this.blockLength += this.idBlock.blockLength;\n\n\t\tif (this.lenBlock.error.length === 0) this.blockLength += this.lenBlock.blockLength;\n\n\t\tif (this.valueBlock.error.length === 0) this.blockLength += this.valueBlock.blockLength;\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Function converting ArrayBuffer into ASN.1 internal string\r\n  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n  */\n\tfromBuffer(inputBuffer) {\n\t\tthis.fromString(String.fromCharCode.apply(null, new Uint8Array(inputBuffer)));\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Function converting ASN.1 internal string into ArrayBuffer\r\n  * @returns {ArrayBuffer}\r\n  */\n\ttoBuffer() {\n\t\tconst str = this.toString();\n\n\t\tconst buffer = new ArrayBuffer(str.length);\n\t\tconst view = new Uint8Array(buffer);\n\n\t\tfor (let i = 0; i < str.length; i++) view[i] = str.charCodeAt(i);\n\n\t\treturn buffer;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Function converting \"Date\" object into ASN.1 internal string\r\n  * @param {!Date} inputDate JavaScript \"Date\" object\r\n  */\n\tfromDate(inputDate) {\n\t\tthis.year = inputDate.getUTCFullYear();\n\t\tthis.month = inputDate.getUTCMonth() + 1;\n\t\tthis.day = inputDate.getUTCDate();\n\t\tthis.hour = inputDate.getUTCHours();\n\t\tthis.minute = inputDate.getUTCMinutes();\n\t\tthis.second = inputDate.getUTCSeconds();\n\t\tthis.millisecond = inputDate.getUTCMilliseconds();\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\r\n  * Function converting ASN.1 internal string into \"Date\" object\r\n  * @returns {Date}\r\n  */\n\ttoDate() {\n\t\treturn new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, this.millisecond));\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Function converting JavaScript string into ASN.1 internal class\r\n  * @param {!string} inputString ASN.1 BER encoded array\r\n  */\n\tfromString(inputString) {\n\t\t//region Initial variables\n\t\tlet isUTC = false;\n\n\t\tlet timeString = \"\";\n\t\tlet dateTimeString = \"\";\n\t\tlet fractionPart = 0;\n\n\t\tlet parser;\n\n\t\tlet hourDifference = 0;\n\t\tlet minuteDifference = 0;\n\t\t//endregion\n\n\t\t//region Convert as UTC time\n\t\tif (inputString[inputString.length - 1] === \"Z\") {\n\t\t\ttimeString = inputString.substr(0, inputString.length - 1);\n\n\t\t\tisUTC = true;\n\t\t}\n\t\t//endregion\n\t\t//region Convert as local time\n\t\telse {\n\t\t\t\t//noinspection JSPrimitiveTypeWrapperUsage\n\t\t\t\tconst number = new Number(inputString[inputString.length - 1]);\n\n\t\t\t\tif (isNaN(number.valueOf())) throw new Error(\"Wrong input string for convertion\");\n\n\t\t\t\ttimeString = inputString;\n\t\t\t}\n\t\t//endregion\n\n\t\t//region Check that we do not have a \"+\" and \"-\" symbols inside UTC time\n\t\tif (isUTC) {\n\t\t\tif (timeString.indexOf(\"+\") !== -1) throw new Error(\"Wrong input string for convertion\");\n\n\t\t\tif (timeString.indexOf(\"-\") !== -1) throw new Error(\"Wrong input string for convertion\");\n\t\t}\n\t\t//endregion\n\t\t//region Get \"UTC time difference\" in case of local time\n\t\telse {\n\t\t\t\tlet multiplier = 1;\n\t\t\t\tlet differencePosition = timeString.indexOf(\"+\");\n\t\t\t\tlet differenceString = \"\";\n\n\t\t\t\tif (differencePosition === -1) {\n\t\t\t\t\tdifferencePosition = timeString.indexOf(\"-\");\n\t\t\t\t\tmultiplier = -1;\n\t\t\t\t}\n\n\t\t\t\tif (differencePosition !== -1) {\n\t\t\t\t\tdifferenceString = timeString.substr(differencePosition + 1);\n\t\t\t\t\ttimeString = timeString.substr(0, differencePosition);\n\n\t\t\t\t\tif (differenceString.length !== 2 && differenceString.length !== 4) throw new Error(\"Wrong input string for convertion\");\n\n\t\t\t\t\t//noinspection JSPrimitiveTypeWrapperUsage\n\t\t\t\t\tlet number = new Number(differenceString.substr(0, 2));\n\n\t\t\t\t\tif (isNaN(number.valueOf())) throw new Error(\"Wrong input string for convertion\");\n\n\t\t\t\t\thourDifference = multiplier * number;\n\n\t\t\t\t\tif (differenceString.length === 4) {\n\t\t\t\t\t\t//noinspection JSPrimitiveTypeWrapperUsage\n\t\t\t\t\t\tnumber = new Number(differenceString.substr(2, 2));\n\n\t\t\t\t\t\tif (isNaN(number.valueOf())) throw new Error(\"Wrong input string for convertion\");\n\n\t\t\t\t\t\tminuteDifference = multiplier * number;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t//endregion\n\n\t\t//region Get position of fraction point\n\t\tlet fractionPointPosition = timeString.indexOf(\".\"); // Check for \"full stop\" symbol\n\t\tif (fractionPointPosition === -1) fractionPointPosition = timeString.indexOf(\",\"); // Check for \"comma\" symbol\n\t\t//endregion\n\n\t\t//region Get fraction part\n\t\tif (fractionPointPosition !== -1) {\n\t\t\t//noinspection JSPrimitiveTypeWrapperUsage\n\t\t\tconst fractionPartCheck = new Number(`0${timeString.substr(fractionPointPosition)}`);\n\n\t\t\tif (isNaN(fractionPartCheck.valueOf())) throw new Error(\"Wrong input string for convertion\");\n\n\t\t\tfractionPart = fractionPartCheck.valueOf();\n\n\t\t\tdateTimeString = timeString.substr(0, fractionPointPosition);\n\t\t} else dateTimeString = timeString;\n\t\t//endregion\n\n\t\t//region Parse internal date\n\t\tswitch (true) {\n\t\t\tcase dateTimeString.length === 8:\n\t\t\t\t// \"YYYYMMDD\"\n\t\t\t\tparser = /(\\d{4})(\\d{2})(\\d{2})/ig;\n\t\t\t\tif (fractionPointPosition !== -1) throw new Error(\"Wrong input string for convertion\"); // Here we should not have a \"fraction point\"\n\t\t\t\tbreak;\n\t\t\tcase dateTimeString.length === 10:\n\t\t\t\t// \"YYYYMMDDHH\"\n\t\t\t\tparser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})/ig;\n\n\t\t\t\tif (fractionPointPosition !== -1) {\n\t\t\t\t\tlet fractionResult = 60 * fractionPart;\n\t\t\t\t\tthis.minute = Math.floor(fractionResult);\n\n\t\t\t\t\tfractionResult = 60 * (fractionResult - this.minute);\n\t\t\t\t\tthis.second = Math.floor(fractionResult);\n\n\t\t\t\t\tfractionResult = 1000 * (fractionResult - this.second);\n\t\t\t\t\tthis.millisecond = Math.floor(fractionResult);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase dateTimeString.length === 12:\n\t\t\t\t// \"YYYYMMDDHHMM\"\n\t\t\t\tparser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/ig;\n\n\t\t\t\tif (fractionPointPosition !== -1) {\n\t\t\t\t\tlet fractionResult = 60 * fractionPart;\n\t\t\t\t\tthis.second = Math.floor(fractionResult);\n\n\t\t\t\t\tfractionResult = 1000 * (fractionResult - this.second);\n\t\t\t\t\tthis.millisecond = Math.floor(fractionResult);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase dateTimeString.length === 14:\n\t\t\t\t// \"YYYYMMDDHHMMSS\"\n\t\t\t\tparser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/ig;\n\n\t\t\t\tif (fractionPointPosition !== -1) {\n\t\t\t\t\tconst fractionResult = 1000 * fractionPart;\n\t\t\t\t\tthis.millisecond = Math.floor(fractionResult);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\n\t\t}\n\t\t//endregion\n\n\t\t//region Put parsed values at right places\n\t\tconst parserArray = parser.exec(dateTimeString);\n\t\tif (parserArray === null) throw new Error(\"Wrong input string for convertion\");\n\n\t\tfor (let j = 1; j < parserArray.length; j++) {\n\t\t\tswitch (j) {\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.year = parseInt(parserArray[j], 10);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.month = parseInt(parserArray[j], 10);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tthis.day = parseInt(parserArray[j], 10);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tthis.hour = parseInt(parserArray[j], 10) + hourDifference;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5:\n\t\t\t\t\tthis.minute = parseInt(parserArray[j], 10) + minuteDifference;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 6:\n\t\t\t\t\tthis.second = parseInt(parserArray[j], 10);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\n\t\t\t}\n\t\t}\n\t\t//endregion\n\n\t\t//region Get final date\n\t\tif (isUTC === false) {\n\t\t\tconst tempDate = new Date(this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\n\n\t\t\tthis.year = tempDate.getUTCFullYear();\n\t\t\tthis.month = tempDate.getUTCMonth();\n\t\t\tthis.day = tempDate.getUTCDay();\n\t\t\tthis.hour = tempDate.getUTCHours();\n\t\t\tthis.minute = tempDate.getUTCMinutes();\n\t\t\tthis.second = tempDate.getUTCSeconds();\n\t\t\tthis.millisecond = tempDate.getUTCMilliseconds();\n\t\t}\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Function converting ASN.1 internal class into JavaScript string\r\n  * @returns {string}\r\n  */\n\ttoString() {\n\t\tconst outputArray = [];\n\n\t\toutputArray.push((0, _pvutils.padNumber)(this.year, 4));\n\t\toutputArray.push((0, _pvutils.padNumber)(this.month, 2));\n\t\toutputArray.push((0, _pvutils.padNumber)(this.day, 2));\n\t\toutputArray.push((0, _pvutils.padNumber)(this.hour, 2));\n\t\toutputArray.push((0, _pvutils.padNumber)(this.minute, 2));\n\t\toutputArray.push((0, _pvutils.padNumber)(this.second, 2));\n\t\tif (this.millisecond !== 0) {\n\t\t\toutputArray.push(\".\");\n\t\t\toutputArray.push((0, _pvutils.padNumber)(this.millisecond, 3));\n\t\t}\n\t\toutputArray.push(\"Z\");\n\n\t\treturn outputArray.join(\"\");\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"GeneralizedTime\";\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the block to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\tlet object = {};\n\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry {\n\t\t\tobject = super.toJSON();\n\t\t} catch (ex) {}\n\t\t//endregion\n\n\t\tobject.year = this.year;\n\t\tobject.month = this.month;\n\t\tobject.day = this.day;\n\t\tobject.hour = this.hour;\n\t\tobject.minute = this.minute;\n\t\tobject.second = this.second;\n\t\tobject.millisecond = this.millisecond;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\nexports.GeneralizedTime = GeneralizedTime; //**************************************************************************************\n/**\r\n * @extends Utf8String\r\n */\n\nclass DATE extends Utf8String {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"DATE\" class\r\n  * @param {Object} [parameters={}]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 31; // DATE\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"DATE\";\n\t}\n\t//**********************************************************************************\n}\nexports.DATE = DATE; //**************************************************************************************\n/**\r\n * @extends Utf8String\r\n */\n\nclass TimeOfDay extends Utf8String {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"TimeOfDay\" class\r\n  * @param {Object} [parameters={}]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 32; // TimeOfDay\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"TimeOfDay\";\n\t}\n\t//**********************************************************************************\n}\nexports.TimeOfDay = TimeOfDay; //**************************************************************************************\n/**\r\n * @extends Utf8String\r\n */\n\nclass DateTime extends Utf8String {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"DateTime\" class\r\n  * @param {Object} [parameters={}]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 33; // DateTime\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"DateTime\";\n\t}\n\t//**********************************************************************************\n}\nexports.DateTime = DateTime; //**************************************************************************************\n/**\r\n * @extends Utf8String\r\n */\n\nclass Duration extends Utf8String {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"Duration\" class\r\n  * @param {Object} [parameters={}]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 34; // Duration\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"Duration\";\n\t}\n\t//**********************************************************************************\n}\nexports.Duration = Duration; //**************************************************************************************\n/**\r\n * @extends Utf8String\r\n */\n\nclass TIME extends Utf8String {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"Time\" class\r\n  * @param {Object} [parameters={}]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 14; // Time\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Aux function, need to get a block name. Need to have it here for inhiritence\r\n  * @returns {string}\r\n  */\n\tstatic blockName() {\n\t\treturn \"TIME\";\n\t}\n\t//**********************************************************************************\n}\nexports.TIME = TIME; //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of special ASN.1 schema type Choice\n//**************************************************************************************\n\nclass Choice {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"Choice\" class\r\n  * @param {Object} [parameters={}]\r\n  * @property {Array} [value] Array of ASN.1 types for make a choice from\r\n  * @property {boolean} [optional]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tthis.value = (0, _pvutils.getParametersValue)(parameters, \"value\", []);\n\t\tthis.optional = (0, _pvutils.getParametersValue)(parameters, \"optional\", false);\n\t}\n\t//**********************************************************************************\n}\nexports.Choice = Choice; //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of special ASN.1 schema type Any\n//**************************************************************************************\n\nclass Any {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"Any\" class\r\n  * @param {Object} [parameters={}]\r\n  * @property {string} [name]\r\n  * @property {boolean} [optional]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tthis.name = (0, _pvutils.getParametersValue)(parameters, \"name\", \"\");\n\t\tthis.optional = (0, _pvutils.getParametersValue)(parameters, \"optional\", false);\n\t}\n\t//**********************************************************************************\n}\nexports.Any = Any; //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of special ASN.1 schema type Repeated\n//**************************************************************************************\n\nclass Repeated {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"Repeated\" class\r\n  * @param {Object} [parameters={}]\r\n  * @property {string} [name]\r\n  * @property {boolean} [optional]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tthis.name = (0, _pvutils.getParametersValue)(parameters, \"name\", \"\");\n\t\tthis.optional = (0, _pvutils.getParametersValue)(parameters, \"optional\", false);\n\t\tthis.value = (0, _pvutils.getParametersValue)(parameters, \"value\", new Any());\n\t\tthis.local = (0, _pvutils.getParametersValue)(parameters, \"local\", false); // Could local or global array to store elements\n\t}\n\t//**********************************************************************************\n}\nexports.Repeated = Repeated; //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of special ASN.1 schema type RawData\n//**************************************************************************************\n/**\r\n * @description Special class providing ability to have \"toBER/fromBER\" for raw ArrayBuffer\r\n */\n\nclass RawData {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for \"Repeated\" class\r\n  * @param {Object} [parameters={}]\r\n  * @property {string} [name]\r\n  * @property {boolean} [optional]\r\n  */\n\tconstructor(parameters = {}) {\n\t\tthis.data = (0, _pvutils.getParametersValue)(parameters, \"data\", new ArrayBuffer(0));\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Base function for converting block from BER encoded array of bytes\r\n  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n  * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n  * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n  * @returns {number} Offset after least decoded byte\r\n  */\n\tfromBER(inputBuffer, inputOffset, inputLength) {\n\t\tthis.data = inputBuffer.slice(inputOffset, inputLength);\n\t\treturn inputOffset + inputLength;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n  * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n  * @returns {ArrayBuffer}\r\n  */\n\ttoBER(sizeOnly = false) {\n\t\treturn this.data;\n\t}\n\t//**********************************************************************************\n}\nexports.RawData = RawData; //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Major ASN.1 BER decoding function\n//**************************************************************************************\n/**\r\n * Internal library function for decoding ASN.1 BER\r\n * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n * @returns {{offset: number, result: Object}}\r\n */\n\nfunction LocalFromBER(inputBuffer, inputOffset, inputLength) {\n\tconst incomingOffset = inputOffset; // Need to store initial offset since \"inputOffset\" is changing in the function\n\n\t//region Local function changing a type for ASN.1 classes\n\tfunction localChangeType(inputObject, newType) {\n\t\tif (inputObject instanceof newType) return inputObject;\n\n\t\tconst newObject = new newType();\n\t\tnewObject.idBlock = inputObject.idBlock;\n\t\tnewObject.lenBlock = inputObject.lenBlock;\n\t\tnewObject.warnings = inputObject.warnings;\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tnewObject.valueBeforeDecode = inputObject.valueBeforeDecode.slice(0);\n\n\t\treturn newObject;\n\t}\n\t//endregion\n\n\t//region Create a basic ASN.1 type since we need to return errors and warnings from the function\n\tlet returnObject = new BaseBlock({}, Object);\n\t//endregion\n\n\t//region Basic check for parameters\n\tif ((0, _pvutils.checkBufferParams)(new LocalBaseBlock(), inputBuffer, inputOffset, inputLength) === false) {\n\t\treturnObject.error = \"Wrong input parameters\";\n\t\treturn {\n\t\t\toffset: -1,\n\t\t\tresult: returnObject\n\t\t};\n\t}\n\t//endregion\n\n\t//region Getting Uint8Array from ArrayBuffer\n\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n\t//endregion\n\n\t//region Initial checks\n\tif (intBuffer.length === 0) {\n\t\tthis.error = \"Zero buffer length\";\n\t\treturn {\n\t\t\toffset: -1,\n\t\t\tresult: returnObject\n\t\t};\n\t}\n\t//endregion\n\n\t//region Decode indentifcation block of ASN.1 BER structure\n\tlet resultOffset = returnObject.idBlock.fromBER(inputBuffer, inputOffset, inputLength);\n\treturnObject.warnings.concat(returnObject.idBlock.warnings);\n\tif (resultOffset === -1) {\n\t\treturnObject.error = returnObject.idBlock.error;\n\t\treturn {\n\t\t\toffset: -1,\n\t\t\tresult: returnObject\n\t\t};\n\t}\n\n\tinputOffset = resultOffset;\n\tinputLength -= returnObject.idBlock.blockLength;\n\t//endregion\n\n\t//region Decode length block of ASN.1 BER structure\n\tresultOffset = returnObject.lenBlock.fromBER(inputBuffer, inputOffset, inputLength);\n\treturnObject.warnings.concat(returnObject.lenBlock.warnings);\n\tif (resultOffset === -1) {\n\t\treturnObject.error = returnObject.lenBlock.error;\n\t\treturn {\n\t\t\toffset: -1,\n\t\t\tresult: returnObject\n\t\t};\n\t}\n\n\tinputOffset = resultOffset;\n\tinputLength -= returnObject.lenBlock.blockLength;\n\t//endregion\n\n\t//region Check for usign indefinite length form in encoding for primitive types\n\tif (returnObject.idBlock.isConstructed === false && returnObject.lenBlock.isIndefiniteForm === true) {\n\t\treturnObject.error = \"Indefinite length form used for primitive encoding form\";\n\t\treturn {\n\t\t\toffset: -1,\n\t\t\tresult: returnObject\n\t\t};\n\t}\n\t//endregion\n\n\t//region Switch ASN.1 block type\n\tlet newASN1Type = BaseBlock;\n\n\tswitch (returnObject.idBlock.tagClass) {\n\t\t//region UNIVERSAL\n\t\tcase 1:\n\t\t\t//region Check for reserved tag numbers\n\t\t\tif (returnObject.idBlock.tagNumber >= 37 && returnObject.idBlock.isHexOnly === false) {\n\t\t\t\treturnObject.error = \"UNIVERSAL 37 and upper tags are reserved by ASN.1 standard\";\n\t\t\t\treturn {\n\t\t\t\t\toffset: -1,\n\t\t\t\t\tresult: returnObject\n\t\t\t\t};\n\t\t\t}\n\t\t\t//endregion\n\n\t\t\tswitch (returnObject.idBlock.tagNumber) {\n\t\t\t\t//region EndOfContent type\n\t\t\t\tcase 0:\n\t\t\t\t\t//region Check for EndOfContent type\n\t\t\t\t\tif (returnObject.idBlock.isConstructed === true && returnObject.lenBlock.length > 0) {\n\t\t\t\t\t\treturnObject.error = \"Type [UNIVERSAL 0] is reserved\";\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\toffset: -1,\n\t\t\t\t\t\t\tresult: returnObject\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\t//endregion\n\n\t\t\t\t\tnewASN1Type = EndOfContent;\n\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region Boolean type\n\t\t\t\tcase 1:\n\t\t\t\t\tnewASN1Type = Boolean;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region Integer type\n\t\t\t\tcase 2:\n\t\t\t\t\tnewASN1Type = Integer;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region BitString type\n\t\t\t\tcase 3:\n\t\t\t\t\tnewASN1Type = BitString;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region OctetString type\n\t\t\t\tcase 4:\n\t\t\t\t\tnewASN1Type = OctetString;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region Null type\n\t\t\t\tcase 5:\n\t\t\t\t\tnewASN1Type = Null;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region OBJECT IDENTIFIER type\n\t\t\t\tcase 6:\n\t\t\t\t\tnewASN1Type = ObjectIdentifier;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region Enumerated type\n\t\t\t\tcase 10:\n\t\t\t\t\tnewASN1Type = Enumerated;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region Utf8String type\n\t\t\t\tcase 12:\n\t\t\t\t\tnewASN1Type = Utf8String;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region Time type\n\t\t\t\tcase 14:\n\t\t\t\t\tnewASN1Type = TIME;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region ASN.1 reserved type\n\t\t\t\tcase 15:\n\t\t\t\t\treturnObject.error = \"[UNIVERSAL 15] is reserved by ASN.1 standard\";\n\t\t\t\t\treturn {\n\t\t\t\t\t\toffset: -1,\n\t\t\t\t\t\tresult: returnObject\n\t\t\t\t\t};\n\t\t\t\t//endregion\n\t\t\t\t//region Sequence type\n\t\t\t\tcase 16:\n\t\t\t\t\tnewASN1Type = Sequence;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region Set type\n\t\t\t\tcase 17:\n\t\t\t\t\tnewASN1Type = Set;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region NumericString type\n\t\t\t\tcase 18:\n\t\t\t\t\tnewASN1Type = NumericString;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region PrintableString type\n\t\t\t\tcase 19:\n\t\t\t\t\tnewASN1Type = PrintableString;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region TeletexString type\n\t\t\t\tcase 20:\n\t\t\t\t\tnewASN1Type = TeletexString;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region VideotexString type\n\t\t\t\tcase 21:\n\t\t\t\t\tnewASN1Type = VideotexString;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region IA5String type\n\t\t\t\tcase 22:\n\t\t\t\t\tnewASN1Type = IA5String;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region UTCTime type\n\t\t\t\tcase 23:\n\t\t\t\t\tnewASN1Type = UTCTime;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region GeneralizedTime type\n\t\t\t\tcase 24:\n\t\t\t\t\tnewASN1Type = GeneralizedTime;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region GraphicString type\n\t\t\t\tcase 25:\n\t\t\t\t\tnewASN1Type = GraphicString;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region VisibleString type\n\t\t\t\tcase 26:\n\t\t\t\t\tnewASN1Type = VisibleString;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region GeneralString type\n\t\t\t\tcase 27:\n\t\t\t\t\tnewASN1Type = GeneralString;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region UniversalString type\n\t\t\t\tcase 28:\n\t\t\t\t\tnewASN1Type = UniversalString;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region CharacterString type\n\t\t\t\tcase 29:\n\t\t\t\t\tnewASN1Type = CharacterString;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region BmpString type\n\t\t\t\tcase 30:\n\t\t\t\t\tnewASN1Type = BmpString;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region DATE type\n\t\t\t\tcase 31:\n\t\t\t\t\tnewASN1Type = DATE;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region TimeOfDay type\n\t\t\t\tcase 32:\n\t\t\t\t\tnewASN1Type = TimeOfDay;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region Date-Time type\n\t\t\t\tcase 33:\n\t\t\t\t\tnewASN1Type = DateTime;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region Duration type\n\t\t\t\tcase 34:\n\t\t\t\t\tnewASN1Type = Duration;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region default\n\t\t\t\tdefault:\n\t\t\t\t\t{\n\t\t\t\t\t\tlet newObject;\n\n\t\t\t\t\t\tif (returnObject.idBlock.isConstructed === true) newObject = new Constructed();else newObject = new Primitive();\n\n\t\t\t\t\t\tnewObject.idBlock = returnObject.idBlock;\n\t\t\t\t\t\tnewObject.lenBlock = returnObject.lenBlock;\n\t\t\t\t\t\tnewObject.warnings = returnObject.warnings;\n\n\t\t\t\t\t\treturnObject = newObject;\n\n\t\t\t\t\t\tresultOffset = returnObject.fromBER(inputBuffer, inputOffset, inputLength);\n\t\t\t\t\t}\n\t\t\t\t//endregion\n\t\t\t}\n\t\t\tbreak;\n\t\t//endregion\n\t\t//region All other tag classes\n\t\tcase 2: // APPLICATION\n\t\tcase 3: // CONTEXT-SPECIFIC\n\t\tcase 4: // PRIVATE\n\t\tdefault:\n\t\t\t{\n\t\t\t\tif (returnObject.idBlock.isConstructed === true) newASN1Type = Constructed;else newASN1Type = Primitive;\n\t\t\t}\n\t\t//endregion\n\t}\n\t//endregion\n\n\t//region Change type and perform BER decoding\n\treturnObject = localChangeType(returnObject, newASN1Type);\n\tresultOffset = returnObject.fromBER(inputBuffer, inputOffset, returnObject.lenBlock.isIndefiniteForm === true ? inputLength : returnObject.lenBlock.length);\n\t//endregion\n\n\t//region Coping incoming buffer for entire ASN.1 block\n\treturnObject.valueBeforeDecode = inputBuffer.slice(incomingOffset, incomingOffset + returnObject.blockLength);\n\t//endregion\n\n\treturn {\n\t\toffset: resultOffset,\n\t\tresult: returnObject\n\t};\n}\n//**************************************************************************************\n/**\r\n * Major function for decoding ASN.1 BER array into internal library structuries\r\n * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array of bytes\r\n */\nfunction fromBER(inputBuffer) {\n\tif (inputBuffer.byteLength === 0) {\n\t\tconst result = new BaseBlock({}, Object);\n\t\tresult.error = \"Input buffer has zero length\";\n\n\t\treturn {\n\t\t\toffset: -1,\n\t\t\tresult\n\t\t};\n\t}\n\n\treturn LocalFromBER(inputBuffer, 0, inputBuffer.byteLength);\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Major scheme verification function\n//**************************************************************************************\n/**\r\n * Compare of two ASN.1 object trees\r\n * @param {!Object} root Root of input ASN.1 object tree\r\n * @param {!Object} inputData Input ASN.1 object tree\r\n * @param {!Object} inputSchema Input ASN.1 schema to compare with\r\n * @return {{verified: boolean}|{verified:boolean, result: Object}}\r\n */\nfunction compareSchema(root, inputData, inputSchema) {\n\t//region Special case for Choice schema element type\n\tif (inputSchema instanceof Choice) {\n\t\tconst choiceResult = false;\n\n\t\tfor (let j = 0; j < inputSchema.value.length; j++) {\n\t\t\tconst result = compareSchema(root, inputData, inputSchema.value[j]);\n\t\t\tif (result.verified === true) {\n\t\t\t\treturn {\n\t\t\t\t\tverified: true,\n\t\t\t\t\tresult: root\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif (choiceResult === false) {\n\t\t\tconst _result = {\n\t\t\t\tverified: false,\n\t\t\t\tresult: {\n\t\t\t\t\terror: \"Wrong values for Choice type\"\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tif (inputSchema.hasOwnProperty(\"name\")) _result.name = inputSchema.name;\n\n\t\t\treturn _result;\n\t\t}\n\t}\n\t//endregion\n\n\t//region Special case for Any schema element type\n\tif (inputSchema instanceof Any) {\n\t\t//region Add named component of ASN.1 schema\n\t\tif (inputSchema.hasOwnProperty(\"name\")) root[inputSchema.name] = inputData;\n\t\t//endregion\n\n\t\treturn {\n\t\t\tverified: true,\n\t\t\tresult: root\n\t\t};\n\t}\n\t//endregion\n\n\t//region Initial check\n\tif (root instanceof Object === false) {\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong root object\" }\n\t\t};\n\t}\n\n\tif (inputData instanceof Object === false) {\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong ASN.1 data\" }\n\t\t};\n\t}\n\n\tif (inputSchema instanceof Object === false) {\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\n\t\t};\n\t}\n\n\tif (\"idBlock\" in inputSchema === false) {\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\n\t\t};\n\t}\n\t//endregion\n\n\t//region Comparing idBlock properties in ASN.1 data and ASN.1 schema\n\t//region Encode and decode ASN.1 schema idBlock\n\t/// <remarks>This encoding/decoding is neccessary because could be an errors in schema definition</remarks>\n\tif (\"fromBER\" in inputSchema.idBlock === false) {\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\n\t\t};\n\t}\n\n\tif (\"toBER\" in inputSchema.idBlock === false) {\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\n\t\t};\n\t}\n\n\tconst encodedId = inputSchema.idBlock.toBER(false);\n\tif (encodedId.byteLength === 0) {\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Error encoding idBlock for ASN.1 schema\" }\n\t\t};\n\t}\n\n\tconst decodedOffset = inputSchema.idBlock.fromBER(encodedId, 0, encodedId.byteLength);\n\tif (decodedOffset === -1) {\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Error decoding idBlock for ASN.1 schema\" }\n\t\t};\n\t}\n\t//endregion\n\n\t//region tagClass\n\tif (inputSchema.idBlock.hasOwnProperty(\"tagClass\") === false) {\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\n\t\t};\n\t}\n\n\tif (inputSchema.idBlock.tagClass !== inputData.idBlock.tagClass) {\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: root\n\t\t};\n\t}\n\t//endregion\n\t//region tagNumber\n\tif (inputSchema.idBlock.hasOwnProperty(\"tagNumber\") === false) {\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\n\t\t};\n\t}\n\n\tif (inputSchema.idBlock.tagNumber !== inputData.idBlock.tagNumber) {\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: root\n\t\t};\n\t}\n\t//endregion\n\t//region isConstructed\n\tif (inputSchema.idBlock.hasOwnProperty(\"isConstructed\") === false) {\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\n\t\t};\n\t}\n\n\tif (inputSchema.idBlock.isConstructed !== inputData.idBlock.isConstructed) {\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: root\n\t\t};\n\t}\n\t//endregion\n\t//region isHexOnly\n\tif (\"isHexOnly\" in inputSchema.idBlock === false) // Since 'isHexOnly' is an inhirited property\n\t\t{\n\t\t\treturn {\n\t\t\t\tverified: false,\n\t\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\n\t\t\t};\n\t\t}\n\n\tif (inputSchema.idBlock.isHexOnly !== inputData.idBlock.isHexOnly) {\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: root\n\t\t};\n\t}\n\t//endregion\n\t//region valueHex\n\tif (inputSchema.idBlock.isHexOnly === true) {\n\t\tif (\"valueHex\" in inputSchema.idBlock === false) // Since 'valueHex' is an inhirited property\n\t\t\t{\n\t\t\t\treturn {\n\t\t\t\t\tverified: false,\n\t\t\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\n\t\t\t\t};\n\t\t\t}\n\n\t\tconst schemaView = new Uint8Array(inputSchema.idBlock.valueHex);\n\t\tconst asn1View = new Uint8Array(inputData.idBlock.valueHex);\n\n\t\tif (schemaView.length !== asn1View.length) {\n\t\t\treturn {\n\t\t\t\tverified: false,\n\t\t\t\tresult: root\n\t\t\t};\n\t\t}\n\n\t\tfor (let i = 0; i < schemaView.length; i++) {\n\t\t\tif (schemaView[i] !== asn1View[1]) {\n\t\t\t\treturn {\n\t\t\t\t\tverified: false,\n\t\t\t\t\tresult: root\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\t//endregion\n\t//endregion\n\n\t//region Add named component of ASN.1 schema\n\tif (inputSchema.hasOwnProperty(\"name\")) {\n\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\n\t\tif (inputSchema.name !== \"\") root[inputSchema.name] = inputData;\n\t}\n\t//endregion\n\n\t//region Getting next ASN.1 block for comparition\n\tif (inputSchema.idBlock.isConstructed === true) {\n\t\tlet admission = 0;\n\t\tlet result = { verified: false };\n\n\t\tlet maxLength = inputSchema.valueBlock.value.length;\n\n\t\tif (maxLength > 0) {\n\t\t\tif (inputSchema.valueBlock.value[0] instanceof Repeated) maxLength = inputData.valueBlock.value.length;\n\t\t}\n\n\t\t//region Special case when constructive value has no elements\n\t\tif (maxLength === 0) {\n\t\t\treturn {\n\t\t\t\tverified: true,\n\t\t\t\tresult: root\n\t\t\t};\n\t\t}\n\t\t//endregion\n\n\t\t//region Special case when \"inputData\" has no values and \"inputSchema\" has all optional values\n\t\tif (inputData.valueBlock.value.length === 0 && inputSchema.valueBlock.value.length !== 0) {\n\t\t\tlet _optional = true;\n\n\t\t\tfor (let i = 0; i < inputSchema.valueBlock.value.length; i++) _optional = _optional && (inputSchema.valueBlock.value[i].optional || false);\n\n\t\t\tif (_optional === true) {\n\t\t\t\treturn {\n\t\t\t\t\tverified: true,\n\t\t\t\t\tresult: root\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t//region Delete early added name of block\n\t\t\tif (inputSchema.hasOwnProperty(\"name\")) {\n\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\n\t\t\t\tif (inputSchema.name !== \"\") delete root[inputSchema.name];\n\t\t\t}\n\t\t\t//endregion\n\n\t\t\troot.error = \"Inconsistent object length\";\n\n\t\t\treturn {\n\t\t\t\tverified: false,\n\t\t\t\tresult: root\n\t\t\t};\n\t\t}\n\t\t//endregion\n\n\t\tfor (let i = 0; i < maxLength; i++) {\n\t\t\t//region Special case when there is an \"optional\" element of ASN.1 schema at the end\n\t\t\tif (i - admission >= inputData.valueBlock.value.length) {\n\t\t\t\tif (inputSchema.valueBlock.value[i].optional === false) {\n\t\t\t\t\tconst _result = {\n\t\t\t\t\t\tverified: false,\n\t\t\t\t\t\tresult: root\n\t\t\t\t\t};\n\n\t\t\t\t\troot.error = \"Inconsistent length between ASN.1 data and schema\";\n\n\t\t\t\t\t//region Delete early added name of block\n\t\t\t\t\tif (inputSchema.hasOwnProperty(\"name\")) {\n\t\t\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\n\t\t\t\t\t\tif (inputSchema.name !== \"\") {\n\t\t\t\t\t\t\tdelete root[inputSchema.name];\n\t\t\t\t\t\t\t_result.name = inputSchema.name;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//endregion\n\n\t\t\t\t\treturn _result;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//endregion\n\t\t\telse {\n\t\t\t\t\t//region Special case for Repeated type of ASN.1 schema element\n\t\t\t\t\tif (inputSchema.valueBlock.value[0] instanceof Repeated) {\n\t\t\t\t\t\tresult = compareSchema(root, inputData.valueBlock.value[i], inputSchema.valueBlock.value[0].value);\n\t\t\t\t\t\tif (result.verified === false) {\n\t\t\t\t\t\t\tif (inputSchema.valueBlock.value[0].optional === true) admission++;else {\n\t\t\t\t\t\t\t\t//region Delete early added name of block\n\t\t\t\t\t\t\t\tif (inputSchema.hasOwnProperty(\"name\")) {\n\t\t\t\t\t\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\n\t\t\t\t\t\t\t\t\tif (inputSchema.name !== \"\") delete root[inputSchema.name];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t//endregion\n\n\t\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (\"name\" in inputSchema.valueBlock.value[0] && inputSchema.valueBlock.value[0].name.length > 0) {\n\t\t\t\t\t\t\tlet arrayRoot = {};\n\n\t\t\t\t\t\t\tif (\"local\" in inputSchema.valueBlock.value[0] && inputSchema.valueBlock.value[0].local === true) arrayRoot = inputData;else arrayRoot = root;\n\n\t\t\t\t\t\t\tif (typeof arrayRoot[inputSchema.valueBlock.value[0].name] === \"undefined\") arrayRoot[inputSchema.valueBlock.value[0].name] = [];\n\n\t\t\t\t\t\t\tarrayRoot[inputSchema.valueBlock.value[0].name].push(inputData.valueBlock.value[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//endregion\n\t\t\t\t\telse {\n\t\t\t\t\t\t\tresult = compareSchema(root, inputData.valueBlock.value[i - admission], inputSchema.valueBlock.value[i]);\n\t\t\t\t\t\t\tif (result.verified === false) {\n\t\t\t\t\t\t\t\tif (inputSchema.valueBlock.value[i].optional === true) admission++;else {\n\t\t\t\t\t\t\t\t\t//region Delete early added name of block\n\t\t\t\t\t\t\t\t\tif (inputSchema.hasOwnProperty(\"name\")) {\n\t\t\t\t\t\t\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\n\t\t\t\t\t\t\t\t\t\tif (inputSchema.name !== \"\") delete root[inputSchema.name];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t//endregion\n\n\t\t\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\n\t\tif (result.verified === false) // The situation may take place if last element is \"optional\" and verification failed\n\t\t\t{\n\t\t\t\tconst _result = {\n\t\t\t\t\tverified: false,\n\t\t\t\t\tresult: root\n\t\t\t\t};\n\n\t\t\t\t//region Delete early added name of block\n\t\t\t\tif (inputSchema.hasOwnProperty(\"name\")) {\n\t\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\n\t\t\t\t\tif (inputSchema.name !== \"\") {\n\t\t\t\t\t\tdelete root[inputSchema.name];\n\t\t\t\t\t\t_result.name = inputSchema.name;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//endregion\n\n\t\t\t\treturn _result;\n\t\t\t}\n\n\t\treturn {\n\t\t\tverified: true,\n\t\t\tresult: root\n\t\t};\n\t}\n\t//endregion\n\t//region Ability to parse internal value for primitive-encoded value (value of OctetString, for example)\n\tif (\"primitiveSchema\" in inputSchema && \"valueHex\" in inputData.valueBlock) {\n\t\t//region Decoding of raw ASN.1 data\n\t\tconst asn1 = fromBER(inputData.valueBlock.valueHex);\n\t\tif (asn1.offset === -1) {\n\t\t\tconst _result = {\n\t\t\t\tverified: false,\n\t\t\t\tresult: asn1.result\n\t\t\t};\n\n\t\t\t//region Delete early added name of block\n\t\t\tif (inputSchema.hasOwnProperty(\"name\")) {\n\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\n\t\t\t\tif (inputSchema.name !== \"\") {\n\t\t\t\t\tdelete root[inputSchema.name];\n\t\t\t\t\t_result.name = inputSchema.name;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//endregion\n\n\t\t\treturn _result;\n\t\t}\n\t\t//endregion\n\n\t\treturn compareSchema(root, asn1.result, inputSchema.primitiveSchema);\n\t}\n\n\treturn {\n\t\tverified: true,\n\t\tresult: root\n\t};\n\t//endregion\n}\n//**************************************************************************************\n//noinspection JSUnusedGlobalSymbols\n/**\r\n * ASN.1 schema verification for ArrayBuffer data\r\n * @param {!ArrayBuffer} inputBuffer Input BER-encoded ASN.1 data\r\n * @param {!Object} inputSchema Input ASN.1 schema to verify against to\r\n * @return {{verified: boolean}|{verified:boolean, result: Object}}\r\n */\nfunction verifySchema(inputBuffer, inputSchema) {\n\t//region Initial check\n\tif (inputSchema instanceof Object === false) {\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong ASN.1 schema type\" }\n\t\t};\n\t}\n\t//endregion\n\n\t//region Decoding of raw ASN.1 data\n\tconst asn1 = fromBER(inputBuffer);\n\tif (asn1.offset === -1) {\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: asn1.result\n\t\t};\n\t}\n\t//endregion\n\n\t//region Compare ASN.1 struct with input schema\n\treturn compareSchema(asn1.result, asn1.result, inputSchema);\n\t//endregion\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Major function converting JSON to ASN.1 objects\n//**************************************************************************************\n//noinspection JSUnusedGlobalSymbols\n/**\r\n * Converting from JSON to ASN.1 objects\r\n * @param {string|Object} json JSON string or object to convert to ASN.1 objects\r\n */\nfunction fromJSON(json) {}\n// TODO Implement\n\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//# sourceMappingURL=asn1.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nvar _GeneralName = require(\"./GeneralName.js\");\n\nvar _GeneralName2 = _interopRequireDefault(_GeneralName);\n\nvar _RelativeDistinguishedNames = require(\"./RelativeDistinguishedNames.js\");\n\nvar _RelativeDistinguishedNames2 = _interopRequireDefault(_RelativeDistinguishedNames);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n/**\r\n * Class from RFC5280\r\n */\nclass DistributionPoint {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for DistributionPoint class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  * @property {Object} [distributionPoint]\r\n  * @property {Object} [reasons]\r\n  * @property {Object} [cRLIssuer]\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\tif (\"distributionPoint\" in parameters)\n\t\t\t/**\r\n    * @type {Array.<GeneralName>}\r\n    * @desc distributionPoint\r\n    */\n\t\t\tthis.distributionPoint = (0, _pvutils.getParametersValue)(parameters, \"distributionPoint\", DistributionPoint.defaultValues(\"distributionPoint\"));\n\n\t\tif (\"reasons\" in parameters)\n\t\t\t/**\r\n    * @type {BitString}\r\n    * @desc values\r\n    */\n\t\t\tthis.reasons = (0, _pvutils.getParametersValue)(parameters, \"reasons\", DistributionPoint.defaultValues(\"reasons\"));\n\n\t\tif (\"cRLIssuer\" in parameters)\n\t\t\t/**\r\n    * @type {Array.<GeneralName>}\r\n    * @desc cRLIssuer\r\n    */\n\t\t\tthis.cRLIssuer = (0, _pvutils.getParametersValue)(parameters, \"cRLIssuer\", DistributionPoint.defaultValues(\"cRLIssuer\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"distributionPoint\":\n\t\t\t\treturn [];\n\t\t\tcase \"reasons\":\n\t\t\t\treturn new asn1js.BitString();\n\t\t\tcase \"cRLIssuer\":\n\t\t\t\treturn [];\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for DistributionPoint class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * DistributionPoint ::= SEQUENCE {\r\n  *    distributionPoint       [0]     DistributionPointName OPTIONAL,\r\n  *    reasons                 [1]     ReasonFlags OPTIONAL,\r\n  *    cRLIssuer               [2]     GeneralNames OPTIONAL }\r\n  *\r\n  * DistributionPointName ::= CHOICE {\r\n  *    fullName                [0]     GeneralNames,\r\n  *    nameRelativeToCRLIssuer [1]     RelativeDistinguishedName }\r\n  *\r\n  * ReasonFlags ::= BIT STRING {\r\n  *    unused                  (0),\r\n  *    keyCompromise           (1),\r\n  *    cACompromise            (2),\r\n  *    affiliationChanged      (3),\r\n  *    superseded              (4),\r\n  *    cessationOfOperation    (5),\r\n  *    certificateHold         (6),\r\n  *    privilegeWithdrawn      (7),\r\n  *    aACompromise            (8) }\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}) {\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} [blockName]\r\n   * @property {string} [distributionPoint]\r\n   * @property {string} [distributionPointNames]\r\n   * @property {string} [reasons]\r\n   * @property {string} [cRLIssuer]\r\n   * @property {string} [cRLIssuerNames]\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\treturn new asn1js.Sequence({\n\t\t\tname: names.blockName || \"\",\n\t\t\tvalue: [new asn1js.Constructed({\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalue: [new asn1js.Choice({\n\t\t\t\t\tvalue: [new asn1js.Constructed({\n\t\t\t\t\t\tname: names.distributionPoint || \"\",\n\t\t\t\t\t\toptional: true,\n\t\t\t\t\t\tidBlock: {\n\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t\t},\n\t\t\t\t\t\tvalue: [new asn1js.Repeated({\n\t\t\t\t\t\t\tname: names.distributionPointNames || \"\",\n\t\t\t\t\t\t\tvalue: _GeneralName2.default.schema()\n\t\t\t\t\t\t})]\n\t\t\t\t\t}), new asn1js.Constructed({\n\t\t\t\t\t\tname: names.distributionPoint || \"\",\n\t\t\t\t\t\toptional: true,\n\t\t\t\t\t\tidBlock: {\n\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t\t\t},\n\t\t\t\t\t\tvalue: _RelativeDistinguishedNames2.default.schema().valueBlock.value\n\t\t\t\t\t})]\n\t\t\t\t})]\n\t\t\t}), new asn1js.Primitive({\n\t\t\t\tname: names.reasons || \"\",\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t}\n\t\t\t}), // IMPLICIT bitstring value\n\t\t\tnew asn1js.Constructed({\n\t\t\t\tname: names.cRLIssuer || \"\",\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 2 // [2]\n\t\t\t\t},\n\t\t\t\tvalue: [new asn1js.Repeated({\n\t\t\t\t\tname: names.cRLIssuerNames || \"\",\n\t\t\t\t\tvalue: _GeneralName2.default.schema()\n\t\t\t\t})]\n\t\t\t}) // IMPLICIT bitstring value\n\t\t\t]\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Clear input data first\n\t\t(0, _pvutils.clearProps)(schema, [\"distributionPoint\", \"distributionPointNames\", \"reasons\", \"cRLIssuer\", \"cRLIssuerNames\"]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, DistributionPoint.schema({\n\t\t\tnames: {\n\t\t\t\tdistributionPoint: \"distributionPoint\",\n\t\t\t\tdistributionPointNames: \"distributionPointNames\",\n\t\t\t\treasons: \"reasons\",\n\t\t\t\tcRLIssuer: \"cRLIssuer\",\n\t\t\t\tcRLIssuerNames: \"cRLIssuerNames\"\n\t\t\t}\n\t\t}));\n\n\t\tif (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for DistributionPoint\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tif (\"distributionPoint\" in asn1.result) {\n\t\t\tif (asn1.result.distributionPoint.idBlock.tagNumber === 0) // GENERAL_NAMES variant\n\t\t\t\tthis.distributionPoint = Array.from(asn1.result.distributionPointNames, element => new _GeneralName2.default({ schema: element }));\n\n\t\t\tif (asn1.result.distributionPoint.idBlock.tagNumber === 1) // RDN variant\n\t\t\t\t{\n\t\t\t\t\tthis.distributionPoint = new _RelativeDistinguishedNames2.default({\n\t\t\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\t\t\tvalue: asn1.result.distributionPoint.valueBlock.value\n\t\t\t\t\t\t})\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t}\n\n\t\tif (\"reasons\" in asn1.result) this.reasons = new asn1js.BitString({ valueHex: asn1.result.reasons.valueBlock.valueHex });\n\n\t\tif (\"cRLIssuer\" in asn1.result) this.cRLIssuer = Array.from(asn1.result.cRLIssuerNames, element => new _GeneralName2.default({ schema: element }));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\t//region Create array for output sequence\n\t\tconst outputArray = [];\n\n\t\tif (\"distributionPoint\" in this) {\n\t\t\tlet internalValue;\n\n\t\t\tif (this.distributionPoint instanceof Array) {\n\t\t\t\tinternalValue = new asn1js.Constructed({\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: Array.from(this.distributionPoint, element => element.toSchema())\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tinternalValue = new asn1js.Constructed({\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: [this.distributionPoint.toSchema()]\n\t\t\t\t});\n\t\t\t}\n\n\t\t\toutputArray.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalue: [internalValue]\n\t\t\t}));\n\t\t}\n\n\t\tif (\"reasons\" in this) {\n\t\t\toutputArray.push(new asn1js.Primitive({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tvalueHex: this.reasons.valueBlock.valueHex\n\t\t\t}));\n\t\t}\n\n\t\tif (\"cRLIssuer\" in this) {\n\t\t\toutputArray.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 2 // [2]\n\t\t\t\t},\n\t\t\t\tvalue: Array.from(this.cRLIssuer, element => element.toSchema())\n\t\t\t}));\n\t\t}\n\t\t//endregion\n\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: outputArray\n\t\t});\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\tconst object = {};\n\n\t\tif (\"distributionPoint\" in this) {\n\t\t\tif (this.distributionPoint instanceof Array) object.distributionPoint = Array.from(this.distributionPoint, element => element.toJSON());else object.distributionPoint = this.distributionPoint.toJSON();\n\t\t}\n\n\t\tif (\"reasons\" in this) object.reasons = this.reasons.toJSON();\n\n\t\tif (\"cRLIssuer\" in this) object.cRLIssuer = Array.from(this.cRLIssuer, element => element.toJSON());\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\nexports.default = DistributionPoint; //**************************************************************************************\n//# sourceMappingURL=DistributionPoint.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nvar _GeneralSubtree = require(\"./GeneralSubtree.js\");\n\nvar _GeneralSubtree2 = _interopRequireDefault(_GeneralSubtree);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n/**\r\n * Class from RFC5280\r\n */\nclass NameConstraints {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for NameConstraints class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\tif (\"permittedSubtrees\" in parameters)\n\t\t\t/**\r\n    * @type {Array.<GeneralSubtree>}\r\n    * @desc permittedSubtrees\r\n    */\n\t\t\tthis.permittedSubtrees = (0, _pvutils.getParametersValue)(parameters, \"permittedSubtrees\", NameConstraints.defaultValues(\"permittedSubtrees\"));\n\n\t\tif (\"excludedSubtrees\" in parameters)\n\t\t\t/**\r\n    * @type {Array.<GeneralSubtree>}\r\n    * @desc excludedSubtrees\r\n    */\n\t\t\tthis.excludedSubtrees = (0, _pvutils.getParametersValue)(parameters, \"excludedSubtrees\", NameConstraints.defaultValues(\"excludedSubtrees\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"permittedSubtrees\":\n\t\t\t\treturn [];\n\t\t\tcase \"excludedSubtrees\":\n\t\t\t\treturn [];\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for NameConstraints class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * NameConstraints ::= SEQUENCE {\r\n  *    permittedSubtrees       [0]     GeneralSubtrees OPTIONAL,\r\n  *    excludedSubtrees        [1]     GeneralSubtrees OPTIONAL }\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}) {\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} [blockName]\r\n   * @property {string} [permittedSubtrees]\r\n   * @property {string} [excludedSubtrees]\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\treturn new asn1js.Sequence({\n\t\t\tname: names.blockName || \"\",\n\t\t\tvalue: [new asn1js.Constructed({\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalue: [new asn1js.Repeated({\n\t\t\t\t\tname: names.permittedSubtrees || \"\",\n\t\t\t\t\tvalue: _GeneralSubtree2.default.schema()\n\t\t\t\t})]\n\t\t\t}), new asn1js.Constructed({\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tvalue: [new asn1js.Repeated({\n\t\t\t\t\tname: names.excludedSubtrees || \"\",\n\t\t\t\t\tvalue: _GeneralSubtree2.default.schema()\n\t\t\t\t})]\n\t\t\t})]\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Clear input data first\n\t\t(0, _pvutils.clearProps)(schema, [\"permittedSubtrees\", \"excludedSubtrees\"]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, NameConstraints.schema({\n\t\t\tnames: {\n\t\t\t\tpermittedSubtrees: \"permittedSubtrees\",\n\t\t\t\texcludedSubtrees: \"excludedSubtrees\"\n\t\t\t}\n\t\t}));\n\n\t\tif (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for NameConstraints\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tif (\"permittedSubtrees\" in asn1.result) this.permittedSubtrees = Array.from(asn1.result.permittedSubtrees, element => new _GeneralSubtree2.default({ schema: element }));\n\n\t\tif (\"excludedSubtrees\" in asn1.result) this.excludedSubtrees = Array.from(asn1.result.excludedSubtrees, element => new _GeneralSubtree2.default({ schema: element }));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\t//region Create array for output sequence\n\t\tconst outputArray = [];\n\n\t\tif (\"permittedSubtrees\" in this) {\n\t\t\toutputArray.push(new asn1js.Constructed({\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalue: [new asn1js.Sequence({\n\t\t\t\t\tvalue: Array.from(this.permittedSubtrees, element => element.toSchema())\n\t\t\t\t})]\n\t\t\t}));\n\t\t}\n\n\t\tif (\"excludedSubtrees\" in this) {\n\t\t\toutputArray.push(new asn1js.Constructed({\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tvalue: [new asn1js.Sequence({\n\t\t\t\t\tvalue: Array.from(this.excludedSubtrees, element => element.toSchema())\n\t\t\t\t})]\n\t\t\t}));\n\t\t}\n\t\t//endregion\n\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: outputArray\n\t\t});\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\tconst object = {};\n\n\t\tif (\"permittedSubtrees\" in this) object.permittedSubtrees = Array.from(this.permittedSubtrees, element => element.toJSON());\n\n\t\tif (\"excludedSubtrees\" in this) object.excludedSubtrees = Array.from(this.excludedSubtrees, element => element.toJSON());\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\nexports.default = NameConstraints; //**************************************************************************************\n//# sourceMappingURL=NameConstraints.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n/**\r\n * Class from RFC5280\r\n */\nclass PolicyMapping {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for PolicyMapping class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\t/**\r\n   * @type {string}\r\n   * @desc issuerDomainPolicy\r\n   */\n\t\tthis.issuerDomainPolicy = (0, _pvutils.getParametersValue)(parameters, \"issuerDomainPolicy\", PolicyMapping.defaultValues(\"issuerDomainPolicy\"));\n\t\t/**\r\n   * @type {string}\r\n   * @desc subjectDomainPolicy\r\n   */\n\t\tthis.subjectDomainPolicy = (0, _pvutils.getParametersValue)(parameters, \"subjectDomainPolicy\", PolicyMapping.defaultValues(\"subjectDomainPolicy\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"issuerDomainPolicy\":\n\t\t\t\treturn \"\";\n\t\t\tcase \"subjectDomainPolicy\":\n\t\t\t\treturn \"\";\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for PolicyMapping class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * PolicyMapping ::= SEQUENCE {\r\n  *    issuerDomainPolicy      CertPolicyId,\r\n  *    subjectDomainPolicy     CertPolicyId }\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}) {\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} [blockName]\r\n   * @property {string} [issuerDomainPolicy]\r\n   * @property {string} [subjectDomainPolicy]\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\treturn new asn1js.Sequence({\n\t\t\tname: names.blockName || \"\",\n\t\t\tvalue: [new asn1js.ObjectIdentifier({ name: names.issuerDomainPolicy || \"\" }), new asn1js.ObjectIdentifier({ name: names.subjectDomainPolicy || \"\" })]\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Clear input data first\n\t\t(0, _pvutils.clearProps)(schema, [\"issuerDomainPolicy\", \"subjectDomainPolicy\"]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, PolicyMapping.schema({\n\t\t\tnames: {\n\t\t\t\tissuerDomainPolicy: \"issuerDomainPolicy\",\n\t\t\t\tsubjectDomainPolicy: \"subjectDomainPolicy\"\n\t\t\t}\n\t\t}));\n\n\t\tif (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for PolicyMapping\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.issuerDomainPolicy = asn1.result.issuerDomainPolicy.valueBlock.toString();\n\t\tthis.subjectDomainPolicy = asn1.result.subjectDomainPolicy.valueBlock.toString();\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: [new asn1js.ObjectIdentifier({ value: this.issuerDomainPolicy }), new asn1js.ObjectIdentifier({ value: this.subjectDomainPolicy })]\n\t\t});\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\treturn {\n\t\t\tissuerDomainPolicy: this.issuerDomainPolicy,\n\t\t\tsubjectDomainPolicy: this.subjectDomainPolicy\n\t\t};\n\t}\n\t//**********************************************************************************\n}\nexports.default = PolicyMapping; //**************************************************************************************\n//# sourceMappingURL=PolicyMapping.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n/**\r\n * Class from RFC5280\r\n */\nclass PrivateKeyUsagePeriod {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for PrivateKeyUsagePeriod class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\tif (\"notBefore\" in parameters)\n\t\t\t/**\r\n    * @type {Date}\r\n    * @desc notBefore\r\n    */\n\t\t\tthis.notBefore = (0, _pvutils.getParametersValue)(parameters, \"notBefore\", PrivateKeyUsagePeriod.defaultValues(\"notBefore\"));\n\n\t\tif (\"notAfter\" in parameters)\n\t\t\t/**\r\n    * @type {Date}\r\n    * @desc notAfter\r\n    */\n\t\t\tthis.notAfter = (0, _pvutils.getParametersValue)(parameters, \"notAfter\", PrivateKeyUsagePeriod.defaultValues(\"notAfter\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"notBefore\":\n\t\t\t\treturn new Date();\n\t\t\tcase \"notAfter\":\n\t\t\t\treturn new Date();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for PrivateKeyUsagePeriod class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * PrivateKeyUsagePeriod OID ::= 2.5.29.16\r\n  *\r\n  * PrivateKeyUsagePeriod ::= SEQUENCE {\r\n  *    notBefore       [0]     GeneralizedTime OPTIONAL,\r\n  *    notAfter        [1]     GeneralizedTime OPTIONAL }\r\n  * -- either notBefore or notAfter MUST be present\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}) {\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} [blockName]\r\n   * @property {string} [notBefore]\r\n   * @property {string} [notAfter]\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\treturn new asn1js.Sequence({\n\t\t\tname: names.blockName || \"\",\n\t\t\tvalue: [new asn1js.Primitive({\n\t\t\t\tname: names.notBefore || \"\",\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t}\n\t\t\t}), new asn1js.Primitive({\n\t\t\t\tname: names.notAfter || \"\",\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t}\n\t\t\t})]\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Clear input data first\n\t\t(0, _pvutils.clearProps)(schema, [\"notBefore\", \"notAfter\"]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, PrivateKeyUsagePeriod.schema({\n\t\t\tnames: {\n\t\t\t\tnotBefore: \"notBefore\",\n\t\t\t\tnotAfter: \"notAfter\"\n\t\t\t}\n\t\t}));\n\n\t\tif (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for PrivateKeyUsagePeriod\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tif (\"notBefore\" in asn1.result) {\n\t\t\tconst localNotBefore = new asn1js.GeneralizedTime();\n\t\t\tlocalNotBefore.fromBuffer(asn1.result.notBefore.valueBlock.valueHex);\n\t\t\tthis.notBefore = localNotBefore.toDate();\n\t\t}\n\n\t\tif (\"notAfter\" in asn1.result) {\n\t\t\tconst localNotAfter = new asn1js.GeneralizedTime({ valueHex: asn1.result.notAfter.valueBlock.valueHex });\n\t\t\tlocalNotAfter.fromBuffer(asn1.result.notAfter.valueBlock.valueHex);\n\t\t\tthis.notAfter = localNotAfter.toDate();\n\t\t}\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\t//region Create array for output sequence\n\t\tconst outputArray = [];\n\n\t\tif (\"notBefore\" in this) {\n\t\t\toutputArray.push(new asn1js.Primitive({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalueHex: new asn1js.GeneralizedTime({ valueDate: this.notBefore }).valueBlock.valueHex\n\t\t\t}));\n\t\t}\n\n\t\tif (\"notAfter\" in this) {\n\t\t\toutputArray.push(new asn1js.Primitive({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tvalueHex: new asn1js.GeneralizedTime({ valueDate: this.notAfter }).valueBlock.valueHex\n\t\t\t}));\n\t\t}\n\t\t//endregion\n\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: outputArray\n\t\t});\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\tconst object = {};\n\n\t\tif (\"notBefore\" in this) object.notBefore = this.notBefore;\n\n\t\tif (\"notAfter\" in this) object.notAfter = this.notAfter;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\nexports.default = PrivateKeyUsagePeriod; //**************************************************************************************\n//# sourceMappingURL=PrivateKeyUsagePeriod.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n/**\r\n * Class from RFC5280\r\n */\nclass PolicyQualifierInfo {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for PolicyQualifierInfo class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\t/**\r\n   * @type {string}\r\n   * @desc policyQualifierId\r\n   */\n\t\tthis.policyQualifierId = (0, _pvutils.getParametersValue)(parameters, \"policyQualifierId\", PolicyQualifierInfo.defaultValues(\"policyQualifierId\"));\n\t\t/**\r\n   * @type {Object}\r\n   * @desc qualifier\r\n   */\n\t\tthis.qualifier = (0, _pvutils.getParametersValue)(parameters, \"qualifier\", PolicyQualifierInfo.defaultValues(\"qualifier\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"policyQualifierId\":\n\t\t\t\treturn \"\";\n\t\t\tcase \"qualifier\":\n\t\t\t\treturn new asn1js.Any();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for PolicyQualifierInfo class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * PolicyQualifierInfo ::= SEQUENCE {\r\n  *    policyQualifierId  PolicyQualifierId,\r\n  *    qualifier          ANY DEFINED BY policyQualifierId }\r\n  *\r\n  * id-qt          OBJECT IDENTIFIER ::=  { id-pkix 2 }\r\n  * id-qt-cps      OBJECT IDENTIFIER ::=  { id-qt 1 }\r\n  * id-qt-unotice  OBJECT IDENTIFIER ::=  { id-qt 2 }\r\n  *\r\n  * PolicyQualifierId ::= OBJECT IDENTIFIER ( id-qt-cps | id-qt-unotice )\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}) {\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} [blockName]\r\n   * @property {string} [policyQualifierId]\r\n   * @property {string} [qualifier]\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\treturn new asn1js.Sequence({\n\t\t\tname: names.blockName || \"\",\n\t\t\tvalue: [new asn1js.ObjectIdentifier({ name: names.policyQualifierId || \"\" }), new asn1js.Any({ name: names.qualifier || \"\" })]\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Clear input data first\n\t\t(0, _pvutils.clearProps)(schema, [\"policyQualifierId\", \"qualifier\"]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, PolicyQualifierInfo.schema({\n\t\t\tnames: {\n\t\t\t\tpolicyQualifierId: \"policyQualifierId\",\n\t\t\t\tqualifier: \"qualifier\"\n\t\t\t}\n\t\t}));\n\n\t\tif (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for PolicyQualifierInfo\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.policyQualifierId = asn1.result.policyQualifierId.valueBlock.toString();\n\t\tthis.qualifier = asn1.result.qualifier;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: [new asn1js.ObjectIdentifier({ value: this.policyQualifierId }), this.qualifier]\n\t\t});\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\treturn {\n\t\t\tpolicyQualifierId: this.policyQualifierId,\n\t\t\tqualifier: this.qualifier.toJSON()\n\t\t};\n\t}\n\t//**********************************************************************************\n}\nexports.default = PolicyQualifierInfo; //**************************************************************************************\n//# sourceMappingURL=PolicyQualifierInfo.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.setEngine = setEngine;\nexports.getEngine = getEngine;\nexports.getCrypto = getCrypto;\nexports.getRandomValues = getRandomValues;\nexports.getOIDByAlgorithm = getOIDByAlgorithm;\nexports.getAlgorithmParameters = getAlgorithmParameters;\nexports.createCMSECDSASignature = createCMSECDSASignature;\nexports.stringPrep = stringPrep;\nexports.createECDSASignatureFromCMS = createECDSASignatureFromCMS;\nexports.getAlgorithmByOID = getAlgorithmByOID;\nexports.getHashAlgorithm = getHashAlgorithm;\nexports.kdfWithCounter = kdfWithCounter;\nexports.kdf = kdf;\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nvar _CryptoEngine = require(\"./CryptoEngine.js\");\n\nvar _CryptoEngine2 = _interopRequireDefault(_CryptoEngine);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n//region Crypto engine related function\n//**************************************************************************************\nlet engine = {\n\tname: \"none\",\n\tcrypto: null,\n\tsubtle: null\n};\n//**************************************************************************************\nfunction setEngine(name, crypto, subtle) {\n\t//region We are in Node\n\t// noinspection JSUnresolvedVariable\n\tif (typeof process !== \"undefined\" && \"pid\" in process && typeof global !== \"undefined\" && typeof window === \"undefined\") {\n\t\t// noinspection ES6ModulesDependencies, JSUnresolvedVariable\n\t\tif (typeof global[process.pid] === \"undefined\") {\n\t\t\t// noinspection JSUnresolvedVariable\n\t\t\tglobal[process.pid] = {};\n\t\t} else {\n\t\t\t// noinspection JSUnresolvedVariable\n\t\t\tif (typeof global[process.pid] !== \"object\") {\n\t\t\t\t// noinspection JSUnresolvedVariable\n\t\t\t\tthrow new Error(`Name global.${process.pid} already exists and it is not an object`);\n\t\t\t}\n\t\t}\n\n\t\t// noinspection JSUnresolvedVariable\n\t\tif (typeof global[process.pid].pkijs === \"undefined\") {\n\t\t\t// noinspection JSUnresolvedVariable\n\t\t\tglobal[process.pid].pkijs = {};\n\t\t} else {\n\t\t\t// noinspection JSUnresolvedVariable\n\t\t\tif (typeof global[process.pid].pkijs !== \"object\") {\n\t\t\t\t// noinspection JSUnresolvedVariable\n\t\t\t\tthrow new Error(`Name global.${process.pid}.pkijs already exists and it is not an object`);\n\t\t\t}\n\t\t}\n\n\t\t// noinspection JSUnresolvedVariable\n\t\tglobal[process.pid].pkijs.engine = {\n\t\t\tname: name,\n\t\t\tcrypto: crypto,\n\t\t\tsubtle: subtle\n\t\t};\n\t}\n\t//endregion\n\t//region We are in browser\n\telse {\n\t\t\tengine = {\n\t\t\t\tname: name,\n\t\t\t\tcrypto: crypto,\n\t\t\t\tsubtle: subtle\n\t\t\t};\n\t\t}\n\t//endregion\n}\n//**************************************************************************************\nfunction getEngine() {\n\t//region We are in Node\n\t// noinspection JSUnresolvedVariable\n\tif (typeof process !== \"undefined\" && \"pid\" in process && typeof global !== \"undefined\" && typeof window === \"undefined\") {\n\t\tlet _engine;\n\n\t\ttry {\n\t\t\t// noinspection JSUnresolvedVariable\n\t\t\t_engine = global[process.pid].pkijs.engine;\n\t\t} catch (ex) {\n\t\t\tthrow new Error(\"Please call \\\"setEngine\\\" before call to \\\"getEngine\\\"\");\n\t\t}\n\n\t\treturn _engine;\n\t}\n\t//endregion\n\n\treturn engine;\n}\n//**************************************************************************************\n(function initCryptoEngine() {\n\tif (typeof self !== \"undefined\") {\n\t\tif (\"crypto\" in self) {\n\t\t\tlet engineName = \"webcrypto\";\n\n\t\t\t/**\r\n    * Standard crypto object\r\n    * @type {Object}\r\n    * @property {Object} [webkitSubtle] Subtle object from Apple\r\n    */\n\t\t\tconst cryptoObject = self.crypto;\n\t\t\tlet subtleObject;\n\n\t\t\t// Apple Safari support\n\t\t\tif (\"webkitSubtle\" in self.crypto) {\n\t\t\t\ttry {\n\t\t\t\t\tsubtleObject = self.crypto.webkitSubtle;\n\t\t\t\t} catch (ex) {\n\t\t\t\t\tsubtleObject = self.crypto.subtle;\n\t\t\t\t}\n\n\t\t\t\tengineName = \"safari\";\n\t\t\t}\n\n\t\t\tif (\"subtle\" in self.crypto) subtleObject = self.crypto.subtle;\n\n\t\t\tif (typeof subtleObject === \"undefined\") {\n\t\t\t\tengine = {\n\t\t\t\t\tname: engineName,\n\t\t\t\t\tcrypto: cryptoObject,\n\t\t\t\t\tsubtle: null\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tengine = {\n\t\t\t\t\tname: engineName,\n\t\t\t\t\tcrypto: cryptoObject,\n\t\t\t\t\tsubtle: new _CryptoEngine2.default({ name: engineName, crypto: self.crypto, subtle: subtleObject })\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\tsetEngine(engine.name, engine.crypto, engine.subtle);\n})();\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of common functions\n//**************************************************************************************\n/**\r\n * Get crypto subtle from current \"crypto engine\" or \"undefined\"\r\n * @returns {({decrypt, deriveKey, digest, encrypt, exportKey, generateKey, importKey, sign, unwrapKey, verify, wrapKey}|null)}\r\n */\nfunction getCrypto() {\n\tconst _engine = getEngine();\n\n\tif (_engine.subtle !== null) return _engine.subtle;\n\n\treturn undefined;\n}\n//**************************************************************************************\n/**\r\n * Initialize input Uint8Array by random values (with help from current \"crypto engine\")\r\n * @param {!Uint8Array} view\r\n * @returns {*}\r\n */\nfunction getRandomValues(view) {\n\treturn getEngine().subtle.getRandomValues(view);\n}\n//**************************************************************************************\n/**\r\n * Get OID for each specific algorithm\r\n * @param {Object} algorithm\r\n * @returns {string}\r\n */\nfunction getOIDByAlgorithm(algorithm) {\n\treturn getEngine().subtle.getOIDByAlgorithm(algorithm);\n}\n//**************************************************************************************\n/**\r\n * Get default algorithm parameters for each kind of operation\r\n * @param {string} algorithmName Algorithm name to get common parameters for\r\n * @param {string} operation Kind of operation: \"sign\", \"encrypt\", \"generatekey\", \"importkey\", \"exportkey\", \"verify\"\r\n * @returns {*}\r\n */\nfunction getAlgorithmParameters(algorithmName, operation) {\n\treturn getEngine().subtle.getAlgorithmParameters(algorithmName, operation);\n}\n//**************************************************************************************\n/**\r\n * Create CMS ECDSA signature from WebCrypto ECDSA signature\r\n * @param {ArrayBuffer} signatureBuffer WebCrypto result of \"sign\" function\r\n * @returns {ArrayBuffer}\r\n */\nfunction createCMSECDSASignature(signatureBuffer) {\n\t//region Initial check for correct length\n\tif (signatureBuffer.byteLength % 2 !== 0) return new ArrayBuffer(0);\n\t//endregion\n\n\t//region Initial variables\n\tconst length = signatureBuffer.byteLength / 2; // There are two equal parts inside incoming ArrayBuffer\n\n\tconst rBuffer = new ArrayBuffer(length);\n\tconst rView = new Uint8Array(rBuffer);\n\trView.set(new Uint8Array(signatureBuffer, 0, length));\n\n\tconst rInteger = new asn1js.Integer({ valueHex: rBuffer });\n\n\tconst sBuffer = new ArrayBuffer(length);\n\tconst sView = new Uint8Array(sBuffer);\n\tsView.set(new Uint8Array(signatureBuffer, length, length));\n\n\tconst sInteger = new asn1js.Integer({ valueHex: sBuffer });\n\t//endregion\n\n\treturn new asn1js.Sequence({\n\t\tvalue: [rInteger.convertToDER(), sInteger.convertToDER()]\n\t}).toBER(false);\n}\n//**************************************************************************************\n/**\r\n * String preparation function. In a future here will be realization of algorithm from RFC4518\r\n * @param {string} inputString JavaScript string. As soon as for each ASN.1 string type we have a specific transformation function here we will work with pure JavaScript string\r\n * @returns {string} Formated string\r\n */\nfunction stringPrep(inputString) {\n\t//region Initial variables\n\tlet isSpace = false;\n\tlet cuttedResult = \"\";\n\t//endregion\n\n\tconst result = inputString.trim(); // Trim input string\n\n\t//region Change all sequence of SPACE down to SPACE char\n\tfor (let i = 0; i < result.length; i++) {\n\t\tif (result.charCodeAt(i) === 32) {\n\t\t\tif (isSpace === false) isSpace = true;\n\t\t} else {\n\t\t\tif (isSpace) {\n\t\t\t\tcuttedResult += \" \";\n\t\t\t\tisSpace = false;\n\t\t\t}\n\n\t\t\tcuttedResult += result[i];\n\t\t}\n\t}\n\t//endregion\n\n\treturn cuttedResult.toLowerCase();\n}\n//**************************************************************************************\n/**\r\n * Create a single ArrayBuffer from CMS ECDSA signature\r\n * @param {Sequence} cmsSignature ASN.1 SEQUENCE contains CMS ECDSA signature\r\n * @returns {ArrayBuffer}\r\n */\nfunction createECDSASignatureFromCMS(cmsSignature) {\n\t//region Check input variables\n\tif (cmsSignature instanceof asn1js.Sequence === false) return new ArrayBuffer(0);\n\n\tif (cmsSignature.valueBlock.value.length !== 2) return new ArrayBuffer(0);\n\n\tif (cmsSignature.valueBlock.value[0] instanceof asn1js.Integer === false) return new ArrayBuffer(0);\n\n\tif (cmsSignature.valueBlock.value[1] instanceof asn1js.Integer === false) return new ArrayBuffer(0);\n\t//endregion\n\n\tconst rValue = cmsSignature.valueBlock.value[0].convertFromDER();\n\tconst sValue = cmsSignature.valueBlock.value[1].convertFromDER();\n\n\t//region Check the lengths of two parts are equal\n\tswitch (true) {\n\t\tcase rValue.valueBlock.valueHex.byteLength < sValue.valueBlock.valueHex.byteLength:\n\t\t\t{\n\t\t\t\tif (sValue.valueBlock.valueHex.byteLength - rValue.valueBlock.valueHex.byteLength !== 1) throw new Error(\"Incorrect DER integer decoding\");\n\n\t\t\t\tconst correctedLength = sValue.valueBlock.valueHex.byteLength;\n\n\t\t\t\tconst rValueView = new Uint8Array(rValue.valueBlock.valueHex);\n\n\t\t\t\tconst rValueBufferCorrected = new ArrayBuffer(correctedLength);\n\t\t\t\tconst rValueViewCorrected = new Uint8Array(rValueBufferCorrected);\n\n\t\t\t\trValueViewCorrected.set(rValueView, 1);\n\t\t\t\trValueViewCorrected[0] = 0x00; // In order to be sure we do not have any garbage here\n\n\t\t\t\treturn (0, _pvutils.utilConcatBuf)(rValueBufferCorrected, sValue.valueBlock.valueHex);\n\t\t\t}\n\t\tcase rValue.valueBlock.valueHex.byteLength > sValue.valueBlock.valueHex.byteLength:\n\t\t\t{\n\t\t\t\tif (rValue.valueBlock.valueHex.byteLength - sValue.valueBlock.valueHex.byteLength !== 1) throw new Error(\"Incorrect DER integer decoding\");\n\n\t\t\t\tconst correctedLength = rValue.valueBlock.valueHex.byteLength;\n\n\t\t\t\tconst sValueView = new Uint8Array(sValue.valueBlock.valueHex);\n\n\t\t\t\tconst sValueBufferCorrected = new ArrayBuffer(correctedLength);\n\t\t\t\tconst sValueViewCorrected = new Uint8Array(sValueBufferCorrected);\n\n\t\t\t\tsValueViewCorrected.set(sValueView, 1);\n\t\t\t\tsValueViewCorrected[0] = 0x00; // In order to be sure we do not have any garbage here\n\n\t\t\t\treturn (0, _pvutils.utilConcatBuf)(rValue.valueBlock.valueHex, sValueBufferCorrected);\n\t\t\t}\n\t\tdefault:\n\t\t\t{\n\t\t\t\t//region In case we have equal length and the length is not even with 2\n\t\t\t\tif (rValue.valueBlock.valueHex.byteLength % 2) {\n\t\t\t\t\tconst correctedLength = rValue.valueBlock.valueHex.byteLength + 1;\n\n\t\t\t\t\tconst rValueView = new Uint8Array(rValue.valueBlock.valueHex);\n\n\t\t\t\t\tconst rValueBufferCorrected = new ArrayBuffer(correctedLength);\n\t\t\t\t\tconst rValueViewCorrected = new Uint8Array(rValueBufferCorrected);\n\n\t\t\t\t\trValueViewCorrected.set(rValueView, 1);\n\t\t\t\t\trValueViewCorrected[0] = 0x00; // In order to be sure we do not have any garbage here\n\n\t\t\t\t\tconst sValueView = new Uint8Array(sValue.valueBlock.valueHex);\n\n\t\t\t\t\tconst sValueBufferCorrected = new ArrayBuffer(correctedLength);\n\t\t\t\t\tconst sValueViewCorrected = new Uint8Array(sValueBufferCorrected);\n\n\t\t\t\t\tsValueViewCorrected.set(sValueView, 1);\n\t\t\t\t\tsValueViewCorrected[0] = 0x00; // In order to be sure we do not have any garbage here\n\n\t\t\t\t\treturn (0, _pvutils.utilConcatBuf)(rValueBufferCorrected, sValueBufferCorrected);\n\t\t\t\t}\n\t\t\t\t//endregion\n\t\t\t}\n\t}\n\t//endregion\n\n\treturn (0, _pvutils.utilConcatBuf)(rValue.valueBlock.valueHex, sValue.valueBlock.valueHex);\n}\n//**************************************************************************************\n/**\r\n * Get WebCrypto algorithm by wel-known OID\r\n * @param {string} oid well-known OID to search for\r\n * @returns {Object}\r\n */\nfunction getAlgorithmByOID(oid) {\n\treturn getEngine().subtle.getAlgorithmByOID(oid);\n}\n//**************************************************************************************\n/**\r\n * Getting hash algorithm by signature algorithm\r\n * @param {AlgorithmIdentifier} signatureAlgorithm Signature algorithm\r\n * @returns {string}\r\n */\nfunction getHashAlgorithm(signatureAlgorithm) {\n\treturn getEngine().subtle.getHashAlgorithm(signatureAlgorithm);\n}\n//**************************************************************************************\n/**\r\n * ANS X9.63 Key Derivation Function having a \"Counter\" as a parameter\r\n * @param {string} hashFunction Used hash function\r\n * @param {ArrayBuffer} Zbuffer ArrayBuffer containing ECDH shared secret to derive from\r\n * @param {number} Counter\r\n * @param {ArrayBuffer} SharedInfo Usually DER encoded \"ECC_CMS_SharedInfo\" structure\r\n */\nfunction kdfWithCounter(hashFunction, Zbuffer, Counter, SharedInfo) {\n\t//region Check of input parameters\n\tswitch (hashFunction.toUpperCase()) {\n\t\tcase \"SHA-1\":\n\t\tcase \"SHA-256\":\n\t\tcase \"SHA-384\":\n\t\tcase \"SHA-512\":\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn Promise.reject(`Unknown hash function: ${hashFunction}`);\n\t}\n\n\tif (Zbuffer instanceof ArrayBuffer === false) return Promise.reject(\"Please set \\\"Zbuffer\\\" as \\\"ArrayBuffer\\\"\");\n\n\tif (Zbuffer.byteLength === 0) return Promise.reject(\"\\\"Zbuffer\\\" has zero length, error\");\n\n\tif (SharedInfo instanceof ArrayBuffer === false) return Promise.reject(\"Please set \\\"SharedInfo\\\" as \\\"ArrayBuffer\\\"\");\n\n\tif (Counter > 255) return Promise.reject(\"Please set \\\"Counter\\\" variable to value less or equal to 255\");\n\t//endregion\n\n\t//region Initial variables\n\tconst counterBuffer = new ArrayBuffer(4);\n\tconst counterView = new Uint8Array(counterBuffer);\n\tcounterView[0] = 0x00;\n\tcounterView[1] = 0x00;\n\tcounterView[2] = 0x00;\n\tcounterView[3] = Counter;\n\n\tlet combinedBuffer = new ArrayBuffer(0);\n\t//endregion\n\n\t//region Get a \"crypto\" extension\n\tconst crypto = getCrypto();\n\tif (typeof crypto === \"undefined\") return Promise.reject(\"Unable to create WebCrypto object\");\n\t//endregion\n\n\t//region Create a combined ArrayBuffer for digesting\n\tcombinedBuffer = (0, _pvutils.utilConcatBuf)(combinedBuffer, Zbuffer);\n\tcombinedBuffer = (0, _pvutils.utilConcatBuf)(combinedBuffer, counterBuffer);\n\tcombinedBuffer = (0, _pvutils.utilConcatBuf)(combinedBuffer, SharedInfo);\n\t//endregion\n\n\t//region Return digest of combined ArrayBuffer and information about current counter\n\treturn crypto.digest({\n\t\tname: hashFunction\n\t}, combinedBuffer).then(result => ({\n\t\tcounter: Counter,\n\t\tresult\n\t}));\n\t//endregion\n}\n//**************************************************************************************\n/**\r\n * ANS X9.63 Key Derivation Function\r\n * @param {string} hashFunction Used hash function\r\n * @param {ArrayBuffer} Zbuffer ArrayBuffer containing ECDH shared secret to derive from\r\n * @param {number} keydatalen Length (!!! in BITS !!!) of used kew derivation function\r\n * @param {ArrayBuffer} SharedInfo Usually DER encoded \"ECC_CMS_SharedInfo\" structure\r\n */\nfunction kdf(hashFunction, Zbuffer, keydatalen, SharedInfo) {\n\t//region Initial variables\n\tlet hashLength = 0;\n\tlet maxCounter = 1;\n\n\tconst kdfArray = [];\n\t//endregion\n\n\t//region Check of input parameters\n\tswitch (hashFunction.toUpperCase()) {\n\t\tcase \"SHA-1\":\n\t\t\thashLength = 160; // In bits\n\t\t\tbreak;\n\t\tcase \"SHA-256\":\n\t\t\thashLength = 256; // In bits\n\t\t\tbreak;\n\t\tcase \"SHA-384\":\n\t\t\thashLength = 384; // In bits\n\t\t\tbreak;\n\t\tcase \"SHA-512\":\n\t\t\thashLength = 512; // In bits\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn Promise.reject(`Unknown hash function: ${hashFunction}`);\n\t}\n\n\tif (Zbuffer instanceof ArrayBuffer === false) return Promise.reject(\"Please set \\\"Zbuffer\\\" as \\\"ArrayBuffer\\\"\");\n\n\tif (Zbuffer.byteLength === 0) return Promise.reject(\"\\\"Zbuffer\\\" has zero length, error\");\n\n\tif (SharedInfo instanceof ArrayBuffer === false) return Promise.reject(\"Please set \\\"SharedInfo\\\" as \\\"ArrayBuffer\\\"\");\n\t//endregion\n\n\t//region Calculated maximum value of \"Counter\" variable\n\tconst quotient = keydatalen / hashLength;\n\n\tif (Math.floor(quotient) > 0) {\n\t\tmaxCounter = Math.floor(quotient);\n\n\t\tif (quotient - maxCounter > 0) maxCounter++;\n\t}\n\t//endregion\n\n\t//region Create an array of \"kdfWithCounter\"\n\tfor (let i = 1; i <= maxCounter; i++) kdfArray.push(kdfWithCounter(hashFunction, Zbuffer, i, SharedInfo));\n\t//endregion\n\n\t//region Return combined digest with specified length\n\treturn Promise.all(kdfArray).then(incomingResult => {\n\t\t//region Initial variables\n\t\tlet combinedBuffer = new ArrayBuffer(0);\n\t\tlet currentCounter = 1;\n\t\tlet found = true;\n\t\t//endregion\n\n\t\t//region Combine all buffer together\n\t\twhile (found) {\n\t\t\tfound = false;\n\n\t\t\tvar _iteratorNormalCompletion = true;\n\t\t\tvar _didIteratorError = false;\n\t\t\tvar _iteratorError = undefined;\n\n\t\t\ttry {\n\t\t\t\tfor (var _iterator = incomingResult[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\t\tconst result = _step.value;\n\n\t\t\t\t\tif (result.counter === currentCounter) {\n\t\t\t\t\t\tcombinedBuffer = (0, _pvutils.utilConcatBuf)(combinedBuffer, result.result);\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\t_didIteratorError = true;\n\t\t\t\t_iteratorError = err;\n\t\t\t} finally {\n\t\t\t\ttry {\n\t\t\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t\t\t_iterator.return();\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcurrentCounter++;\n\t\t}\n\t\t//endregion\n\n\t\t//region Create output buffer with specified length\n\t\tkeydatalen >>= 3; // Divide by 8 since \"keydatalen\" is in bits\n\n\t\tif (combinedBuffer.byteLength > keydatalen) {\n\t\t\tconst newBuffer = new ArrayBuffer(keydatalen);\n\t\t\tconst newView = new Uint8Array(newBuffer);\n\t\t\tconst combinedView = new Uint8Array(combinedBuffer);\n\n\t\t\tfor (let i = 0; i < keydatalen; i++) newView[i] = combinedView[i];\n\n\t\t\treturn newBuffer;\n\t\t}\n\n\t\treturn combinedBuffer; // Since the situation when \"combinedBuffer.byteLength < keydatalen\" here we have only \"combinedBuffer.byteLength === keydatalen\"\n\t\t//endregion\n\t});\n\t//endregion\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//# sourceMappingURL=common.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nvar _AlgorithmIdentifier = require(\"./AlgorithmIdentifier.js\");\n\nvar _AlgorithmIdentifier2 = _interopRequireDefault(_AlgorithmIdentifier);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n/**\r\n * Class from RFC4055\r\n */\nclass RSASSAPSSParams {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for RSASSAPSSParams class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\t/**\r\n   * @type {AlgorithmIdentifier}\r\n   * @desc Algorithms of hashing (DEFAULT sha1)\r\n   */\n\t\tthis.hashAlgorithm = (0, _pvutils.getParametersValue)(parameters, \"hashAlgorithm\", RSASSAPSSParams.defaultValues(\"hashAlgorithm\"));\n\t\t/**\r\n   * @type {AlgorithmIdentifier}\r\n   * @desc Algorithm of \"mask generaion function (MGF)\" (DEFAULT mgf1SHA1)\r\n   */\n\t\tthis.maskGenAlgorithm = (0, _pvutils.getParametersValue)(parameters, \"maskGenAlgorithm\", RSASSAPSSParams.defaultValues(\"maskGenAlgorithm\"));\n\t\t/**\r\n   * @type {number}\r\n   * @desc Salt length (DEFAULT 20)\r\n   */\n\t\tthis.saltLength = (0, _pvutils.getParametersValue)(parameters, \"saltLength\", RSASSAPSSParams.defaultValues(\"saltLength\"));\n\t\t/**\r\n   * @type {number}\r\n   * @desc (DEFAULT 1)\r\n   */\n\t\tthis.trailerField = (0, _pvutils.getParametersValue)(parameters, \"trailerField\", RSASSAPSSParams.defaultValues(\"trailerField\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"hashAlgorithm\":\n\t\t\t\treturn new _AlgorithmIdentifier2.default({\n\t\t\t\t\talgorithmId: \"1.3.14.3.2.26\", // SHA-1\n\t\t\t\t\talgorithmParams: new asn1js.Null()\n\t\t\t\t});\n\t\t\tcase \"maskGenAlgorithm\":\n\t\t\t\treturn new _AlgorithmIdentifier2.default({\n\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.8\", // MGF1\n\t\t\t\t\talgorithmParams: new _AlgorithmIdentifier2.default({\n\t\t\t\t\t\talgorithmId: \"1.3.14.3.2.26\", // SHA-1\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\n\t\t\t\t\t}).toSchema()\n\t\t\t\t});\n\t\t\tcase \"saltLength\":\n\t\t\t\treturn 20;\n\t\t\tcase \"trailerField\":\n\t\t\t\treturn 1;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for RSASSAPSSParams class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * RSASSA-PSS-params  ::=  Sequence  {\r\n  *    hashAlgorithm      [0] HashAlgorithm DEFAULT sha1Identifier,\r\n  *    maskGenAlgorithm   [1] MaskGenAlgorithm DEFAULT mgf1SHA1Identifier,\r\n  *    saltLength         [2] Integer DEFAULT 20,\r\n  *    trailerField       [3] Integer DEFAULT 1  }\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}) {\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} [blockName]\r\n   * @property {string} [hashAlgorithm]\r\n   * @property {string} [maskGenAlgorithm]\r\n   * @property {string} [saltLength]\r\n   * @property {string} [trailerField]\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\treturn new asn1js.Sequence({\n\t\t\tname: names.blockName || \"\",\n\t\t\tvalue: [new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t\tvalue: [_AlgorithmIdentifier2.default.schema(names.hashAlgorithm || {})]\n\t\t\t}), new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t\tvalue: [_AlgorithmIdentifier2.default.schema(names.maskGenAlgorithm || {})]\n\t\t\t}), new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 2 // [2]\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t\tvalue: [new asn1js.Integer({ name: names.saltLength || \"\" })]\n\t\t\t}), new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 3 // [3]\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t\tvalue: [new asn1js.Integer({ name: names.trailerField || \"\" })]\n\t\t\t})]\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Clear input data first\n\t\t(0, _pvutils.clearProps)(schema, [\"hashAlgorithm\", \"maskGenAlgorithm\", \"saltLength\", \"trailerField\"]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, RSASSAPSSParams.schema({\n\t\t\tnames: {\n\t\t\t\thashAlgorithm: {\n\t\t\t\t\tnames: {\n\t\t\t\t\t\tblockName: \"hashAlgorithm\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tmaskGenAlgorithm: {\n\t\t\t\t\tnames: {\n\t\t\t\t\t\tblockName: \"maskGenAlgorithm\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsaltLength: \"saltLength\",\n\t\t\t\ttrailerField: \"trailerField\"\n\t\t\t}\n\t\t}));\n\n\t\tif (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for RSASSAPSSParams\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tif (\"hashAlgorithm\" in asn1.result) this.hashAlgorithm = new _AlgorithmIdentifier2.default({ schema: asn1.result.hashAlgorithm });\n\n\t\tif (\"maskGenAlgorithm\" in asn1.result) this.maskGenAlgorithm = new _AlgorithmIdentifier2.default({ schema: asn1.result.maskGenAlgorithm });\n\n\t\tif (\"saltLength\" in asn1.result) this.saltLength = asn1.result.saltLength.valueBlock.valueDec;\n\n\t\tif (\"trailerField\" in asn1.result) this.trailerField = asn1.result.trailerField.valueBlock.valueDec;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\t//region Create array for output sequence\n\t\tconst outputArray = [];\n\n\t\tif (!this.hashAlgorithm.isEqual(RSASSAPSSParams.defaultValues(\"hashAlgorithm\"))) {\n\t\t\toutputArray.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalue: [this.hashAlgorithm.toSchema()]\n\t\t\t}));\n\t\t}\n\n\t\tif (!this.maskGenAlgorithm.isEqual(RSASSAPSSParams.defaultValues(\"maskGenAlgorithm\"))) {\n\t\t\toutputArray.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tvalue: [this.maskGenAlgorithm.toSchema()]\n\t\t\t}));\n\t\t}\n\n\t\tif (this.saltLength !== RSASSAPSSParams.defaultValues(\"saltLength\")) {\n\t\t\toutputArray.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 2 // [2]\n\t\t\t\t},\n\t\t\t\tvalue: [new asn1js.Integer({ value: this.saltLength })]\n\t\t\t}));\n\t\t}\n\n\t\tif (this.trailerField !== RSASSAPSSParams.defaultValues(\"trailerField\")) {\n\t\t\toutputArray.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 3 // [3]\n\t\t\t\t},\n\t\t\t\tvalue: [new asn1js.Integer({ value: this.trailerField })]\n\t\t\t}));\n\t\t}\n\t\t//endregion\n\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: outputArray\n\t\t});\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\tconst object = {};\n\n\t\tif (!this.hashAlgorithm.isEqual(RSASSAPSSParams.defaultValues(\"hashAlgorithm\"))) object.hashAlgorithm = this.hashAlgorithm.toJSON();\n\n\t\tif (!this.maskGenAlgorithm.isEqual(RSASSAPSSParams.defaultValues(\"maskGenAlgorithm\"))) object.maskGenAlgorithm = this.maskGenAlgorithm.toJSON();\n\n\t\tif (this.saltLength !== RSASSAPSSParams.defaultValues(\"saltLength\")) object.saltLength = this.saltLength;\n\n\t\tif (this.trailerField !== RSASSAPSSParams.defaultValues(\"trailerField\")) object.trailerField = this.trailerField;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\nexports.default = RSASSAPSSParams; //**************************************************************************************\n//# sourceMappingURL=RSASSAPSSParams.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nvar _PolicyInformation = require(\"./PolicyInformation.js\");\n\nvar _PolicyInformation2 = _interopRequireDefault(_PolicyInformation);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n/**\r\n * Class from RFC5280\r\n */\nclass CertificatePolicies {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for CertificatePolicies class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\t/**\r\n   * @type {Array.<PolicyInformation>}\r\n   * @desc certificatePolicies\r\n   */\n\t\tthis.certificatePolicies = (0, _pvutils.getParametersValue)(parameters, \"certificatePolicies\", CertificatePolicies.defaultValues(\"certificatePolicies\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"certificatePolicies\":\n\t\t\t\treturn [];\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for CertificatePolicies class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * certificatePolicies ::= SEQUENCE SIZE (1..MAX) OF PolicyInformation\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}) {\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} [blockName]\r\n   * @property {string} [certificatePolicies]\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\treturn new asn1js.Sequence({\n\t\t\tname: names.blockName || \"\",\n\t\t\tvalue: [new asn1js.Repeated({\n\t\t\t\tname: names.certificatePolicies || \"\",\n\t\t\t\tvalue: _PolicyInformation2.default.schema()\n\t\t\t})]\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Clear input data first\n\t\t(0, _pvutils.clearProps)(schema, [\"certificatePolicies\"]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, CertificatePolicies.schema({\n\t\t\tnames: {\n\t\t\t\tcertificatePolicies: \"certificatePolicies\"\n\t\t\t}\n\t\t}));\n\n\t\tif (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for CertificatePolicies\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.certificatePolicies = Array.from(asn1.result.certificatePolicies, element => new _PolicyInformation2.default({ schema: element }));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: Array.from(this.certificatePolicies, element => element.toSchema())\n\t\t});\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\treturn {\n\t\t\tcertificatePolicies: Array.from(this.certificatePolicies, element => element.toJSON())\n\t\t};\n\t}\n\t//**********************************************************************************\n}\nexports.default = CertificatePolicies; //**************************************************************************************\n//# sourceMappingURL=CertificatePolicies.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nvar _Extension = require(\"./Extension.js\");\n\nvar _Extension2 = _interopRequireDefault(_Extension);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n/**\r\n * Class from RFC5280\r\n */\nclass Extensions {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for Extensions class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\t/**\r\n   * @type {Array.<Extension>}\r\n   * @desc type\r\n   */\n\t\tthis.extensions = (0, _pvutils.getParametersValue)(parameters, \"extensions\", Extensions.defaultValues(\"extensions\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"extensions\":\n\t\t\t\treturn [];\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for Extensions class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @param {boolean} optional Flag that current schema should be optional\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}, optional = false) {\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} [blockName]\r\n   * @property {string} [extensions]\r\n   * @property {string} [extension]\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\treturn new asn1js.Sequence({\n\t\t\toptional,\n\t\t\tname: names.blockName || \"\",\n\t\t\tvalue: [new asn1js.Repeated({\n\t\t\t\tname: names.extensions || \"\",\n\t\t\t\tvalue: _Extension2.default.schema(names.extension || {})\n\t\t\t})]\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Clear input data first\n\t\t(0, _pvutils.clearProps)(schema, [\"extensions\"]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, Extensions.schema({\n\t\t\tnames: {\n\t\t\t\textensions: \"extensions\"\n\t\t\t}\n\t\t}));\n\n\t\tif (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for Extensions\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.extensions = Array.from(asn1.result.extensions, element => new _Extension2.default({ schema: element }));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: Array.from(this.extensions, element => element.toSchema())\n\t\t});\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\treturn {\n\t\t\textensions: Array.from(this.extensions, element => element.toJSON())\n\t\t};\n\t}\n\t//**********************************************************************************\n}\nexports.default = Extensions; //**************************************************************************************\n//# sourceMappingURL=Extensions.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nvar _common = require(\"./common.js\");\n\nvar _PublicKeyInfo = require(\"./PublicKeyInfo.js\");\n\nvar _PublicKeyInfo2 = _interopRequireDefault(_PublicKeyInfo);\n\nvar _PrivateKeyInfo = require(\"./PrivateKeyInfo.js\");\n\nvar _PrivateKeyInfo2 = _interopRequireDefault(_PrivateKeyInfo);\n\nvar _AlgorithmIdentifier = require(\"./AlgorithmIdentifier.js\");\n\nvar _AlgorithmIdentifier2 = _interopRequireDefault(_AlgorithmIdentifier);\n\nvar _EncryptedContentInfo = require(\"./EncryptedContentInfo.js\");\n\nvar _EncryptedContentInfo2 = _interopRequireDefault(_EncryptedContentInfo);\n\nvar _RSASSAPSSParams = require(\"./RSASSAPSSParams.js\");\n\nvar _RSASSAPSSParams2 = _interopRequireDefault(_RSASSAPSSParams);\n\nvar _PBKDF2Params = require(\"./PBKDF2Params.js\");\n\nvar _PBKDF2Params2 = _interopRequireDefault(_PBKDF2Params);\n\nvar _PBES2Params = require(\"./PBES2Params.js\");\n\nvar _PBES2Params2 = _interopRequireDefault(_PBES2Params);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n/**\r\n * Making MAC key using algorithm described in B.2 of PKCS#12 standard.\r\n */\nfunction makePKCS12B2Key(cryptoEngine, hashAlgorithm, keyLength, password, salt, iterationCount) {\n\t//region Initial variables\n\tlet u;\n\tlet v;\n\n\tconst result = [];\n\t//endregion\n\n\t//region Get \"u\" and \"v\" values\n\tswitch (hashAlgorithm.toUpperCase()) {\n\t\tcase \"SHA-1\":\n\t\t\tu = 20; // 160\n\t\t\tv = 64; // 512\n\t\t\tbreak;\n\t\tcase \"SHA-256\":\n\t\t\tu = 32; // 256\n\t\t\tv = 64; // 512\n\t\t\tbreak;\n\t\tcase \"SHA-384\":\n\t\t\tu = 48; // 384\n\t\t\tv = 128; // 1024\n\t\t\tbreak;\n\t\tcase \"SHA-512\":\n\t\t\tu = 64; // 512\n\t\t\tv = 128; // 1024\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new Error(\"Unsupported hashing algorithm\");\n\t}\n\t//endregion\n\n\t//region Main algorithm making key\n\t//region Transform password to UTF-8 like string\n\tconst passwordViewInitial = new Uint8Array(password);\n\n\tconst passwordTransformed = new ArrayBuffer(password.byteLength * 2 + 2);\n\tconst passwordTransformedView = new Uint8Array(passwordTransformed);\n\n\tfor (let i = 0; i < passwordViewInitial.length; i++) {\n\t\tpasswordTransformedView[i * 2] = 0x00;\n\t\tpasswordTransformedView[i * 2 + 1] = passwordViewInitial[i];\n\t}\n\n\tpasswordTransformedView[passwordTransformedView.length - 2] = 0x00;\n\tpasswordTransformedView[passwordTransformedView.length - 1] = 0x00;\n\n\tpassword = passwordTransformed.slice(0);\n\t//endregion\n\n\t//region Construct a string D (the \"diversifier\") by concatenating v/8 copies of ID\n\tconst D = new ArrayBuffer(v);\n\tconst dView = new Uint8Array(D);\n\n\tfor (let i = 0; i < D.byteLength; i++) dView[i] = 3; // The ID value equal to \"3\" for MACing (see B.3 of standard)\n\t//endregion\n\n\t//region Concatenate copies of the salt together to create a string S of length v * ceil(s / v) bytes (the final copy of the salt may be trunacted to create S)\n\tconst saltLength = salt.byteLength;\n\n\tconst sLen = v * Math.ceil(saltLength / v);\n\tconst S = new ArrayBuffer(sLen);\n\tconst sView = new Uint8Array(S);\n\n\tconst saltView = new Uint8Array(salt);\n\n\tfor (let i = 0; i < sLen; i++) sView[i] = saltView[i % saltLength];\n\t//endregion\n\n\t//region Concatenate copies of the password together to create a string P of length v * ceil(p / v) bytes (the final copy of the password may be truncated to create P)\n\tconst passwordLength = password.byteLength;\n\n\tconst pLen = v * Math.ceil(passwordLength / v);\n\tconst P = new ArrayBuffer(pLen);\n\tconst pView = new Uint8Array(P);\n\n\tconst passwordView = new Uint8Array(password);\n\n\tfor (let i = 0; i < pLen; i++) pView[i] = passwordView[i % passwordLength];\n\t//endregion\n\n\t//region Set I=S||P to be the concatenation of S and P\n\tconst sPlusPLength = S.byteLength + P.byteLength;\n\n\tlet I = new ArrayBuffer(sPlusPLength);\n\tlet iView = new Uint8Array(I);\n\n\tiView.set(sView);\n\tiView.set(pView, sView.length);\n\t//endregion\n\n\t//region Set c=ceil(n / u)\n\tconst c = Math.ceil((keyLength >> 3) / u);\n\t//endregion\n\n\t//region Initial variables\n\tlet internalSequence = Promise.resolve(I);\n\t//endregion\n\n\t//region For i=1, 2, ..., c, do the following:\n\tfor (let i = 0; i <= c; i++) {\n\t\tinternalSequence = internalSequence.then(_I => {\n\t\t\t//region Create contecanetion of D and I\n\t\t\tconst dAndI = new ArrayBuffer(D.byteLength + _I.byteLength);\n\t\t\tconst dAndIView = new Uint8Array(dAndI);\n\n\t\t\tdAndIView.set(dView);\n\t\t\tdAndIView.set(iView, dView.length);\n\t\t\t//endregion\n\n\t\t\treturn dAndI;\n\t\t});\n\n\t\t//region Make \"iterationCount\" rounds of hashing\n\t\tfor (let j = 0; j < iterationCount; j++) internalSequence = internalSequence.then(roundBuffer => cryptoEngine.digest({ name: hashAlgorithm }, new Uint8Array(roundBuffer)));\n\t\t//endregion\n\n\t\tinternalSequence = internalSequence.then(roundBuffer => {\n\t\t\t//region Concatenate copies of Ai to create a string B of length v bits (the final copy of Ai may be truncated to create B)\n\t\t\tconst B = new ArrayBuffer(v);\n\t\t\tconst bView = new Uint8Array(B);\n\n\t\t\tfor (let j = 0; j < B.byteLength; j++) bView[j] = roundBuffer[j % roundBuffer.length];\n\t\t\t//endregion\n\n\t\t\t//region Make new I value\n\t\t\tconst k = Math.ceil(saltLength / v) + Math.ceil(passwordLength / v);\n\t\t\tconst iRound = [];\n\n\t\t\tlet sliceStart = 0;\n\t\t\tlet sliceLength = v;\n\n\t\t\tfor (let j = 0; j < k; j++) {\n\t\t\t\tconst chunk = Array.from(new Uint8Array(I.slice(sliceStart, sliceStart + sliceLength)));\n\t\t\t\tsliceStart += v;\n\t\t\t\tif (sliceStart + v > I.byteLength) sliceLength = I.byteLength - sliceStart;\n\n\t\t\t\tlet x = 0x1ff;\n\n\t\t\t\tfor (let l = B.byteLength - 1; l >= 0; l--) {\n\t\t\t\t\tx >>= 8;\n\t\t\t\t\tx += bView[l] + chunk[l];\n\t\t\t\t\tchunk[l] = x & 0xff;\n\t\t\t\t}\n\n\t\t\t\tiRound.push(...chunk);\n\t\t\t}\n\n\t\t\tI = new ArrayBuffer(iRound.length);\n\t\t\tiView = new Uint8Array(I);\n\n\t\t\tiView.set(iRound);\n\t\t\t//endregion\n\n\t\t\tresult.push(...new Uint8Array(roundBuffer));\n\n\t\t\treturn I;\n\t\t});\n\t}\n\t//endregion\n\n\t//region Initialize final key\n\tinternalSequence = internalSequence.then(() => {\n\t\tconst resultBuffer = new ArrayBuffer(keyLength >> 3);\n\t\tconst resultView = new Uint8Array(resultBuffer);\n\n\t\tresultView.set(new Uint8Array(result).slice(0, keyLength >> 3));\n\n\t\treturn resultBuffer;\n\t});\n\t//endregion\n\t//endregion\n\n\treturn internalSequence;\n}\n//**************************************************************************************\n/**\r\n * Default cryptographic engine for Web Cryptography API\r\n */\nclass CryptoEngine {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for CryptoEngine class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\t/**\r\n   * @type {Object}\r\n   * @desc Usually here we are expecting \"window.crypto\" or an equivalent from custom \"crypto engine\"\r\n   */\n\t\tthis.crypto = (0, _pvutils.getParametersValue)(parameters, \"crypto\", {});\n\t\t/**\r\n   * @type {Object}\r\n   * @desc Usually here we are expecting \"window.crypto.subtle\" or an equivalent from custom \"crypto engine\"\r\n   */\n\t\tthis.subtle = (0, _pvutils.getParametersValue)(parameters, \"subtle\", {});\n\t\t/**\r\n   * @type {string}\r\n   * @desc Name of the \"crypto engine\"\r\n   */\n\t\tthis.name = (0, _pvutils.getParametersValue)(parameters, \"name\", \"\");\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Import WebCrypto keys from different formats\r\n  * @param {string} format\r\n  * @param {ArrayBuffer|Uint8Array} keyData\r\n  * @param {Object} algorithm\r\n  * @param {boolean} extractable\r\n  * @param {Array} keyUsages\r\n  * @returns {Promise}\r\n  */\n\timportKey(format, keyData, algorithm, extractable, keyUsages) {\n\t\t//region Initial variables\n\t\tlet jwk = {};\n\t\t//endregion\n\n\t\t//region Change \"keyData\" type if needed\n\t\tif (keyData instanceof Uint8Array) keyData = keyData.buffer;\n\t\t//endregion\n\n\t\tswitch (format.toLowerCase()) {\n\t\t\tcase \"raw\":\n\t\t\t\treturn this.subtle.importKey(\"raw\", keyData, algorithm, extractable, keyUsages);\n\t\t\tcase \"spki\":\n\t\t\t\t{\n\t\t\t\t\tconst asn1 = asn1js.fromBER(keyData);\n\t\t\t\t\tif (asn1.offset === -1) return Promise.reject(\"Incorrect keyData\");\n\n\t\t\t\t\tconst publicKeyInfo = new _PublicKeyInfo2.default();\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpublicKeyInfo.fromSchema(asn1.result);\n\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// noinspection FallThroughInSwitchStatementJS\n\t\t\t\t\tswitch (algorithm.name.toUpperCase()) {\n\t\t\t\t\t\tcase \"RSA-PSS\":\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t//region Get information about used hash function\n\t\t\t\t\t\t\t\tswitch (algorithm.hash.name.toUpperCase()) {\n\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS1\";\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS256\";\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS384\";\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS512\";\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t//endregion\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t// break omitted\n\t\t\t\t\t\tcase \"RSASSA-PKCS1-V1_5\":\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tkeyUsages = [\"verify\"]; // Override existing keyUsages value since the key is a public key\n\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\n\n\t\t\t\t\t\t\t\tif (publicKeyInfo.algorithm.algorithmId !== \"1.2.840.113549.1.1.1\") return Promise.reject(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\n\n\t\t\t\t\t\t\t\t//region Get information about used hash function\n\t\t\t\t\t\t\t\tif (\"alg\" in jwk === false) {\n\t\t\t\t\t\t\t\t\tswitch (algorithm.hash.name.toUpperCase()) {\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS1\";\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS256\";\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS384\";\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS512\";\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t//endregion\n\n\t\t\t\t\t\t\t\t//region Create RSA Public Key elements\n\t\t\t\t\t\t\t\tconst publicKeyJSON = publicKeyInfo.toJSON();\n\n\t\t\t\t\t\t\t\tvar _iteratorNormalCompletion = true;\n\t\t\t\t\t\t\t\tvar _didIteratorError = false;\n\t\t\t\t\t\t\t\tvar _iteratorError = undefined;\n\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tfor (var _iterator = Object.keys(publicKeyJSON)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\t\t\t\t\t\t\tconst key = _step.value;\n\n\t\t\t\t\t\t\t\t\t\tjwk[key] = publicKeyJSON[key];\n\t\t\t\t\t\t\t\t\t} //endregion\n\t\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\t\t_didIteratorError = true;\n\t\t\t\t\t\t\t\t\t_iteratorError = err;\n\t\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t\t\t\t\t\t\t\t_iterator.return();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\t\t\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"ECDSA\":\n\t\t\t\t\t\t\tkeyUsages = [\"verify\"]; // Override existing keyUsages value since the key is a public key\n\t\t\t\t\t\t// break omitted\n\t\t\t\t\t\tcase \"ECDH\":\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t//region Initial variables\n\t\t\t\t\t\t\t\tjwk = {\n\t\t\t\t\t\t\t\t\tkty: \"EC\",\n\t\t\t\t\t\t\t\t\text: extractable,\n\t\t\t\t\t\t\t\t\tkey_ops: keyUsages\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t//endregion\n\n\t\t\t\t\t\t\t\t//region Get information about algorithm\n\t\t\t\t\t\t\t\tif (publicKeyInfo.algorithm.algorithmId !== \"1.2.840.10045.2.1\") return Promise.reject(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\n\t\t\t\t\t\t\t\t//endregion\n\n\t\t\t\t\t\t\t\t//region Create ECDSA Public Key elements\n\t\t\t\t\t\t\t\tconst publicKeyJSON = publicKeyInfo.toJSON();\n\n\t\t\t\t\t\t\t\tvar _iteratorNormalCompletion2 = true;\n\t\t\t\t\t\t\t\tvar _didIteratorError2 = false;\n\t\t\t\t\t\t\t\tvar _iteratorError2 = undefined;\n\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tfor (var _iterator2 = Object.keys(publicKeyJSON)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n\t\t\t\t\t\t\t\t\t\tconst key = _step2.value;\n\n\t\t\t\t\t\t\t\t\t\tjwk[key] = publicKeyJSON[key];\n\t\t\t\t\t\t\t\t\t} //endregion\n\t\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\t\t_didIteratorError2 = true;\n\t\t\t\t\t\t\t\t\t_iteratorError2 = err;\n\t\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tif (!_iteratorNormalCompletion2 && _iterator2.return) {\n\t\t\t\t\t\t\t\t\t\t\t_iterator2.return();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\t\t\tif (_didIteratorError2) {\n\t\t\t\t\t\t\t\t\t\t\tthrow _iteratorError2;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"RSA-OAEP\":\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\n\n\t\t\t\t\t\t\t\tif (this.name.toLowerCase() === \"safari\") jwk.alg = \"RSA-OAEP\";else {\n\t\t\t\t\t\t\t\t\tswitch (algorithm.hash.name.toUpperCase()) {\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP\";\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-256\";\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-384\";\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-512\";\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t//region Create ECDSA Public Key elements\n\t\t\t\t\t\t\t\tconst publicKeyJSON = publicKeyInfo.toJSON();\n\n\t\t\t\t\t\t\t\tvar _iteratorNormalCompletion3 = true;\n\t\t\t\t\t\t\t\tvar _didIteratorError3 = false;\n\t\t\t\t\t\t\t\tvar _iteratorError3 = undefined;\n\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tfor (var _iterator3 = Object.keys(publicKeyJSON)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n\t\t\t\t\t\t\t\t\t\tconst key = _step3.value;\n\n\t\t\t\t\t\t\t\t\t\tjwk[key] = publicKeyJSON[key];\n\t\t\t\t\t\t\t\t\t} //endregion\n\t\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\t\t_didIteratorError3 = true;\n\t\t\t\t\t\t\t\t\t_iteratorError3 = err;\n\t\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tif (!_iteratorNormalCompletion3 && _iterator3.return) {\n\t\t\t\t\t\t\t\t\t\t\t_iterator3.return();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\t\t\tif (_didIteratorError3) {\n\t\t\t\t\t\t\t\t\t\t\tthrow _iteratorError3;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn Promise.reject(`Incorrect algorithm name: ${algorithm.name.toUpperCase()}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"pkcs8\":\n\t\t\t\t{\n\t\t\t\t\tconst privateKeyInfo = new _PrivateKeyInfo2.default();\n\n\t\t\t\t\t//region Parse \"PrivateKeyInfo\" object\n\t\t\t\t\tconst asn1 = asn1js.fromBER(keyData);\n\t\t\t\t\tif (asn1.offset === -1) return Promise.reject(\"Incorrect keyData\");\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tprivateKeyInfo.fromSchema(asn1.result);\n\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\"parsedKey\" in privateKeyInfo === false) return Promise.reject(\"Incorrect keyData\");\n\t\t\t\t\t//endregion\n\n\t\t\t\t\t// noinspection FallThroughInSwitchStatementJS\n\t\t\t\t\t// noinspection FallThroughInSwitchStatementJS\n\t\t\t\t\tswitch (algorithm.name.toUpperCase()) {\n\t\t\t\t\t\tcase \"RSA-PSS\":\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t//region Get information about used hash function\n\t\t\t\t\t\t\t\tswitch (algorithm.hash.name.toUpperCase()) {\n\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS1\";\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS256\";\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS384\";\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS512\";\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t//endregion\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t// break omitted\n\t\t\t\t\t\tcase \"RSASSA-PKCS1-V1_5\":\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tkeyUsages = [\"sign\"]; // Override existing keyUsages value since the key is a private key\n\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\n\n\t\t\t\t\t\t\t\t//region Get information about used hash function\n\t\t\t\t\t\t\t\tif (privateKeyInfo.privateKeyAlgorithm.algorithmId !== \"1.2.840.113549.1.1.1\") return Promise.reject(`Incorrect private key algorithm: ${privateKeyInfo.privateKeyAlgorithm.algorithmId}`);\n\t\t\t\t\t\t\t\t//endregion\n\n\t\t\t\t\t\t\t\t//region Get information about used hash function\n\t\t\t\t\t\t\t\tif (\"alg\" in jwk === false) {\n\t\t\t\t\t\t\t\t\tswitch (algorithm.hash.name.toUpperCase()) {\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS1\";\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS256\";\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS384\";\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS512\";\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t//endregion\n\n\t\t\t\t\t\t\t\t//region Create RSA Private Key elements\n\t\t\t\t\t\t\t\tconst privateKeyJSON = privateKeyInfo.toJSON();\n\n\t\t\t\t\t\t\t\tvar _iteratorNormalCompletion4 = true;\n\t\t\t\t\t\t\t\tvar _didIteratorError4 = false;\n\t\t\t\t\t\t\t\tvar _iteratorError4 = undefined;\n\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tfor (var _iterator4 = Object.keys(privateKeyJSON)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n\t\t\t\t\t\t\t\t\t\tconst key = _step4.value;\n\n\t\t\t\t\t\t\t\t\t\tjwk[key] = privateKeyJSON[key];\n\t\t\t\t\t\t\t\t\t} //endregion\n\t\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\t\t_didIteratorError4 = true;\n\t\t\t\t\t\t\t\t\t_iteratorError4 = err;\n\t\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tif (!_iteratorNormalCompletion4 && _iterator4.return) {\n\t\t\t\t\t\t\t\t\t\t\t_iterator4.return();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\t\t\tif (_didIteratorError4) {\n\t\t\t\t\t\t\t\t\t\t\tthrow _iteratorError4;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"ECDSA\":\n\t\t\t\t\t\t\tkeyUsages = [\"sign\"]; // Override existing keyUsages value since the key is a private key\n\t\t\t\t\t\t// break omitted\n\t\t\t\t\t\tcase \"ECDH\":\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t//region Initial variables\n\t\t\t\t\t\t\t\tjwk = {\n\t\t\t\t\t\t\t\t\tkty: \"EC\",\n\t\t\t\t\t\t\t\t\text: extractable,\n\t\t\t\t\t\t\t\t\tkey_ops: keyUsages\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t//endregion\n\n\t\t\t\t\t\t\t\t//region Get information about used hash function\n\t\t\t\t\t\t\t\tif (privateKeyInfo.privateKeyAlgorithm.algorithmId !== \"1.2.840.10045.2.1\") return Promise.reject(`Incorrect algorithm: ${privateKeyInfo.privateKeyAlgorithm.algorithmId}`);\n\t\t\t\t\t\t\t\t//endregion\n\n\t\t\t\t\t\t\t\t//region Create ECDSA Private Key elements\n\t\t\t\t\t\t\t\tconst privateKeyJSON = privateKeyInfo.toJSON();\n\n\t\t\t\t\t\t\t\tvar _iteratorNormalCompletion5 = true;\n\t\t\t\t\t\t\t\tvar _didIteratorError5 = false;\n\t\t\t\t\t\t\t\tvar _iteratorError5 = undefined;\n\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tfor (var _iterator5 = Object.keys(privateKeyJSON)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n\t\t\t\t\t\t\t\t\t\tconst key = _step5.value;\n\n\t\t\t\t\t\t\t\t\t\tjwk[key] = privateKeyJSON[key];\n\t\t\t\t\t\t\t\t\t} //endregion\n\t\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\t\t_didIteratorError5 = true;\n\t\t\t\t\t\t\t\t\t_iteratorError5 = err;\n\t\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tif (!_iteratorNormalCompletion5 && _iterator5.return) {\n\t\t\t\t\t\t\t\t\t\t\t_iterator5.return();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\t\t\tif (_didIteratorError5) {\n\t\t\t\t\t\t\t\t\t\t\tthrow _iteratorError5;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"RSA-OAEP\":\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\n\n\t\t\t\t\t\t\t\t//region Get information about used hash function\n\t\t\t\t\t\t\t\tif (this.name.toLowerCase() === \"safari\") jwk.alg = \"RSA-OAEP\";else {\n\t\t\t\t\t\t\t\t\tswitch (algorithm.hash.name.toUpperCase()) {\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP\";\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-256\";\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-384\";\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-512\";\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t//endregion\n\n\t\t\t\t\t\t\t\t//region Create RSA Private Key elements\n\t\t\t\t\t\t\t\tconst privateKeyJSON = privateKeyInfo.toJSON();\n\n\t\t\t\t\t\t\t\tvar _iteratorNormalCompletion6 = true;\n\t\t\t\t\t\t\t\tvar _didIteratorError6 = false;\n\t\t\t\t\t\t\t\tvar _iteratorError6 = undefined;\n\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tfor (var _iterator6 = Object.keys(privateKeyJSON)[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n\t\t\t\t\t\t\t\t\t\tconst key = _step6.value;\n\n\t\t\t\t\t\t\t\t\t\tjwk[key] = privateKeyJSON[key];\n\t\t\t\t\t\t\t\t\t} //endregion\n\t\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\t\t_didIteratorError6 = true;\n\t\t\t\t\t\t\t\t\t_iteratorError6 = err;\n\t\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tif (!_iteratorNormalCompletion6 && _iterator6.return) {\n\t\t\t\t\t\t\t\t\t\t\t_iterator6.return();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\t\t\tif (_didIteratorError6) {\n\t\t\t\t\t\t\t\t\t\t\tthrow _iteratorError6;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn Promise.reject(`Incorrect algorithm name: ${algorithm.name.toUpperCase()}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"jwk\":\n\t\t\t\tjwk = keyData;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn Promise.reject(`Incorrect format: ${format}`);\n\t\t}\n\n\t\t//region Special case for Safari browser (since its acting not as WebCrypto standard describes)\n\t\tif (this.name.toLowerCase() === \"safari\") {\n\t\t\t// Try to use both ways - import using ArrayBuffer and pure JWK (for Safari Technology Preview)\n\t\t\treturn Promise.resolve().then(() => this.subtle.importKey(\"jwk\", (0, _pvutils.stringToArrayBuffer)(JSON.stringify(jwk)), algorithm, extractable, keyUsages)).then(result => result, () => this.subtle.importKey(\"jwk\", jwk, algorithm, extractable, keyUsages));\n\t\t}\n\t\t//endregion\n\n\t\treturn this.subtle.importKey(\"jwk\", jwk, algorithm, extractable, keyUsages);\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Export WebCrypto keys to different formats\r\n  * @param {string} format\r\n  * @param {Object} key\r\n  * @returns {Promise}\r\n  */\n\texportKey(format, key) {\n\t\tlet sequence = this.subtle.exportKey(\"jwk\", key);\n\n\t\t//region Currently Safari returns ArrayBuffer as JWK thus we need an additional transformation\n\t\tif (this.name.toLowerCase() === \"safari\") {\n\t\t\tsequence = sequence.then(result => {\n\t\t\t\t// Some additional checks for Safari Technology Preview\n\t\t\t\tif (result instanceof ArrayBuffer) return JSON.parse((0, _pvutils.arrayBufferToString)(result));\n\n\t\t\t\treturn result;\n\t\t\t});\n\t\t}\n\t\t//endregion\n\n\t\tswitch (format.toLowerCase()) {\n\t\t\tcase \"raw\":\n\t\t\t\treturn this.subtle.exportKey(\"raw\", key);\n\t\t\tcase \"spki\":\n\t\t\t\tsequence = sequence.then(result => {\n\t\t\t\t\tconst publicKeyInfo = new _PublicKeyInfo2.default();\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpublicKeyInfo.fromJSON(result);\n\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect key data\");\n\t\t\t\t\t}\n\n\t\t\t\t\treturn publicKeyInfo.toSchema().toBER(false);\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase \"pkcs8\":\n\t\t\t\tsequence = sequence.then(result => {\n\t\t\t\t\tconst privateKeyInfo = new _PrivateKeyInfo2.default();\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tprivateKeyInfo.fromJSON(result);\n\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect key data\");\n\t\t\t\t\t}\n\n\t\t\t\t\treturn privateKeyInfo.toSchema().toBER(false);\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase \"jwk\":\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn Promise.reject(`Incorrect format: ${format}`);\n\t\t}\n\n\t\treturn sequence;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert WebCrypto keys between different export formats\r\n  * @param {string} inputFormat\r\n  * @param {string} outputFormat\r\n  * @param {ArrayBuffer|Object} keyData\r\n  * @param {Object} algorithm\r\n  * @param {boolean} extractable\r\n  * @param {Array} keyUsages\r\n  * @returns {Promise}\r\n  */\n\tconvert(inputFormat, outputFormat, keyData, algorithm, extractable, keyUsages) {\n\t\tswitch (inputFormat.toLowerCase()) {\n\t\t\tcase \"raw\":\n\t\t\t\tswitch (outputFormat.toLowerCase()) {\n\t\t\t\t\tcase \"raw\":\n\t\t\t\t\t\treturn Promise.resolve(keyData);\n\t\t\t\t\tcase \"spki\":\n\t\t\t\t\t\treturn Promise.resolve().then(() => this.importKey(\"raw\", keyData, algorithm, extractable, keyUsages)).then(result => this.exportKey(\"spki\", result));\n\t\t\t\t\tcase \"pkcs8\":\n\t\t\t\t\t\treturn Promise.resolve().then(() => this.importKey(\"raw\", keyData, algorithm, extractable, keyUsages)).then(result => this.exportKey(\"pkcs8\", result));\n\t\t\t\t\tcase \"jwk\":\n\t\t\t\t\t\treturn Promise.resolve().then(() => this.importKey(\"raw\", keyData, algorithm, extractable, keyUsages)).then(result => this.exportKey(\"jwk\", result));\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\n\t\t\t\t}\n\t\t\tcase \"spki\":\n\t\t\t\tswitch (outputFormat.toLowerCase()) {\n\t\t\t\t\tcase \"raw\":\n\t\t\t\t\t\treturn Promise.resolve().then(() => this.importKey(\"spki\", keyData, algorithm, extractable, keyUsages)).then(result => this.exportKey(\"raw\", result));\n\t\t\t\t\tcase \"spki\":\n\t\t\t\t\t\treturn Promise.resolve(keyData);\n\t\t\t\t\tcase \"pkcs8\":\n\t\t\t\t\t\treturn Promise.reject(\"Impossible to convert between SPKI/PKCS8\");\n\t\t\t\t\tcase \"jwk\":\n\t\t\t\t\t\treturn Promise.resolve().then(() => this.importKey(\"spki\", keyData, algorithm, extractable, keyUsages)).then(result => this.exportKey(\"jwk\", result));\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\n\t\t\t\t}\n\t\t\tcase \"pkcs8\":\n\t\t\t\tswitch (outputFormat.toLowerCase()) {\n\t\t\t\t\tcase \"raw\":\n\t\t\t\t\t\treturn Promise.resolve().then(() => this.importKey(\"pkcs8\", keyData, algorithm, extractable, keyUsages)).then(result => this.exportKey(\"raw\", result));\n\t\t\t\t\tcase \"spki\":\n\t\t\t\t\t\treturn Promise.reject(\"Impossible to convert between SPKI/PKCS8\");\n\t\t\t\t\tcase \"pkcs8\":\n\t\t\t\t\t\treturn Promise.resolve(keyData);\n\t\t\t\t\tcase \"jwk\":\n\t\t\t\t\t\treturn Promise.resolve().then(() => this.importKey(\"pkcs8\", keyData, algorithm, extractable, keyUsages)).then(result => this.exportKey(\"jwk\", result));\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\n\t\t\t\t}\n\t\t\tcase \"jwk\":\n\t\t\t\tswitch (outputFormat.toLowerCase()) {\n\t\t\t\t\tcase \"raw\":\n\t\t\t\t\t\treturn Promise.resolve().then(() => this.importKey(\"jwk\", keyData, algorithm, extractable, keyUsages)).then(result => this.exportKey(\"raw\", result));\n\t\t\t\t\tcase \"spki\":\n\t\t\t\t\t\treturn Promise.resolve().then(() => this.importKey(\"jwk\", keyData, algorithm, extractable, keyUsages)).then(result => this.exportKey(\"spki\", result));\n\t\t\t\t\tcase \"pkcs8\":\n\t\t\t\t\t\treturn Promise.resolve().then(() => this.importKey(\"jwk\", keyData, algorithm, extractable, keyUsages)).then(result => this.exportKey(\"pkcs8\", result));\n\t\t\t\t\tcase \"jwk\":\n\t\t\t\t\t\treturn Promise.resolve(keyData);\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\treturn Promise.reject(`Incorrect inputFormat: ${inputFormat}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Wrapper for standard function \"encrypt\"\r\n  * @param args\r\n  * @returns {Promise}\r\n  */\n\tencrypt(...args) {\n\t\treturn this.subtle.encrypt(...args);\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Wrapper for standard function \"decrypt\"\r\n  * @param args\r\n  * @returns {Promise}\r\n  */\n\tdecrypt(...args) {\n\t\treturn this.subtle.decrypt(...args);\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Wrapper for standard function \"sign\"\r\n  * @param args\r\n  * @returns {Promise}\r\n  */\n\tsign(...args) {\n\t\treturn this.subtle.sign(...args);\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Wrapper for standard function \"verify\"\r\n  * @param args\r\n  * @returns {Promise}\r\n  */\n\tverify(...args) {\n\t\treturn this.subtle.verify(...args);\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Wrapper for standard function \"digest\"\r\n  * @param args\r\n  * @returns {Promise}\r\n  */\n\tdigest(...args) {\n\t\treturn this.subtle.digest(...args);\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Wrapper for standard function \"generateKey\"\r\n  * @param args\r\n  * @returns {Promise}\r\n  */\n\tgenerateKey(...args) {\n\t\treturn this.subtle.generateKey(...args);\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Wrapper for standard function \"deriveKey\"\r\n  * @param args\r\n  * @returns {Promise}\r\n  */\n\tderiveKey(...args) {\n\t\treturn this.subtle.deriveKey(...args);\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Wrapper for standard function \"deriveBits\"\r\n  * @param args\r\n  * @returns {Promise}\r\n  */\n\tderiveBits(...args) {\n\t\treturn this.subtle.deriveBits(...args);\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Wrapper for standard function \"wrapKey\"\r\n  * @param args\r\n  * @returns {Promise}\r\n  */\n\twrapKey(...args) {\n\t\treturn this.subtle.wrapKey(...args);\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Wrapper for standard function \"unwrapKey\"\r\n  * @param args\r\n  * @returns {Promise}\r\n  */\n\tunwrapKey(...args) {\n\t\treturn this.subtle.unwrapKey(...args);\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Initialize input Uint8Array by random values (with help from current \"crypto engine\")\r\n  * @param {!Uint8Array} view\r\n  * @returns {*}\r\n  */\n\tgetRandomValues(view) {\n\t\tif (\"getRandomValues\" in this.crypto === false) throw new Error(\"No support for getRandomValues\");\n\n\t\treturn this.crypto.getRandomValues(view);\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Get WebCrypto algorithm by wel-known OID\r\n  * @param {string} oid well-known OID to search for\r\n  * @returns {Object}\r\n  */\n\tgetAlgorithmByOID(oid) {\n\t\tswitch (oid) {\n\t\t\tcase \"1.2.840.113549.1.1.1\":\n\t\t\tcase \"1.2.840.113549.1.1.5\":\n\t\t\t\treturn {\n\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\n\t\t\t\t\thash: {\n\t\t\t\t\t\tname: \"SHA-1\"\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\tcase \"1.2.840.113549.1.1.11\":\n\t\t\t\treturn {\n\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\n\t\t\t\t\thash: {\n\t\t\t\t\t\tname: \"SHA-256\"\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\tcase \"1.2.840.113549.1.1.12\":\n\t\t\t\treturn {\n\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\n\t\t\t\t\thash: {\n\t\t\t\t\t\tname: \"SHA-384\"\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\tcase \"1.2.840.113549.1.1.13\":\n\t\t\t\treturn {\n\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\n\t\t\t\t\thash: {\n\t\t\t\t\t\tname: \"SHA-512\"\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\tcase \"1.2.840.113549.1.1.10\":\n\t\t\t\treturn {\n\t\t\t\t\tname: \"RSA-PSS\"\n\t\t\t\t};\n\t\t\tcase \"1.2.840.113549.1.1.7\":\n\t\t\t\treturn {\n\t\t\t\t\tname: \"RSA-OAEP\"\n\t\t\t\t};\n\t\t\tcase \"1.2.840.10045.2.1\":\n\t\t\tcase \"1.2.840.10045.4.1\":\n\t\t\t\treturn {\n\t\t\t\t\tname: \"ECDSA\",\n\t\t\t\t\thash: {\n\t\t\t\t\t\tname: \"SHA-1\"\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\tcase \"1.2.840.10045.4.3.2\":\n\t\t\t\treturn {\n\t\t\t\t\tname: \"ECDSA\",\n\t\t\t\t\thash: {\n\t\t\t\t\t\tname: \"SHA-256\"\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\tcase \"1.2.840.10045.4.3.3\":\n\t\t\t\treturn {\n\t\t\t\t\tname: \"ECDSA\",\n\t\t\t\t\thash: {\n\t\t\t\t\t\tname: \"SHA-384\"\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\tcase \"1.2.840.10045.4.3.4\":\n\t\t\t\treturn {\n\t\t\t\t\tname: \"ECDSA\",\n\t\t\t\t\thash: {\n\t\t\t\t\t\tname: \"SHA-512\"\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\tcase \"1.3.133.16.840.63.0.2\":\n\t\t\t\treturn {\n\t\t\t\t\tname: \"ECDH\",\n\t\t\t\t\tkdf: \"SHA-1\"\n\t\t\t\t};\n\t\t\tcase \"1.3.132.1.11.1\":\n\t\t\t\treturn {\n\t\t\t\t\tname: \"ECDH\",\n\t\t\t\t\tkdf: \"SHA-256\"\n\t\t\t\t};\n\t\t\tcase \"1.3.132.1.11.2\":\n\t\t\t\treturn {\n\t\t\t\t\tname: \"ECDH\",\n\t\t\t\t\tkdf: \"SHA-384\"\n\t\t\t\t};\n\t\t\tcase \"1.3.132.1.11.3\":\n\t\t\t\treturn {\n\t\t\t\t\tname: \"ECDH\",\n\t\t\t\t\tkdf: \"SHA-512\"\n\t\t\t\t};\n\t\t\tcase \"2.16.840.1.101.3.4.1.2\":\n\t\t\t\treturn {\n\t\t\t\t\tname: \"AES-CBC\",\n\t\t\t\t\tlength: 128\n\t\t\t\t};\n\t\t\tcase \"2.16.840.1.101.3.4.1.22\":\n\t\t\t\treturn {\n\t\t\t\t\tname: \"AES-CBC\",\n\t\t\t\t\tlength: 192\n\t\t\t\t};\n\t\t\tcase \"2.16.840.1.101.3.4.1.42\":\n\t\t\t\treturn {\n\t\t\t\t\tname: \"AES-CBC\",\n\t\t\t\t\tlength: 256\n\t\t\t\t};\n\t\t\tcase \"2.16.840.1.101.3.4.1.6\":\n\t\t\t\treturn {\n\t\t\t\t\tname: \"AES-GCM\",\n\t\t\t\t\tlength: 128\n\t\t\t\t};\n\t\t\tcase \"2.16.840.1.101.3.4.1.26\":\n\t\t\t\treturn {\n\t\t\t\t\tname: \"AES-GCM\",\n\t\t\t\t\tlength: 192\n\t\t\t\t};\n\t\t\tcase \"2.16.840.1.101.3.4.1.46\":\n\t\t\t\treturn {\n\t\t\t\t\tname: \"AES-GCM\",\n\t\t\t\t\tlength: 256\n\t\t\t\t};\n\t\t\tcase \"2.16.840.1.101.3.4.1.4\":\n\t\t\t\treturn {\n\t\t\t\t\tname: \"AES-CFB\",\n\t\t\t\t\tlength: 128\n\t\t\t\t};\n\t\t\tcase \"2.16.840.1.101.3.4.1.24\":\n\t\t\t\treturn {\n\t\t\t\t\tname: \"AES-CFB\",\n\t\t\t\t\tlength: 192\n\t\t\t\t};\n\t\t\tcase \"2.16.840.1.101.3.4.1.44\":\n\t\t\t\treturn {\n\t\t\t\t\tname: \"AES-CFB\",\n\t\t\t\t\tlength: 256\n\t\t\t\t};\n\t\t\tcase \"2.16.840.1.101.3.4.1.5\":\n\t\t\t\treturn {\n\t\t\t\t\tname: \"AES-KW\",\n\t\t\t\t\tlength: 128\n\t\t\t\t};\n\t\t\tcase \"2.16.840.1.101.3.4.1.25\":\n\t\t\t\treturn {\n\t\t\t\t\tname: \"AES-KW\",\n\t\t\t\t\tlength: 192\n\t\t\t\t};\n\t\t\tcase \"2.16.840.1.101.3.4.1.45\":\n\t\t\t\treturn {\n\t\t\t\t\tname: \"AES-KW\",\n\t\t\t\t\tlength: 256\n\t\t\t\t};\n\t\t\tcase \"1.2.840.113549.2.7\":\n\t\t\t\treturn {\n\t\t\t\t\tname: \"HMAC\",\n\t\t\t\t\thash: {\n\t\t\t\t\t\tname: \"SHA-1\"\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\tcase \"1.2.840.113549.2.9\":\n\t\t\t\treturn {\n\t\t\t\t\tname: \"HMAC\",\n\t\t\t\t\thash: {\n\t\t\t\t\t\tname: \"SHA-256\"\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\tcase \"1.2.840.113549.2.10\":\n\t\t\t\treturn {\n\t\t\t\t\tname: \"HMAC\",\n\t\t\t\t\thash: {\n\t\t\t\t\t\tname: \"SHA-384\"\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\tcase \"1.2.840.113549.2.11\":\n\t\t\t\treturn {\n\t\t\t\t\tname: \"HMAC\",\n\t\t\t\t\thash: {\n\t\t\t\t\t\tname: \"SHA-512\"\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\tcase \"1.2.840.113549.1.9.16.3.5\":\n\t\t\t\treturn {\n\t\t\t\t\tname: \"DH\"\n\t\t\t\t};\n\t\t\tcase \"1.3.14.3.2.26\":\n\t\t\t\treturn {\n\t\t\t\t\tname: \"SHA-1\"\n\t\t\t\t};\n\t\t\tcase \"2.16.840.1.101.3.4.2.1\":\n\t\t\t\treturn {\n\t\t\t\t\tname: \"SHA-256\"\n\t\t\t\t};\n\t\t\tcase \"2.16.840.1.101.3.4.2.2\":\n\t\t\t\treturn {\n\t\t\t\t\tname: \"SHA-384\"\n\t\t\t\t};\n\t\t\tcase \"2.16.840.1.101.3.4.2.3\":\n\t\t\t\treturn {\n\t\t\t\t\tname: \"SHA-512\"\n\t\t\t\t};\n\t\t\tcase \"1.2.840.113549.1.5.12\":\n\t\t\t\treturn {\n\t\t\t\t\tname: \"PBKDF2\"\n\t\t\t\t};\n\t\t\t//region Special case - OIDs for ECC curves\n\t\t\tcase \"1.2.840.10045.3.1.7\":\n\t\t\t\treturn {\n\t\t\t\t\tname: \"P-256\"\n\t\t\t\t};\n\t\t\tcase \"1.3.132.0.34\":\n\t\t\t\treturn {\n\t\t\t\t\tname: \"P-384\"\n\t\t\t\t};\n\t\t\tcase \"1.3.132.0.35\":\n\t\t\t\treturn {\n\t\t\t\t\tname: \"P-521\"\n\t\t\t\t};\n\t\t\t//endregion\n\t\t\tdefault:\n\t\t}\n\n\t\treturn {};\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Get OID for each specific algorithm\r\n  * @param {Object} algorithm\r\n  * @returns {string}\r\n  */\n\tgetOIDByAlgorithm(algorithm) {\n\t\tlet result = \"\";\n\n\t\tswitch (algorithm.name.toUpperCase()) {\n\t\t\tcase \"RSASSA-PKCS1-V1_5\":\n\t\t\t\tswitch (algorithm.hash.name.toUpperCase()) {\n\t\t\t\t\tcase \"SHA-1\":\n\t\t\t\t\t\tresult = \"1.2.840.113549.1.1.5\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"SHA-256\":\n\t\t\t\t\t\tresult = \"1.2.840.113549.1.1.11\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"SHA-384\":\n\t\t\t\t\t\tresult = \"1.2.840.113549.1.1.12\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"SHA-512\":\n\t\t\t\t\t\tresult = \"1.2.840.113549.1.1.13\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"RSA-PSS\":\n\t\t\t\tresult = \"1.2.840.113549.1.1.10\";\n\t\t\t\tbreak;\n\t\t\tcase \"RSA-OAEP\":\n\t\t\t\tresult = \"1.2.840.113549.1.1.7\";\n\t\t\t\tbreak;\n\t\t\tcase \"ECDSA\":\n\t\t\t\tswitch (algorithm.hash.name.toUpperCase()) {\n\t\t\t\t\tcase \"SHA-1\":\n\t\t\t\t\t\tresult = \"1.2.840.10045.4.1\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"SHA-256\":\n\t\t\t\t\t\tresult = \"1.2.840.10045.4.3.2\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"SHA-384\":\n\t\t\t\t\t\tresult = \"1.2.840.10045.4.3.3\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"SHA-512\":\n\t\t\t\t\t\tresult = \"1.2.840.10045.4.3.4\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"ECDH\":\n\t\t\t\tswitch (algorithm.kdf.toUpperCase()) {// Non-standard addition - hash algorithm of KDF function\n\t\t\t\t\tcase \"SHA-1\":\n\t\t\t\t\t\tresult = \"1.3.133.16.840.63.0.2\"; // dhSinglePass-stdDH-sha1kdf-scheme\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"SHA-256\":\n\t\t\t\t\t\tresult = \"1.3.132.1.11.1\"; // dhSinglePass-stdDH-sha256kdf-scheme\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"SHA-384\":\n\t\t\t\t\t\tresult = \"1.3.132.1.11.2\"; // dhSinglePass-stdDH-sha384kdf-scheme\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"SHA-512\":\n\t\t\t\t\t\tresult = \"1.3.132.1.11.3\"; // dhSinglePass-stdDH-sha512kdf-scheme\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"AES-CTR\":\n\t\t\t\tbreak;\n\t\t\tcase \"AES-CBC\":\n\t\t\t\tswitch (algorithm.length) {\n\t\t\t\t\tcase 128:\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.2\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 192:\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.22\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 256:\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.42\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"AES-CMAC\":\n\t\t\t\tbreak;\n\t\t\tcase \"AES-GCM\":\n\t\t\t\tswitch (algorithm.length) {\n\t\t\t\t\tcase 128:\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.6\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 192:\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.26\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 256:\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.46\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"AES-CFB\":\n\t\t\t\tswitch (algorithm.length) {\n\t\t\t\t\tcase 128:\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.4\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 192:\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.24\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 256:\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.44\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"AES-KW\":\n\t\t\t\tswitch (algorithm.length) {\n\t\t\t\t\tcase 128:\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.5\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 192:\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.25\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 256:\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.45\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"HMAC\":\n\t\t\t\tswitch (algorithm.hash.name.toUpperCase()) {\n\t\t\t\t\tcase \"SHA-1\":\n\t\t\t\t\t\tresult = \"1.2.840.113549.2.7\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"SHA-256\":\n\t\t\t\t\t\tresult = \"1.2.840.113549.2.9\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"SHA-384\":\n\t\t\t\t\t\tresult = \"1.2.840.113549.2.10\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"SHA-512\":\n\t\t\t\t\t\tresult = \"1.2.840.113549.2.11\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"DH\":\n\t\t\t\tresult = \"1.2.840.113549.1.9.16.3.5\";\n\t\t\t\tbreak;\n\t\t\tcase \"SHA-1\":\n\t\t\t\tresult = \"1.3.14.3.2.26\";\n\t\t\t\tbreak;\n\t\t\tcase \"SHA-256\":\n\t\t\t\tresult = \"2.16.840.1.101.3.4.2.1\";\n\t\t\t\tbreak;\n\t\t\tcase \"SHA-384\":\n\t\t\t\tresult = \"2.16.840.1.101.3.4.2.2\";\n\t\t\t\tbreak;\n\t\t\tcase \"SHA-512\":\n\t\t\t\tresult = \"2.16.840.1.101.3.4.2.3\";\n\t\t\t\tbreak;\n\t\t\tcase \"CONCAT\":\n\t\t\t\tbreak;\n\t\t\tcase \"HKDF\":\n\t\t\t\tbreak;\n\t\t\tcase \"PBKDF2\":\n\t\t\t\tresult = \"1.2.840.113549.1.5.12\";\n\t\t\t\tbreak;\n\t\t\t//region Special case - OIDs for ECC curves\n\t\t\tcase \"P-256\":\n\t\t\t\tresult = \"1.2.840.10045.3.1.7\";\n\t\t\t\tbreak;\n\t\t\tcase \"P-384\":\n\t\t\t\tresult = \"1.3.132.0.34\";\n\t\t\t\tbreak;\n\t\t\tcase \"P-521\":\n\t\t\t\tresult = \"1.3.132.0.35\";\n\t\t\t\tbreak;\n\t\t\t//endregion\n\t\t\tdefault:\n\t\t}\n\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Get default algorithm parameters for each kind of operation\r\n  * @param {string} algorithmName Algorithm name to get common parameters for\r\n  * @param {string} operation Kind of operation: \"sign\", \"encrypt\", \"generatekey\", \"importkey\", \"exportkey\", \"verify\"\r\n  * @returns {*}\r\n  */\n\tgetAlgorithmParameters(algorithmName, operation) {\n\t\tlet result = {\n\t\t\talgorithm: {},\n\t\t\tusages: []\n\t\t};\n\n\t\tswitch (algorithmName.toUpperCase()) {\n\t\t\tcase \"RSASSA-PKCS1-V1_5\":\n\t\t\t\tswitch (operation.toLowerCase()) {\n\t\t\t\t\tcase \"generatekey\":\n\t\t\t\t\t\tresult = {\n\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\n\t\t\t\t\t\t\t\tmodulusLength: 2048,\n\t\t\t\t\t\t\t\tpublicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n\t\t\t\t\t\t\t\thash: {\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"verify\":\n\t\t\t\t\tcase \"sign\":\n\t\t\t\t\tcase \"importkey\":\n\t\t\t\t\t\tresult = {\n\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\n\t\t\t\t\t\t\t\thash: {\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tusages: [\"verify\"] // For importKey(\"pkcs8\") usage must be \"sign\" only\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"exportkey\":\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tusages: []\n\t\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"RSA-PSS\":\n\t\t\t\tswitch (operation.toLowerCase()) {\n\t\t\t\t\tcase \"sign\":\n\t\t\t\t\tcase \"verify\":\n\t\t\t\t\t\tresult = {\n\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\tname: \"RSA-PSS\",\n\t\t\t\t\t\t\t\thash: {\n\t\t\t\t\t\t\t\t\tname: \"SHA-1\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tsaltLength: 20\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"generatekey\":\n\t\t\t\t\t\tresult = {\n\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\tname: \"RSA-PSS\",\n\t\t\t\t\t\t\t\tmodulusLength: 2048,\n\t\t\t\t\t\t\t\tpublicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n\t\t\t\t\t\t\t\thash: {\n\t\t\t\t\t\t\t\t\tname: \"SHA-1\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"importkey\":\n\t\t\t\t\t\tresult = {\n\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\tname: \"RSA-PSS\",\n\t\t\t\t\t\t\t\thash: {\n\t\t\t\t\t\t\t\t\tname: \"SHA-1\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tusages: [\"verify\"] // For importKey(\"pkcs8\") usage must be \"sign\" only\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"exportkey\":\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\tname: \"RSA-PSS\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tusages: []\n\t\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"RSA-OAEP\":\n\t\t\t\tswitch (operation.toLowerCase()) {\n\t\t\t\t\tcase \"encrypt\":\n\t\t\t\t\tcase \"decrypt\":\n\t\t\t\t\t\tresult = {\n\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\tname: \"RSA-OAEP\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\"]\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"generatekey\":\n\t\t\t\t\t\tresult = {\n\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\tname: \"RSA-OAEP\",\n\t\t\t\t\t\t\t\tmodulusLength: 2048,\n\t\t\t\t\t\t\t\tpublicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n\t\t\t\t\t\t\t\thash: {\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"importkey\":\n\t\t\t\t\t\tresult = {\n\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\tname: \"RSA-OAEP\",\n\t\t\t\t\t\t\t\thash: {\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tusages: [\"encrypt\"] // encrypt for \"spki\" and decrypt for \"pkcs8\"\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"exportkey\":\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\tname: \"RSA-OAEP\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tusages: []\n\t\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"ECDSA\":\n\t\t\t\tswitch (operation.toLowerCase()) {\n\t\t\t\t\tcase \"generatekey\":\n\t\t\t\t\t\tresult = {\n\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\tname: \"ECDSA\",\n\t\t\t\t\t\t\t\tnamedCurve: \"P-256\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"importkey\":\n\t\t\t\t\t\tresult = {\n\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\tname: \"ECDSA\",\n\t\t\t\t\t\t\t\tnamedCurve: \"P-256\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tusages: [\"verify\"] // \"sign\" for \"pkcs8\"\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"verify\":\n\t\t\t\t\tcase \"sign\":\n\t\t\t\t\t\tresult = {\n\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\tname: \"ECDSA\",\n\t\t\t\t\t\t\t\thash: {\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tusages: [\"sign\"]\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\tname: \"ECDSA\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tusages: []\n\t\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"ECDH\":\n\t\t\t\tswitch (operation.toLowerCase()) {\n\t\t\t\t\tcase \"exportkey\":\n\t\t\t\t\tcase \"importkey\":\n\t\t\t\t\tcase \"generatekey\":\n\t\t\t\t\t\tresult = {\n\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\tname: \"ECDH\",\n\t\t\t\t\t\t\t\tnamedCurve: \"P-256\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tusages: [\"deriveKey\", \"deriveBits\"]\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"derivekey\":\n\t\t\t\t\tcase \"derivebits\":\n\t\t\t\t\t\tresult = {\n\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\tname: \"ECDH\",\n\t\t\t\t\t\t\t\tnamedCurve: \"P-256\",\n\t\t\t\t\t\t\t\tpublic: [] // Must be a \"publicKey\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\"]\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\tname: \"ECDH\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tusages: []\n\t\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"AES-CTR\":\n\t\t\t\tswitch (operation.toLowerCase()) {\n\t\t\t\t\tcase \"importkey\":\n\t\t\t\t\tcase \"exportkey\":\n\t\t\t\t\tcase \"generatekey\":\n\t\t\t\t\t\tresult = {\n\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\tname: \"AES-CTR\",\n\t\t\t\t\t\t\t\tlength: 256\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"decrypt\":\n\t\t\t\t\tcase \"encrypt\":\n\t\t\t\t\t\tresult = {\n\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\tname: \"AES-CTR\",\n\t\t\t\t\t\t\t\tcounter: new Uint8Array(16),\n\t\t\t\t\t\t\t\tlength: 10\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\tname: \"AES-CTR\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tusages: []\n\t\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"AES-CBC\":\n\t\t\t\tswitch (operation.toLowerCase()) {\n\t\t\t\t\tcase \"importkey\":\n\t\t\t\t\tcase \"exportkey\":\n\t\t\t\t\tcase \"generatekey\":\n\t\t\t\t\t\tresult = {\n\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\tname: \"AES-CBC\",\n\t\t\t\t\t\t\t\tlength: 256\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"decrypt\":\n\t\t\t\t\tcase \"encrypt\":\n\t\t\t\t\t\tresult = {\n\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\tname: \"AES-CBC\",\n\t\t\t\t\t\t\t\tiv: this.getRandomValues(new Uint8Array(16)) // For \"decrypt\" the value should be replaced with value got on \"encrypt\" step\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\tname: \"AES-CBC\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tusages: []\n\t\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"AES-GCM\":\n\t\t\t\tswitch (operation.toLowerCase()) {\n\t\t\t\t\tcase \"importkey\":\n\t\t\t\t\tcase \"exportkey\":\n\t\t\t\t\tcase \"generatekey\":\n\t\t\t\t\t\tresult = {\n\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\tname: \"AES-GCM\",\n\t\t\t\t\t\t\t\tlength: 256\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"decrypt\":\n\t\t\t\t\tcase \"encrypt\":\n\t\t\t\t\t\tresult = {\n\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\tname: \"AES-GCM\",\n\t\t\t\t\t\t\t\tiv: this.getRandomValues(new Uint8Array(16)) // For \"decrypt\" the value should be replaced with value got on \"encrypt\" step\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\tname: \"AES-GCM\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tusages: []\n\t\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"AES-KW\":\n\t\t\t\tswitch (operation.toLowerCase()) {\n\t\t\t\t\tcase \"importkey\":\n\t\t\t\t\tcase \"exportkey\":\n\t\t\t\t\tcase \"generatekey\":\n\t\t\t\t\tcase \"wrapkey\":\n\t\t\t\t\tcase \"unwrapkey\":\n\t\t\t\t\t\tresult = {\n\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\tname: \"AES-KW\",\n\t\t\t\t\t\t\t\tlength: 256\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tusages: [\"wrapKey\", \"unwrapKey\"]\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\tname: \"AES-KW\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tusages: []\n\t\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"HMAC\":\n\t\t\t\tswitch (operation.toLowerCase()) {\n\t\t\t\t\tcase \"sign\":\n\t\t\t\t\tcase \"verify\":\n\t\t\t\t\t\tresult = {\n\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\tname: \"HMAC\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"importkey\":\n\t\t\t\t\tcase \"exportkey\":\n\t\t\t\t\tcase \"generatekey\":\n\t\t\t\t\t\tresult = {\n\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\tname: \"HMAC\",\n\t\t\t\t\t\t\t\tlength: 32,\n\t\t\t\t\t\t\t\thash: {\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\tname: \"HMAC\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tusages: []\n\t\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"HKDF\":\n\t\t\t\tswitch (operation.toLowerCase()) {\n\t\t\t\t\tcase \"derivekey\":\n\t\t\t\t\t\tresult = {\n\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\tname: \"HKDF\",\n\t\t\t\t\t\t\t\thash: \"SHA-256\",\n\t\t\t\t\t\t\t\tsalt: new Uint8Array([]),\n\t\t\t\t\t\t\t\tinfo: new Uint8Array([])\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\"]\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\tname: \"HKDF\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tusages: []\n\t\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"PBKDF2\":\n\t\t\t\tswitch (operation.toLowerCase()) {\n\t\t\t\t\tcase \"derivekey\":\n\t\t\t\t\t\tresult = {\n\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\tname: \"PBKDF2\",\n\t\t\t\t\t\t\t\thash: { name: \"SHA-256\" },\n\t\t\t\t\t\t\t\tsalt: new Uint8Array([]),\n\t\t\t\t\t\t\t\titerations: 10000\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\"]\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\tname: \"PBKDF2\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tusages: []\n\t\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Getting hash algorithm by signature algorithm\r\n  * @param {AlgorithmIdentifier} signatureAlgorithm Signature algorithm\r\n  * @returns {string}\r\n  */\n\tgetHashAlgorithm(signatureAlgorithm) {\n\t\tlet result = \"\";\n\n\t\tswitch (signatureAlgorithm.algorithmId) {\n\t\t\tcase \"1.2.840.10045.4.1\": // ecdsa-with-SHA1\n\t\t\tcase \"1.2.840.113549.1.1.5\":\n\t\t\t\tresult = \"SHA-1\";\n\t\t\t\tbreak;\n\t\t\tcase \"1.2.840.10045.4.3.2\": // ecdsa-with-SHA256\n\t\t\tcase \"1.2.840.113549.1.1.11\":\n\t\t\t\tresult = \"SHA-256\";\n\t\t\t\tbreak;\n\t\t\tcase \"1.2.840.10045.4.3.3\": // ecdsa-with-SHA384\n\t\t\tcase \"1.2.840.113549.1.1.12\":\n\t\t\t\tresult = \"SHA-384\";\n\t\t\t\tbreak;\n\t\t\tcase \"1.2.840.10045.4.3.4\": // ecdsa-with-SHA512\n\t\t\tcase \"1.2.840.113549.1.1.13\":\n\t\t\t\tresult = \"SHA-512\";\n\t\t\t\tbreak;\n\t\t\tcase \"1.2.840.113549.1.1.10\":\n\t\t\t\t// RSA-PSS\n\t\t\t\t{\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst params = new _RSASSAPSSParams2.default({ schema: signatureAlgorithm.algorithmParams });\n\t\t\t\t\t\tif (\"hashAlgorithm\" in params) {\n\t\t\t\t\t\t\tconst algorithm = this.getAlgorithmByOID(params.hashAlgorithm.algorithmId);\n\t\t\t\t\t\t\tif (\"name\" in algorithm === false) return \"\";\n\n\t\t\t\t\t\t\tresult = algorithm.name;\n\t\t\t\t\t\t} else result = \"SHA-1\";\n\t\t\t\t\t} catch (ex) {}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Specialized function encrypting \"EncryptedContentInfo\" object using parameters\r\n  * @param {Object} parameters\r\n  * @returns {Promise}\r\n  */\n\tencryptEncryptedContentInfo(parameters) {\n\t\t//region Check for input parameters\n\t\tif (parameters instanceof Object === false) return Promise.reject(\"Parameters must have type \\\"Object\\\"\");\n\n\t\tif (\"password\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\n\n\t\tif (\"contentEncryptionAlgorithm\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"contentEncryptionAlgorithm\\\"\");\n\n\t\tif (\"hmacHashAlgorithm\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"hmacHashAlgorithm\\\"\");\n\n\t\tif (\"iterationCount\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"iterationCount\\\"\");\n\n\t\tif (\"contentToEncrypt\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"contentToEncrypt\\\"\");\n\n\t\tif (\"contentType\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"contentType\\\"\");\n\n\t\tconst contentEncryptionOID = this.getOIDByAlgorithm(parameters.contentEncryptionAlgorithm);\n\t\tif (contentEncryptionOID === \"\") return Promise.reject(\"Wrong \\\"contentEncryptionAlgorithm\\\" value\");\n\n\t\tconst pbkdf2OID = this.getOIDByAlgorithm({\n\t\t\tname: \"PBKDF2\"\n\t\t});\n\t\tif (pbkdf2OID === \"\") return Promise.reject(\"Can not find OID for PBKDF2\");\n\n\t\tconst hmacOID = this.getOIDByAlgorithm({\n\t\t\tname: \"HMAC\",\n\t\t\thash: {\n\t\t\t\tname: parameters.hmacHashAlgorithm\n\t\t\t}\n\t\t});\n\t\tif (hmacOID === \"\") return Promise.reject(`Incorrect value for \"hmacHashAlgorithm\": ${parameters.hmacHashAlgorithm}`);\n\t\t//endregion\n\n\t\t//region Initial variables\n\t\tlet sequence = Promise.resolve();\n\n\t\tconst ivBuffer = new ArrayBuffer(16); // For AES we need IV 16 bytes long\n\t\tconst ivView = new Uint8Array(ivBuffer);\n\t\tthis.getRandomValues(ivView);\n\n\t\tconst saltBuffer = new ArrayBuffer(64);\n\t\tconst saltView = new Uint8Array(saltBuffer);\n\t\tthis.getRandomValues(saltView);\n\n\t\tconst contentView = new Uint8Array(parameters.contentToEncrypt);\n\n\t\tconst pbkdf2Params = new _PBKDF2Params2.default({\n\t\t\tsalt: new asn1js.OctetString({ valueHex: saltBuffer }),\n\t\t\titerationCount: parameters.iterationCount,\n\t\t\tprf: new _AlgorithmIdentifier2.default({\n\t\t\t\talgorithmId: hmacOID,\n\t\t\t\talgorithmParams: new asn1js.Null()\n\t\t\t})\n\t\t});\n\t\t//endregion\n\n\t\t//region Derive PBKDF2 key from \"password\" buffer\n\t\tsequence = sequence.then(() => {\n\t\t\tconst passwordView = new Uint8Array(parameters.password);\n\n\t\t\treturn this.importKey(\"raw\", passwordView, \"PBKDF2\", false, [\"deriveKey\"]);\n\t\t}, error => Promise.reject(error));\n\t\t//endregion\n\n\t\t//region Derive key for \"contentEncryptionAlgorithm\"\n\t\tsequence = sequence.then(result => this.deriveKey({\n\t\t\tname: \"PBKDF2\",\n\t\t\thash: {\n\t\t\t\tname: parameters.hmacHashAlgorithm\n\t\t\t},\n\t\t\tsalt: saltView,\n\t\t\titerations: parameters.iterationCount\n\t\t}, result, parameters.contentEncryptionAlgorithm, false, [\"encrypt\"]), error => Promise.reject(error));\n\t\t//endregion\n\n\t\t//region Encrypt content\n\t\tsequence = sequence.then(result => this.encrypt({\n\t\t\tname: parameters.contentEncryptionAlgorithm.name,\n\t\t\tiv: ivView\n\t\t}, result, contentView), error => Promise.reject(error));\n\t\t//endregion\n\n\t\t//region Store all parameters in EncryptedData object\n\t\tsequence = sequence.then(result => {\n\t\t\tconst pbes2Parameters = new _PBES2Params2.default({\n\t\t\t\tkeyDerivationFunc: new _AlgorithmIdentifier2.default({\n\t\t\t\t\talgorithmId: pbkdf2OID,\n\t\t\t\t\talgorithmParams: pbkdf2Params.toSchema()\n\t\t\t\t}),\n\t\t\t\tencryptionScheme: new _AlgorithmIdentifier2.default({\n\t\t\t\t\talgorithmId: contentEncryptionOID,\n\t\t\t\t\talgorithmParams: new asn1js.OctetString({ valueHex: ivBuffer })\n\t\t\t\t})\n\t\t\t});\n\n\t\t\treturn new _EncryptedContentInfo2.default({\n\t\t\t\tcontentType: parameters.contentType,\n\t\t\t\tcontentEncryptionAlgorithm: new _AlgorithmIdentifier2.default({\n\t\t\t\t\talgorithmId: \"1.2.840.113549.1.5.13\", // pkcs5PBES2\n\t\t\t\t\talgorithmParams: pbes2Parameters.toSchema()\n\t\t\t\t}),\n\t\t\t\tencryptedContent: new asn1js.OctetString({ valueHex: result })\n\t\t\t});\n\t\t}, error => Promise.reject(error));\n\t\t//endregion\n\n\t\treturn sequence;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Decrypt data stored in \"EncryptedContentInfo\" object using parameters\r\n  * @param parameters\r\n  * @return {Promise}\r\n  */\n\tdecryptEncryptedContentInfo(parameters) {\n\t\t//region Check for input parameters\n\t\tif (parameters instanceof Object === false) return Promise.reject(\"Parameters must have type \\\"Object\\\"\");\n\n\t\tif (\"password\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\n\n\t\tif (\"encryptedContentInfo\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"encryptedContentInfo\\\"\");\n\n\t\tif (parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId !== \"1.2.840.113549.1.5.13\") // pkcs5PBES2\n\t\t\treturn Promise.reject(`Unknown \"contentEncryptionAlgorithm\": ${parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\n\t\t//endregion\n\n\t\t//region Initial variables\n\t\tlet sequence = Promise.resolve();\n\n\t\tlet pbes2Parameters;\n\n\t\ttry {\n\t\t\tpbes2Parameters = new _PBES2Params2.default({ schema: parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmParams });\n\t\t} catch (ex) {\n\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"pbes2Parameters\\\"\");\n\t\t}\n\n\t\tlet pbkdf2Params;\n\n\t\ttry {\n\t\t\tpbkdf2Params = new _PBKDF2Params2.default({ schema: pbes2Parameters.keyDerivationFunc.algorithmParams });\n\t\t} catch (ex) {\n\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"pbkdf2Params\\\"\");\n\t\t}\n\n\t\tconst contentEncryptionAlgorithm = this.getAlgorithmByOID(pbes2Parameters.encryptionScheme.algorithmId);\n\t\tif (\"name\" in contentEncryptionAlgorithm === false) return Promise.reject(`Incorrect OID for \"contentEncryptionAlgorithm\": ${pbes2Parameters.encryptionScheme.algorithmId}`);\n\n\t\tconst ivBuffer = pbes2Parameters.encryptionScheme.algorithmParams.valueBlock.valueHex;\n\t\tconst ivView = new Uint8Array(ivBuffer);\n\n\t\tconst saltBuffer = pbkdf2Params.salt.valueBlock.valueHex;\n\t\tconst saltView = new Uint8Array(saltBuffer);\n\n\t\tconst iterationCount = pbkdf2Params.iterationCount;\n\n\t\tlet hmacHashAlgorithm = \"SHA-1\";\n\n\t\tif (\"prf\" in pbkdf2Params) {\n\t\t\tconst algorithm = this.getAlgorithmByOID(pbkdf2Params.prf.algorithmId);\n\t\t\tif (\"name\" in algorithm === false) return Promise.reject(\"Incorrect OID for HMAC hash algorithm\");\n\n\t\t\thmacHashAlgorithm = algorithm.hash.name;\n\t\t}\n\t\t//endregion\n\n\t\t//region Derive PBKDF2 key from \"password\" buffer\n\t\tsequence = sequence.then(() => this.importKey(\"raw\", parameters.password, \"PBKDF2\", false, [\"deriveKey\"]), error => Promise.reject(error));\n\t\t//endregion\n\n\t\t//region Derive key for \"contentEncryptionAlgorithm\"\n\t\tsequence = sequence.then(result => this.deriveKey({\n\t\t\tname: \"PBKDF2\",\n\t\t\thash: {\n\t\t\t\tname: hmacHashAlgorithm\n\t\t\t},\n\t\t\tsalt: saltView,\n\t\t\titerations: iterationCount\n\t\t}, result, contentEncryptionAlgorithm, false, [\"decrypt\"]), error => Promise.reject(error));\n\t\t//endregion\n\n\t\t//region Decrypt internal content using derived key\n\t\tsequence = sequence.then(result => {\n\t\t\t//region Create correct data block for decryption\n\t\t\tlet dataBuffer = new ArrayBuffer(0);\n\n\t\t\tif (parameters.encryptedContentInfo.encryptedContent.idBlock.isConstructed === false) dataBuffer = parameters.encryptedContentInfo.encryptedContent.valueBlock.valueHex;else {\n\t\t\t\tvar _iteratorNormalCompletion7 = true;\n\t\t\t\tvar _didIteratorError7 = false;\n\t\t\t\tvar _iteratorError7 = undefined;\n\n\t\t\t\ttry {\n\t\t\t\t\tfor (var _iterator7 = parameters.encryptedContentInfo.encryptedContent.valueBlock.value[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n\t\t\t\t\t\tconst content = _step7.value;\n\n\t\t\t\t\t\tdataBuffer = (0, _pvutils.utilConcatBuf)(dataBuffer, content.valueBlock.valueHex);\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\t_didIteratorError7 = true;\n\t\t\t\t\t_iteratorError7 = err;\n\t\t\t\t} finally {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!_iteratorNormalCompletion7 && _iterator7.return) {\n\t\t\t\t\t\t\t_iterator7.return();\n\t\t\t\t\t\t}\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tif (_didIteratorError7) {\n\t\t\t\t\t\t\tthrow _iteratorError7;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t//endregion\n\n\t\t\treturn this.decrypt({\n\t\t\t\tname: contentEncryptionAlgorithm.name,\n\t\t\t\tiv: ivView\n\t\t\t}, result, dataBuffer);\n\t\t}, error => Promise.reject(error));\n\t\t//endregion\n\n\t\treturn sequence;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Stamping (signing) data using algorithm simular to HMAC\r\n  * @param {Object} parameters\r\n  * @return {Promise.<T>|Promise}\r\n  */\n\tstampDataWithPassword(parameters) {\n\t\t//region Check for input parameters\n\t\tif (parameters instanceof Object === false) return Promise.reject(\"Parameters must have type \\\"Object\\\"\");\n\n\t\tif (\"password\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\n\n\t\tif (\"hashAlgorithm\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"hashAlgorithm\\\"\");\n\n\t\tif (\"salt\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"iterationCount\\\"\");\n\n\t\tif (\"iterationCount\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"salt\\\"\");\n\n\t\tif (\"contentToStamp\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"contentToStamp\\\"\");\n\t\t//endregion\n\n\t\t//region Choose correct length for HMAC key\n\t\tlet length;\n\n\t\tswitch (parameters.hashAlgorithm.toLowerCase()) {\n\t\t\tcase \"sha-1\":\n\t\t\t\tlength = 160;\n\t\t\t\tbreak;\n\t\t\tcase \"sha-256\":\n\t\t\t\tlength = 256;\n\t\t\t\tbreak;\n\t\t\tcase \"sha-384\":\n\t\t\t\tlength = 384;\n\t\t\t\tbreak;\n\t\t\tcase \"sha-512\":\n\t\t\t\tlength = 512;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn Promise.reject(`Incorrect \"parameters.hashAlgorithm\" parameter: ${parameters.hashAlgorithm}`);\n\t\t}\n\t\t//endregion\n\n\t\t//region Initial variables\n\t\tlet sequence = Promise.resolve();\n\n\t\tconst hmacAlgorithm = {\n\t\t\tname: \"HMAC\",\n\t\t\tlength,\n\t\t\thash: {\n\t\t\t\tname: parameters.hashAlgorithm\n\t\t\t}\n\t\t};\n\t\t//endregion\n\n\t\t//region Create PKCS#12 key for integrity checking\n\t\tsequence = sequence.then(() => makePKCS12B2Key(this, parameters.hashAlgorithm, length, parameters.password, parameters.salt, parameters.iterationCount));\n\t\t//endregion\n\n\t\t//region Import HMAC key\n\t\t// noinspection JSCheckFunctionSignatures\n\t\tsequence = sequence.then(result => this.importKey(\"raw\", new Uint8Array(result), hmacAlgorithm, false, [\"sign\"]));\n\t\t//endregion\n\n\t\t//region Make signed HMAC value\n\t\tsequence = sequence.then(result => this.sign(hmacAlgorithm, result, new Uint8Array(parameters.contentToStamp)), error => Promise.reject(error));\n\t\t//endregion\n\n\t\treturn sequence;\n\t}\n\t//**********************************************************************************\n\tverifyDataStampedWithPassword(parameters) {\n\t\t//region Check for input parameters\n\t\tif (parameters instanceof Object === false) return Promise.reject(\"Parameters must have type \\\"Object\\\"\");\n\n\t\tif (\"password\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\n\n\t\tif (\"hashAlgorithm\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"hashAlgorithm\\\"\");\n\n\t\tif (\"salt\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"iterationCount\\\"\");\n\n\t\tif (\"iterationCount\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"salt\\\"\");\n\n\t\tif (\"contentToVerify\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"contentToVerify\\\"\");\n\n\t\tif (\"signatureToVerify\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"signatureToVerify\\\"\");\n\t\t//endregion\n\n\t\t//region Choose correct length for HMAC key\n\t\tlet length;\n\n\t\tswitch (parameters.hashAlgorithm.toLowerCase()) {\n\t\t\tcase \"sha-1\":\n\t\t\t\tlength = 160;\n\t\t\t\tbreak;\n\t\t\tcase \"sha-256\":\n\t\t\t\tlength = 256;\n\t\t\t\tbreak;\n\t\t\tcase \"sha-384\":\n\t\t\t\tlength = 384;\n\t\t\t\tbreak;\n\t\t\tcase \"sha-512\":\n\t\t\t\tlength = 512;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn Promise.reject(`Incorrect \"parameters.hashAlgorithm\" parameter: ${parameters.hashAlgorithm}`);\n\t\t}\n\t\t//endregion\n\n\t\t//region Initial variables\n\t\tlet sequence = Promise.resolve();\n\n\t\tconst hmacAlgorithm = {\n\t\t\tname: \"HMAC\",\n\t\t\tlength,\n\t\t\thash: {\n\t\t\t\tname: parameters.hashAlgorithm\n\t\t\t}\n\t\t};\n\t\t//endregion\n\n\t\t//region Create PKCS#12 key for integrity checking\n\t\tsequence = sequence.then(() => makePKCS12B2Key(this, parameters.hashAlgorithm, length, parameters.password, parameters.salt, parameters.iterationCount));\n\t\t//endregion\n\n\t\t//region Import HMAC key\n\t\t// noinspection JSCheckFunctionSignatures\n\t\tsequence = sequence.then(result => this.importKey(\"raw\", new Uint8Array(result), hmacAlgorithm, false, [\"verify\"]));\n\t\t//endregion\n\n\t\t//region Make signed HMAC value\n\t\tsequence = sequence.then(result => this.verify(hmacAlgorithm, result, new Uint8Array(parameters.signatureToVerify), new Uint8Array(parameters.contentToVerify)), error => Promise.reject(error));\n\t\t//endregion\n\n\t\treturn sequence;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Get signature parameters by analyzing private key algorithm\r\n  * @param {Object} privateKey The private key user would like to use\r\n  * @param {string} [hashAlgorithm=\"SHA-1\"] Hash algorithm user would like to use\r\n  * @return {Promise.<T>|Promise}\r\n  */\n\tgetSignatureParameters(privateKey, hashAlgorithm = \"SHA-1\") {\n\t\t//region Check hashing algorithm\n\t\tconst oid = this.getOIDByAlgorithm({ name: hashAlgorithm });\n\t\tif (oid === \"\") return Promise.reject(`Unsupported hash algorithm: ${hashAlgorithm}`);\n\t\t//endregion\n\n\t\t//region Initial variables\n\t\tconst signatureAlgorithm = new _AlgorithmIdentifier2.default();\n\t\t//endregion\n\n\t\t//region Get a \"default parameters\" for current algorithm\n\t\tconst parameters = this.getAlgorithmParameters(privateKey.algorithm.name, \"sign\");\n\t\tparameters.algorithm.hash.name = hashAlgorithm;\n\t\t//endregion\n\n\t\t//region Fill internal structures base on \"privateKey\" and \"hashAlgorithm\"\n\t\tswitch (privateKey.algorithm.name.toUpperCase()) {\n\t\t\tcase \"RSASSA-PKCS1-V1_5\":\n\t\t\tcase \"ECDSA\":\n\t\t\t\tsignatureAlgorithm.algorithmId = this.getOIDByAlgorithm(parameters.algorithm);\n\t\t\t\tbreak;\n\t\t\tcase \"RSA-PSS\":\n\t\t\t\t{\n\t\t\t\t\t//region Set \"saltLength\" as a length (in octets) of hash function result\n\t\t\t\t\tswitch (hashAlgorithm.toUpperCase()) {\n\t\t\t\t\t\tcase \"SHA-256\":\n\t\t\t\t\t\t\tparameters.algorithm.saltLength = 32;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"SHA-384\":\n\t\t\t\t\t\t\tparameters.algorithm.saltLength = 48;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"SHA-512\":\n\t\t\t\t\t\t\tparameters.algorithm.saltLength = 64;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t}\n\t\t\t\t\t//endregion\n\n\t\t\t\t\t//region Fill \"RSASSA_PSS_params\" object\n\t\t\t\t\tconst paramsObject = {};\n\n\t\t\t\t\tif (hashAlgorithm.toUpperCase() !== \"SHA-1\") {\n\t\t\t\t\t\tconst hashAlgorithmOID = this.getOIDByAlgorithm({ name: hashAlgorithm });\n\t\t\t\t\t\tif (hashAlgorithmOID === \"\") return Promise.reject(`Unsupported hash algorithm: ${hashAlgorithm}`);\n\n\t\t\t\t\t\tparamsObject.hashAlgorithm = new _AlgorithmIdentifier2.default({\n\t\t\t\t\t\t\talgorithmId: hashAlgorithmOID,\n\t\t\t\t\t\t\talgorithmParams: new asn1js.Null()\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tparamsObject.maskGenAlgorithm = new _AlgorithmIdentifier2.default({\n\t\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.8\", // MGF1\n\t\t\t\t\t\t\talgorithmParams: paramsObject.hashAlgorithm.toSchema()\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tif (parameters.algorithm.saltLength !== 20) paramsObject.saltLength = parameters.algorithm.saltLength;\n\n\t\t\t\t\tconst pssParameters = new _RSASSAPSSParams2.default(paramsObject);\n\t\t\t\t\t//endregion\n\n\t\t\t\t\t//region Automatically set signature algorithm\n\t\t\t\t\tsignatureAlgorithm.algorithmId = \"1.2.840.113549.1.1.10\";\n\t\t\t\t\tsignatureAlgorithm.algorithmParams = pssParameters.toSchema();\n\t\t\t\t\t//endregion\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${privateKey.algorithm.name}`);\n\t\t}\n\t\t//endregion\n\n\t\treturn Promise.resolve().then(() => ({\n\t\t\tsignatureAlgorithm,\n\t\t\tparameters\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Sign data with pre-defined private key\r\n  * @param {ArrayBuffer} data Data to be signed\r\n  * @param {Object} privateKey Private key to use\r\n  * @param {Object} parameters Parameters for used algorithm\r\n  * @return {Promise.<T>|Promise}\r\n  */\n\tsignWithPrivateKey(data, privateKey, parameters) {\n\t\treturn this.sign(parameters.algorithm, privateKey, new Uint8Array(data)).then(result => {\n\t\t\t//region Special case for ECDSA algorithm\n\t\t\tif (parameters.algorithm.name === \"ECDSA\") result = (0, _common.createCMSECDSASignature)(result);\n\t\t\t//endregion\n\n\t\t\treturn result;\n\t\t}, error => Promise.reject(`Signing error: ${error}`));\n\t}\n\t//**********************************************************************************\n\tfillPublicKeyParameters(publicKeyInfo, signatureAlgorithm) {\n\t\tconst parameters = {};\n\n\t\t//region Find signer's hashing algorithm\n\t\tconst shaAlgorithm = this.getHashAlgorithm(signatureAlgorithm);\n\t\tif (shaAlgorithm === \"\") return Promise.reject(`Unsupported signature algorithm: ${signatureAlgorithm.algorithmId}`);\n\t\t//endregion\n\n\t\t//region Get information about public key algorithm and default parameters for import\n\t\tlet algorithmId;\n\t\tif (signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.10\") algorithmId = signatureAlgorithm.algorithmId;else algorithmId = publicKeyInfo.algorithm.algorithmId;\n\n\t\tconst algorithmObject = this.getAlgorithmByOID(algorithmId);\n\t\tif (\"name\" in algorithmObject === \"\") return Promise.reject(`Unsupported public key algorithm: ${signatureAlgorithm.algorithmId}`);\n\n\t\tparameters.algorithm = this.getAlgorithmParameters(algorithmObject.name, \"importkey\");\n\t\tif (\"hash\" in parameters.algorithm.algorithm) parameters.algorithm.algorithm.hash.name = shaAlgorithm;\n\n\t\t//region Special case for ECDSA\n\t\tif (algorithmObject.name === \"ECDSA\") {\n\t\t\t//region Get information about named curve\n\t\t\tlet algorithmParamsChecked = false;\n\n\t\t\tif (\"algorithmParams\" in publicKeyInfo.algorithm === true) {\n\t\t\t\tif (\"idBlock\" in publicKeyInfo.algorithm.algorithmParams) {\n\t\t\t\t\tif (publicKeyInfo.algorithm.algorithmParams.idBlock.tagClass === 1 && publicKeyInfo.algorithm.algorithmParams.idBlock.tagNumber === 6) algorithmParamsChecked = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (algorithmParamsChecked === false) return Promise.reject(\"Incorrect type for ECDSA public key parameters\");\n\n\t\t\tconst curveObject = this.getAlgorithmByOID(publicKeyInfo.algorithm.algorithmParams.valueBlock.toString());\n\t\t\tif (\"name\" in curveObject === false) return Promise.reject(`Unsupported named curve algorithm: ${publicKeyInfo.algorithm.algorithmParams.valueBlock.toString()}`);\n\t\t\t//endregion\n\n\t\t\tparameters.algorithm.algorithm.namedCurve = curveObject.name;\n\t\t}\n\t\t//endregion\n\t\t//endregion\n\n\t\treturn parameters;\n\t}\n\t//**********************************************************************************\n\tgetPublicKey(publicKeyInfo, signatureAlgorithm, parameters = null) {\n\t\tif (parameters === null) parameters = this.fillPublicKeyParameters(publicKeyInfo, signatureAlgorithm);\n\n\t\tconst publicKeyInfoSchema = publicKeyInfo.toSchema();\n\t\tconst publicKeyInfoBuffer = publicKeyInfoSchema.toBER(false);\n\t\tconst publicKeyInfoView = new Uint8Array(publicKeyInfoBuffer);\n\n\t\treturn this.importKey(\"spki\", publicKeyInfoView, parameters.algorithm.algorithm, true, parameters.algorithm.usages);\n\t}\n\t//**********************************************************************************\n\tverifyWithPublicKey(data, signature, publicKeyInfo, signatureAlgorithm, shaAlgorithm = null) {\n\t\t//region Initial variables\n\t\tlet sequence = Promise.resolve();\n\t\t//endregion\n\n\t\t//region Find signer's hashing algorithm\n\t\tif (shaAlgorithm === null) {\n\t\t\tshaAlgorithm = this.getHashAlgorithm(signatureAlgorithm);\n\t\t\tif (shaAlgorithm === \"\") return Promise.reject(`Unsupported signature algorithm: ${signatureAlgorithm.algorithmId}`);\n\n\t\t\t//region Import public key\n\t\t\tsequence = sequence.then(() => this.getPublicKey(publicKeyInfo, signatureAlgorithm));\n\t\t\t//endregion\n\t\t} else {\n\t\t\tconst parameters = {};\n\n\t\t\t//region Get information about public key algorithm and default parameters for import\n\t\t\tlet algorithmId;\n\t\t\tif (signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.10\") algorithmId = signatureAlgorithm.algorithmId;else algorithmId = publicKeyInfo.algorithm.algorithmId;\n\n\t\t\tconst algorithmObject = this.getAlgorithmByOID(algorithmId);\n\t\t\tif (\"name\" in algorithmObject === \"\") return Promise.reject(`Unsupported public key algorithm: ${signatureAlgorithm.algorithmId}`);\n\n\t\t\tparameters.algorithm = this.getAlgorithmParameters(algorithmObject.name, \"importkey\");\n\t\t\tif (\"hash\" in parameters.algorithm.algorithm) parameters.algorithm.algorithm.hash.name = shaAlgorithm;\n\n\t\t\t//region Special case for ECDSA\n\t\t\tif (algorithmObject.name === \"ECDSA\") {\n\t\t\t\t//region Get information about named curve\n\t\t\t\tlet algorithmParamsChecked = false;\n\n\t\t\t\tif (\"algorithmParams\" in publicKeyInfo.algorithm === true) {\n\t\t\t\t\tif (\"idBlock\" in publicKeyInfo.algorithm.algorithmParams) {\n\t\t\t\t\t\tif (publicKeyInfo.algorithm.algorithmParams.idBlock.tagClass === 1 && publicKeyInfo.algorithm.algorithmParams.idBlock.tagNumber === 6) algorithmParamsChecked = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (algorithmParamsChecked === false) return Promise.reject(\"Incorrect type for ECDSA public key parameters\");\n\n\t\t\t\tconst curveObject = this.getAlgorithmByOID(publicKeyInfo.algorithm.algorithmParams.valueBlock.toString());\n\t\t\t\tif (\"name\" in curveObject === false) return Promise.reject(`Unsupported named curve algorithm: ${publicKeyInfo.algorithm.algorithmParams.valueBlock.toString()}`);\n\t\t\t\t//endregion\n\n\t\t\t\tparameters.algorithm.algorithm.namedCurve = curveObject.name;\n\t\t\t}\n\t\t\t//endregion\n\t\t\t//endregion\n\n\t\t\t//region Import public key\n\t\t\tsequence = sequence.then(() => this.getPublicKey(publicKeyInfo, null, parameters));\n\t\t\t//endregion\n\t\t}\n\t\t//endregion\n\n\t\t//region Verify signature\n\t\tsequence = sequence.then(publicKey => {\n\t\t\t//region Get default algorithm parameters for verification\n\t\t\tconst algorithm = this.getAlgorithmParameters(publicKey.algorithm.name, \"verify\");\n\t\t\tif (\"hash\" in algorithm.algorithm) algorithm.algorithm.hash.name = shaAlgorithm;\n\t\t\t//endregion\n\n\t\t\t//region Special case for ECDSA signatures\n\t\t\tlet signatureValue = signature.valueBlock.valueHex;\n\n\t\t\tif (publicKey.algorithm.name === \"ECDSA\") {\n\t\t\t\tconst asn1 = asn1js.fromBER(signatureValue);\n\t\t\t\t// noinspection JSCheckFunctionSignatures\n\t\t\t\tsignatureValue = (0, _common.createECDSASignatureFromCMS)(asn1.result);\n\t\t\t}\n\t\t\t//endregion\n\n\t\t\t//region Special case for RSA-PSS\n\t\t\tif (publicKey.algorithm.name === \"RSA-PSS\") {\n\t\t\t\tlet pssParameters;\n\n\t\t\t\ttry {\n\t\t\t\t\tpssParameters = new _RSASSAPSSParams2.default({ schema: signatureAlgorithm.algorithmParams });\n\t\t\t\t} catch (ex) {\n\t\t\t\t\treturn Promise.reject(ex);\n\t\t\t\t}\n\n\t\t\t\tif (\"saltLength\" in pssParameters) algorithm.algorithm.saltLength = pssParameters.saltLength;else algorithm.algorithm.saltLength = 20;\n\n\t\t\t\tlet hashAlgo = \"SHA-1\";\n\n\t\t\t\tif (\"hashAlgorithm\" in pssParameters) {\n\t\t\t\t\tconst hashAlgorithm = this.getAlgorithmByOID(pssParameters.hashAlgorithm.algorithmId);\n\t\t\t\t\tif (\"name\" in hashAlgorithm === false) return Promise.reject(`Unrecognized hash algorithm: ${pssParameters.hashAlgorithm.algorithmId}`);\n\n\t\t\t\t\thashAlgo = hashAlgorithm.name;\n\t\t\t\t}\n\n\t\t\t\talgorithm.algorithm.hash.name = hashAlgo;\n\t\t\t}\n\t\t\t//endregion\n\n\t\t\treturn this.verify(algorithm.algorithm, publicKey, new Uint8Array(signatureValue), new Uint8Array(data));\n\t\t});\n\t\t//endregion\n\n\t\treturn sequence;\n\t}\n\t//**********************************************************************************\n}\nexports.default = CryptoEngine; //**************************************************************************************\n//# sourceMappingURL=CryptoEngine.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n/**\r\n * Class from RFC5480\r\n */\nclass ECPublicKey {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for ECCPublicKey class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\t/**\r\n   * @type {ArrayBuffer}\r\n   * @desc type\r\n   */\n\t\tthis.x = (0, _pvutils.getParametersValue)(parameters, \"x\", ECPublicKey.defaultValues(\"x\"));\n\t\t/**\r\n   * @type {ArrayBuffer}\r\n   * @desc values\r\n   */\n\t\tthis.y = (0, _pvutils.getParametersValue)(parameters, \"y\", ECPublicKey.defaultValues(\"y\"));\n\t\t/**\r\n   * @type {string}\r\n   * @desc namedCurve\r\n   */\n\t\tthis.namedCurve = (0, _pvutils.getParametersValue)(parameters, \"namedCurve\", ECPublicKey.defaultValues(\"namedCurve\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t\t//region If input argument array contains \"json\" for this object\n\t\tif (\"json\" in parameters) this.fromJSON(parameters.json);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"x\":\n\t\t\tcase \"y\":\n\t\t\t\treturn new ArrayBuffer(0);\n\t\t\tcase \"namedCurve\":\n\t\t\t\treturn \"\";\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for ECCPublicKey class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Compare values with default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  * @param {*} memberValue Value to compare with default value\r\n  */\n\tstatic compareWithDefault(memberName, memberValue) {\n\t\tswitch (memberName) {\n\t\t\tcase \"x\":\n\t\t\tcase \"y\":\n\t\t\t\treturn (0, _pvutils.isEqualBuffer)(memberValue, ECPublicKey.defaultValues(memberName));\n\t\t\tcase \"namedCurve\":\n\t\t\t\treturn memberValue === \"\";\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for ECCPublicKey class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}) {\n\t\treturn new asn1js.RawData();\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert ArrayBuffer into current class\r\n  * @param {!ArrayBuffer} schema Special case: schema is an ArrayBuffer\r\n  */\n\tfromSchema(schema) {\n\t\t//region Check the schema is valid\n\t\tif (schema instanceof ArrayBuffer === false) throw new Error(\"Object's schema was not verified against input data for ECPublicKey\");\n\n\t\tconst view = new Uint8Array(schema);\n\t\tif (view[0] !== 0x04) throw new Error(\"Object's schema was not verified against input data for ECPublicKey\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tlet coordinateLength;\n\n\t\tswitch (this.namedCurve) {\n\t\t\tcase \"1.2.840.10045.3.1.7\":\n\t\t\t\t// P-256\n\t\t\t\tcoordinateLength = 32;\n\t\t\t\tbreak;\n\t\t\tcase \"1.3.132.0.34\":\n\t\t\t\t// P-384\n\t\t\t\tcoordinateLength = 48;\n\t\t\t\tbreak;\n\t\t\tcase \"1.3.132.0.35\":\n\t\t\t\t// P-521\n\t\t\t\tcoordinateLength = 66;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Incorrect curve OID: ${this.namedCurve}`);\n\t\t}\n\n\t\tif (schema.byteLength !== coordinateLength * 2 + 1) throw new Error(\"Object's schema was not verified against input data for ECPublicKey\");\n\n\t\tthis.x = schema.slice(1, coordinateLength + 1);\n\t\tthis.y = schema.slice(1 + coordinateLength, coordinateLength * 2 + 1);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\treturn new asn1js.RawData({ data: (0, _pvutils.utilConcatBuf)(new Uint8Array([0x04]).buffer, this.x, this.y)\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\tlet crvName = \"\";\n\n\t\tswitch (this.namedCurve) {\n\t\t\tcase \"1.2.840.10045.3.1.7\":\n\t\t\t\t// P-256\n\t\t\t\tcrvName = \"P-256\";\n\t\t\t\tbreak;\n\t\t\tcase \"1.3.132.0.34\":\n\t\t\t\t// P-384\n\t\t\t\tcrvName = \"P-384\";\n\t\t\t\tbreak;\n\t\t\tcase \"1.3.132.0.35\":\n\t\t\t\t// P-521\n\t\t\t\tcrvName = \"P-521\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\n\t\treturn {\n\t\t\tcrv: crvName,\n\t\t\tx: (0, _pvutils.toBase64)((0, _pvutils.arrayBufferToString)(this.x), true, true, false),\n\t\t\ty: (0, _pvutils.toBase64)((0, _pvutils.arrayBufferToString)(this.y), true, true, false)\n\t\t};\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert JSON value into current object\r\n  * @param {Object} json\r\n  */\n\tfromJSON(json) {\n\t\tlet coodinateLength = 0;\n\n\t\tif (\"crv\" in json) {\n\t\t\tswitch (json.crv.toUpperCase()) {\n\t\t\t\tcase \"P-256\":\n\t\t\t\t\tthis.namedCurve = \"1.2.840.10045.3.1.7\";\n\t\t\t\t\tcoodinateLength = 32;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"P-384\":\n\t\t\t\t\tthis.namedCurve = \"1.3.132.0.34\";\n\t\t\t\t\tcoodinateLength = 48;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"P-521\":\n\t\t\t\t\tthis.namedCurve = \"1.3.132.0.35\";\n\t\t\t\t\tcoodinateLength = 66;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t}\n\t\t} else throw new Error(\"Absent mandatory parameter \\\"crv\\\"\");\n\n\t\tif (\"x\" in json) {\n\t\t\tconst convertBuffer = (0, _pvutils.stringToArrayBuffer)((0, _pvutils.fromBase64)(json.x, true));\n\n\t\t\tif (convertBuffer.byteLength < coodinateLength) {\n\t\t\t\tthis.x = new ArrayBuffer(coodinateLength);\n\t\t\t\tconst view = new Uint8Array(this.x);\n\t\t\t\tconst convertBufferView = new Uint8Array(convertBuffer);\n\t\t\t\tview.set(convertBufferView, 1);\n\t\t\t} else this.x = convertBuffer.slice(0, coodinateLength);\n\t\t} else throw new Error(\"Absent mandatory parameter \\\"x\\\"\");\n\n\t\tif (\"y\" in json) {\n\t\t\tconst convertBuffer = (0, _pvutils.stringToArrayBuffer)((0, _pvutils.fromBase64)(json.y, true));\n\n\t\t\tif (convertBuffer.byteLength < coodinateLength) {\n\t\t\t\tthis.y = new ArrayBuffer(coodinateLength);\n\t\t\t\tconst view = new Uint8Array(this.y);\n\t\t\t\tconst convertBufferView = new Uint8Array(convertBuffer);\n\t\t\t\tview.set(convertBufferView, 1);\n\t\t\t} else this.y = convertBuffer.slice(0, coodinateLength);\n\t\t} else throw new Error(\"Absent mandatory parameter \\\"y\\\"\");\n\t}\n\t//**********************************************************************************\n}\nexports.default = ECPublicKey; //**************************************************************************************\n//# sourceMappingURL=ECPublicKey.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nvar _AlgorithmIdentifier = require(\"./AlgorithmIdentifier.js\");\n\nvar _AlgorithmIdentifier2 = _interopRequireDefault(_AlgorithmIdentifier);\n\nvar _Attribute = require(\"./Attribute.js\");\n\nvar _Attribute2 = _interopRequireDefault(_Attribute);\n\nvar _ECPrivateKey = require(\"./ECPrivateKey.js\");\n\nvar _ECPrivateKey2 = _interopRequireDefault(_ECPrivateKey);\n\nvar _RSAPrivateKey = require(\"./RSAPrivateKey.js\");\n\nvar _RSAPrivateKey2 = _interopRequireDefault(_RSAPrivateKey);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n/**\r\n * Class from RFC5208\r\n */\nclass PrivateKeyInfo {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for PrivateKeyInfo class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\t/**\r\n   * @type {number}\r\n   * @desc version\r\n   */\n\t\tthis.version = (0, _pvutils.getParametersValue)(parameters, \"version\", PrivateKeyInfo.defaultValues(\"version\"));\n\t\t/**\r\n   * @type {AlgorithmIdentifier}\r\n   * @desc privateKeyAlgorithm\r\n   */\n\t\tthis.privateKeyAlgorithm = (0, _pvutils.getParametersValue)(parameters, \"privateKeyAlgorithm\", PrivateKeyInfo.defaultValues(\"privateKeyAlgorithm\"));\n\t\t/**\r\n   * @type {OctetString}\r\n   * @desc privateKey\r\n   */\n\t\tthis.privateKey = (0, _pvutils.getParametersValue)(parameters, \"privateKey\", PrivateKeyInfo.defaultValues(\"privateKey\"));\n\n\t\tif (\"attributes\" in parameters)\n\t\t\t/**\r\n    * @type {Array.<Attribute>}\r\n    * @desc attributes\r\n    */\n\t\t\tthis.attributes = (0, _pvutils.getParametersValue)(parameters, \"attributes\", PrivateKeyInfo.defaultValues(\"attributes\"));\n\n\t\tif (\"parsedKey\" in parameters)\n\t\t\t/**\r\n    * @type {ECPrivateKey|RSAPrivateKey}\r\n    * @desc Parsed public key value\r\n    */\n\t\t\tthis.parsedKey = (0, _pvutils.getParametersValue)(parameters, \"parsedKey\", PrivateKeyInfo.defaultValues(\"parsedKey\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t\t//region If input argument array contains \"json\" for this object\n\t\tif (\"json\" in parameters) this.fromJSON(parameters.json);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"version\":\n\t\t\t\treturn 0;\n\t\t\tcase \"privateKeyAlgorithm\":\n\t\t\t\treturn new _AlgorithmIdentifier2.default();\n\t\t\tcase \"privateKey\":\n\t\t\t\treturn new asn1js.OctetString();\n\t\t\tcase \"attributes\":\n\t\t\t\treturn [];\n\t\t\tcase \"parsedKey\":\n\t\t\t\treturn {};\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for PrivateKeyInfo class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * PrivateKeyInfo ::= SEQUENCE {\r\n  *    version Version,\r\n  *    privateKeyAlgorithm AlgorithmIdentifier {{PrivateKeyAlgorithms}},\r\n  *    privateKey PrivateKey,\r\n  *    attributes [0] Attributes OPTIONAL }\r\n  *\r\n  * Version ::= INTEGER {v1(0)} (v1,...)\r\n  *\r\n  * PrivateKey ::= OCTET STRING\r\n  *\r\n  * Attributes ::= SET OF Attribute\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}) {\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} [blockName]\r\n   * @property {string} [version]\r\n   * @property {string} [privateKeyAlgorithm]\r\n   * @property {string} [privateKey]\r\n   * @property {string} [attributes]\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\treturn new asn1js.Sequence({\n\t\t\tname: names.blockName || \"\",\n\t\t\tvalue: [new asn1js.Integer({ name: names.version || \"\" }), _AlgorithmIdentifier2.default.schema(names.privateKeyAlgorithm || {}), new asn1js.OctetString({ name: names.privateKey || \"\" }), new asn1js.Constructed({\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalue: [new asn1js.Repeated({\n\t\t\t\t\tname: names.attributes || \"\",\n\t\t\t\t\tvalue: _Attribute2.default.schema()\n\t\t\t\t})]\n\t\t\t})]\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Clear input data first\n\t\t(0, _pvutils.clearProps)(schema, [\"version\", \"privateKeyAlgorithm\", \"privateKey\", \"attributes\"]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, PrivateKeyInfo.schema({\n\t\t\tnames: {\n\t\t\t\tversion: \"version\",\n\t\t\t\tprivateKeyAlgorithm: {\n\t\t\t\t\tnames: {\n\t\t\t\t\t\tblockName: \"privateKeyAlgorithm\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tprivateKey: \"privateKey\",\n\t\t\t\tattributes: \"attributes\"\n\t\t\t}\n\t\t}));\n\n\t\tif (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for PrivateKeyInfo\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\n\t\tthis.privateKeyAlgorithm = new _AlgorithmIdentifier2.default({ schema: asn1.result.privateKeyAlgorithm });\n\t\tthis.privateKey = asn1.result.privateKey;\n\n\t\tif (\"attributes\" in asn1.result) this.attributes = Array.from(asn1.result.attributes, element => new _Attribute2.default({ schema: element }));\n\n\t\tswitch (this.privateKeyAlgorithm.algorithmId) {\n\t\t\tcase \"1.2.840.113549.1.1.1\":\n\t\t\t\t// RSA\n\t\t\t\t{\n\t\t\t\t\tconst privateKeyASN1 = asn1js.fromBER(this.privateKey.valueBlock.valueHex);\n\t\t\t\t\tif (privateKeyASN1.offset !== -1) this.parsedKey = new _RSAPrivateKey2.default({ schema: privateKeyASN1.result });\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"1.2.840.10045.2.1\":\n\t\t\t\t// ECDSA\n\t\t\t\tif (\"algorithmParams\" in this.privateKeyAlgorithm) {\n\t\t\t\t\tif (this.privateKeyAlgorithm.algorithmParams instanceof asn1js.ObjectIdentifier) {\n\t\t\t\t\t\tconst privateKeyASN1 = asn1js.fromBER(this.privateKey.valueBlock.valueHex);\n\t\t\t\t\t\tif (privateKeyASN1.offset !== -1) {\n\t\t\t\t\t\t\tthis.parsedKey = new _ECPrivateKey2.default({\n\t\t\t\t\t\t\t\tnamedCurve: this.privateKeyAlgorithm.algorithmParams.valueBlock.toString(),\n\t\t\t\t\t\t\t\tschema: privateKeyASN1.result\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\t//region Create array for output sequence\n\t\tconst outputArray = [new asn1js.Integer({ value: this.version }), this.privateKeyAlgorithm.toSchema(), this.privateKey];\n\n\t\tif (\"attributes\" in this) {\n\t\t\toutputArray.push(new asn1js.Constructed({\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalue: Array.from(this.attributes, element => element.toSchema())\n\t\t\t}));\n\t\t}\n\t\t//endregion\n\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: outputArray\n\t\t});\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\t//region Return common value in case we do not have enough info fo making JWK\n\t\tif (\"parsedKey\" in this === false) {\n\t\t\tconst object = {\n\t\t\t\tversion: this.version,\n\t\t\t\tprivateKeyAlgorithm: this.privateKeyAlgorithm.toJSON(),\n\t\t\t\tprivateKey: this.privateKey.toJSON()\n\t\t\t};\n\n\t\t\tif (\"attributes\" in this) object.attributes = Array.from(this.attributes, element => element.toJSON());\n\n\t\t\treturn object;\n\t\t}\n\t\t//endregion\n\n\t\t//region Making JWK\n\t\tconst jwk = {};\n\n\t\tswitch (this.privateKeyAlgorithm.algorithmId) {\n\t\t\tcase \"1.2.840.10045.2.1\":\n\t\t\t\t// ECDSA\n\t\t\t\tjwk.kty = \"EC\";\n\t\t\t\tbreak;\n\t\t\tcase \"1.2.840.113549.1.1.1\":\n\t\t\t\t// RSA\n\t\t\t\tjwk.kty = \"RSA\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\n\t\tconst publicKeyJWK = this.parsedKey.toJSON();\n\n\t\tvar _iteratorNormalCompletion = true;\n\t\tvar _didIteratorError = false;\n\t\tvar _iteratorError = undefined;\n\n\t\ttry {\n\t\t\tfor (var _iterator = Object.keys(publicKeyJWK)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\tconst key = _step.value;\n\n\t\t\t\tjwk[key] = publicKeyJWK[key];\n\t\t\t}\n\t\t} catch (err) {\n\t\t\t_didIteratorError = true;\n\t\t\t_iteratorError = err;\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t\t_iterator.return();\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jwk;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert JSON value into current object\r\n  * @param {Object} json\r\n  */\n\tfromJSON(json) {\n\t\tif (\"kty\" in json) {\n\t\t\tswitch (json.kty.toUpperCase()) {\n\t\t\t\tcase \"EC\":\n\t\t\t\t\tthis.parsedKey = new _ECPrivateKey2.default({ json });\n\n\t\t\t\t\tthis.privateKeyAlgorithm = new _AlgorithmIdentifier2.default({\n\t\t\t\t\t\talgorithmId: \"1.2.840.10045.2.1\",\n\t\t\t\t\t\talgorithmParams: new asn1js.ObjectIdentifier({ value: this.parsedKey.namedCurve })\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"RSA\":\n\t\t\t\t\tthis.parsedKey = new _RSAPrivateKey2.default({ json });\n\n\t\t\t\t\tthis.privateKeyAlgorithm = new _AlgorithmIdentifier2.default({\n\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.1\",\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Invalid value for \"kty\" parameter: ${json.kty}`);\n\t\t\t}\n\n\t\t\tthis.privateKey = new asn1js.OctetString({ valueHex: this.parsedKey.toSchema().toBER(false) });\n\t\t}\n\t}\n\t//**********************************************************************************\n}\nexports.default = PrivateKeyInfo; //**************************************************************************************\n//# sourceMappingURL=PrivateKeyInfo.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n/**\r\n * Class from RFC2986\r\n */\nclass Attribute {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for Attribute class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\t/**\r\n   * @type {string}\r\n   * @desc ObjectIdentifier for attribute (string representation)\r\n   */\n\t\tthis.type = (0, _pvutils.getParametersValue)(parameters, \"type\", Attribute.defaultValues(\"type\"));\n\t\t/**\r\n   * @type {Array}\r\n   * @desc Any attribute values\r\n   */\n\t\tthis.values = (0, _pvutils.getParametersValue)(parameters, \"values\", Attribute.defaultValues(\"values\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"type\":\n\t\t\t\treturn \"\";\n\t\t\tcase \"values\":\n\t\t\t\treturn [];\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for Attribute class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Compare values with default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  * @param {*} memberValue Value to compare with default value\r\n  */\n\tstatic compareWithDefault(memberName, memberValue) {\n\t\tswitch (memberName) {\n\t\t\tcase \"type\":\n\t\t\t\treturn memberValue === \"\";\n\t\t\tcase \"values\":\n\t\t\t\treturn memberValue.length === 0;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for Attribute class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * Attribute { ATTRIBUTE:IOSet } ::= SEQUENCE {\r\n  *    type   ATTRIBUTE.&id({IOSet}),\r\n  *    values SET SIZE(1..MAX) OF ATTRIBUTE.&Type({IOSet}{@type})\r\n  * }\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}) {\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} [blockName]\r\n   * @property {string} [type]\r\n   * @property {string} [setName]\r\n   * @property {string} [values]\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\treturn new asn1js.Sequence({\n\t\t\tname: names.blockName || \"\",\n\t\t\tvalue: [new asn1js.ObjectIdentifier({ name: names.type || \"\" }), new asn1js.Set({\n\t\t\t\tname: names.setName || \"\",\n\t\t\t\tvalue: [new asn1js.Repeated({\n\t\t\t\t\tname: names.values || \"\",\n\t\t\t\t\tvalue: new asn1js.Any()\n\t\t\t\t})]\n\t\t\t})]\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Clear input data first\n\t\t(0, _pvutils.clearProps)(schema, [\"type\", \"values\"]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, Attribute.schema({\n\t\t\tnames: {\n\t\t\t\ttype: \"type\",\n\t\t\t\tvalues: \"values\"\n\t\t\t}\n\t\t}));\n\n\t\tif (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for Attribute\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.type = asn1.result.type.valueBlock.toString();\n\t\tthis.values = asn1.result.values;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: [new asn1js.ObjectIdentifier({ value: this.type }), new asn1js.Set({\n\t\t\t\tvalue: this.values\n\t\t\t})]\n\t\t});\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\treturn {\n\t\t\ttype: this.type,\n\t\t\tvalues: Array.from(this.values, element => element.toJSON())\n\t\t};\n\t}\n\t//**********************************************************************************\n}\nexports.default = Attribute; //**************************************************************************************\n//# sourceMappingURL=Attribute.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n/**\r\n * Class from RFC3447\r\n */\nclass OtherPrimeInfo {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for OtherPrimeInfo class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\t/**\r\n   * @type {Integer}\r\n   * @desc prime\r\n   */\n\t\tthis.prime = (0, _pvutils.getParametersValue)(parameters, \"prime\", OtherPrimeInfo.defaultValues(\"prime\"));\n\t\t/**\r\n   * @type {Integer}\r\n   * @desc exponent\r\n   */\n\t\tthis.exponent = (0, _pvutils.getParametersValue)(parameters, \"exponent\", OtherPrimeInfo.defaultValues(\"exponent\"));\n\t\t/**\r\n   * @type {Integer}\r\n   * @desc coefficient\r\n   */\n\t\tthis.coefficient = (0, _pvutils.getParametersValue)(parameters, \"coefficient\", OtherPrimeInfo.defaultValues(\"coefficient\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t\t//region If input argument array contains \"json\" for this object\n\t\tif (\"json\" in parameters) this.fromJSON(parameters.json);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"prime\":\n\t\t\t\treturn new asn1js.Integer();\n\t\t\tcase \"exponent\":\n\t\t\t\treturn new asn1js.Integer();\n\t\t\tcase \"coefficient\":\n\t\t\t\treturn new asn1js.Integer();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for OtherPrimeInfo class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * OtherPrimeInfo ::= Sequence {\r\n  *    prime             Integer,  -- ri\r\n  *    exponent          Integer,  -- di\r\n  *    coefficient       Integer   -- ti\r\n  * }\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}) {\n\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} prime\r\n   * @property {string} exponent\r\n   * @property {string} coefficient\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\treturn new asn1js.Sequence({\n\t\t\tname: names.blockName || \"\",\n\t\t\tvalue: [new asn1js.Integer({ name: names.prime || \"\" }), new asn1js.Integer({ name: names.exponent || \"\" }), new asn1js.Integer({ name: names.coefficient || \"\" })]\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Clear input data first\n\t\t(0, _pvutils.clearProps)(schema, [\"prime\", \"exponent\", \"coefficient\"]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, OtherPrimeInfo.schema({\n\t\t\tnames: {\n\t\t\t\tprime: \"prime\",\n\t\t\t\texponent: \"exponent\",\n\t\t\t\tcoefficient: \"coefficient\"\n\t\t\t}\n\t\t}));\n\n\t\tif (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for OtherPrimeInfo\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.prime = asn1.result.prime.convertFromDER();\n\t\tthis.exponent = asn1.result.exponent.convertFromDER();\n\t\tthis.coefficient = asn1.result.coefficient.convertFromDER();\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: [this.prime.convertToDER(), this.exponent.convertToDER(), this.coefficient.convertToDER()]\n\t\t});\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\treturn {\n\t\t\tr: (0, _pvutils.toBase64)((0, _pvutils.arrayBufferToString)(this.prime.valueBlock.valueHex), true, true),\n\t\t\td: (0, _pvutils.toBase64)((0, _pvutils.arrayBufferToString)(this.exponent.valueBlock.valueHex), true, true),\n\t\t\tt: (0, _pvutils.toBase64)((0, _pvutils.arrayBufferToString)(this.coefficient.valueBlock.valueHex), true, true)\n\t\t};\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert JSON value into current object\r\n  * @param {Object} json\r\n  */\n\tfromJSON(json) {\n\t\tif (\"r\" in json) this.prime = new asn1js.Integer({ valueHex: (0, _pvutils.stringToArrayBuffer)((0, _pvutils.fromBase64)(json.r, true)) });else throw new Error(\"Absent mandatory parameter \\\"r\\\"\");\n\n\t\tif (\"d\" in json) this.exponent = new asn1js.Integer({ valueHex: (0, _pvutils.stringToArrayBuffer)((0, _pvutils.fromBase64)(json.d, true)) });else throw new Error(\"Absent mandatory parameter \\\"d\\\"\");\n\n\t\tif (\"t\" in json) this.coefficient = new asn1js.Integer({ valueHex: (0, _pvutils.stringToArrayBuffer)((0, _pvutils.fromBase64)(json.t, true)) });else throw new Error(\"Absent mandatory parameter \\\"t\\\"\");\n\t}\n\t//**********************************************************************************\n}\nexports.default = OtherPrimeInfo; //**************************************************************************************\n//# sourceMappingURL=OtherPrimeInfo.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n/**\r\n * Class from RFC5280\r\n */\nclass PolicyConstraints {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for PolicyConstraints class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\tif (\"requireExplicitPolicy\" in parameters)\n\t\t\t/**\r\n    * @type {number}\r\n    * @desc requireExplicitPolicy\r\n    */\n\t\t\tthis.requireExplicitPolicy = (0, _pvutils.getParametersValue)(parameters, \"requireExplicitPolicy\", PolicyConstraints.defaultValues(\"requireExplicitPolicy\"));\n\n\t\tif (\"inhibitPolicyMapping\" in parameters)\n\t\t\t/**\r\n    * @type {number}\r\n    * @desc Value of the TIME class\r\n    */\n\t\t\tthis.inhibitPolicyMapping = (0, _pvutils.getParametersValue)(parameters, \"inhibitPolicyMapping\", PolicyConstraints.defaultValues(\"inhibitPolicyMapping\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"requireExplicitPolicy\":\n\t\t\t\treturn 0;\n\t\t\tcase \"inhibitPolicyMapping\":\n\t\t\t\treturn 0;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for PolicyConstraints class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * PolicyConstraints ::= SEQUENCE {\r\n  *    requireExplicitPolicy           [0] SkipCerts OPTIONAL,\r\n  *    inhibitPolicyMapping            [1] SkipCerts OPTIONAL }\r\n  *\r\n  * SkipCerts ::= INTEGER (0..MAX)\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}) {\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} [blockName]\r\n   * @property {string} [requireExplicitPolicy]\r\n   * @property {string} [inhibitPolicyMapping]\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\treturn new asn1js.Sequence({\n\t\t\tname: names.blockName || \"\",\n\t\t\tvalue: [new asn1js.Primitive({\n\t\t\t\tname: names.requireExplicitPolicy || \"\",\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t}\n\t\t\t}), // IMPLICIT integer value\n\t\t\tnew asn1js.Primitive({\n\t\t\t\tname: names.inhibitPolicyMapping || \"\",\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t}\n\t\t\t}) // IMPLICIT integer value\n\t\t\t]\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Clear input data first\n\t\t(0, _pvutils.clearProps)(schema, [\"requireExplicitPolicy\", \"inhibitPolicyMapping\"]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, PolicyConstraints.schema({\n\t\t\tnames: {\n\t\t\t\trequireExplicitPolicy: \"requireExplicitPolicy\",\n\t\t\t\tinhibitPolicyMapping: \"inhibitPolicyMapping\"\n\t\t\t}\n\t\t}));\n\n\t\tif (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for PolicyConstraints\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tif (\"requireExplicitPolicy\" in asn1.result) {\n\t\t\tconst field1 = asn1.result.requireExplicitPolicy;\n\n\t\t\tfield1.idBlock.tagClass = 1; // UNIVERSAL\n\t\t\tfield1.idBlock.tagNumber = 2; // INTEGER\n\n\t\t\tconst ber1 = field1.toBER(false);\n\t\t\tconst int1 = asn1js.fromBER(ber1);\n\n\t\t\tthis.requireExplicitPolicy = int1.result.valueBlock.valueDec;\n\t\t}\n\n\t\tif (\"inhibitPolicyMapping\" in asn1.result) {\n\t\t\tconst field2 = asn1.result.inhibitPolicyMapping;\n\n\t\t\tfield2.idBlock.tagClass = 1; // UNIVERSAL\n\t\t\tfield2.idBlock.tagNumber = 2; // INTEGER\n\n\t\t\tconst ber2 = field2.toBER(false);\n\t\t\tconst int2 = asn1js.fromBER(ber2);\n\n\t\t\tthis.inhibitPolicyMapping = int2.result.valueBlock.valueDec;\n\t\t}\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\t//region Create correct values for output sequence\n\t\tconst outputArray = [];\n\n\t\tif (\"requireExplicitPolicy\" in this) {\n\t\t\tconst int1 = new asn1js.Integer({ value: this.requireExplicitPolicy });\n\n\t\t\tint1.idBlock.tagClass = 3; // CONTEXT-SPECIFIC\n\t\t\tint1.idBlock.tagNumber = 0; // [0]\n\n\t\t\toutputArray.push(int1);\n\t\t}\n\n\t\tif (\"inhibitPolicyMapping\" in this) {\n\t\t\tconst int2 = new asn1js.Integer({ value: this.inhibitPolicyMapping });\n\n\t\t\tint2.idBlock.tagClass = 3; // CONTEXT-SPECIFIC\n\t\t\tint2.idBlock.tagNumber = 1; // [1]\n\n\t\t\toutputArray.push(int2);\n\t\t}\n\t\t//endregion\n\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: outputArray\n\t\t});\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\tconst object = {};\n\n\t\tif (\"requireExplicitPolicy\" in this) object.requireExplicitPolicy = this.requireExplicitPolicy;\n\n\t\tif (\"inhibitPolicyMapping\" in this) object.inhibitPolicyMapping = this.inhibitPolicyMapping;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\nexports.default = PolicyConstraints; //**************************************************************************************\n//# sourceMappingURL=PolicyConstraints.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nvar _AlgorithmIdentifier = require(\"./AlgorithmIdentifier.js\");\n\nvar _AlgorithmIdentifier2 = _interopRequireDefault(_AlgorithmIdentifier);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n/**\r\n * Class from RFC5652\r\n */\nclass EncryptedContentInfo {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for EncryptedContentInfo class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\t/**\r\n   * @type {string}\r\n   * @desc contentType\r\n   */\n\t\tthis.contentType = (0, _pvutils.getParametersValue)(parameters, \"contentType\", EncryptedContentInfo.defaultValues(\"contentType\"));\n\t\t/**\r\n   * @type {AlgorithmIdentifier}\r\n   * @desc contentEncryptionAlgorithm\r\n   */\n\t\tthis.contentEncryptionAlgorithm = (0, _pvutils.getParametersValue)(parameters, \"contentEncryptionAlgorithm\", EncryptedContentInfo.defaultValues(\"contentEncryptionAlgorithm\"));\n\n\t\tif (\"encryptedContent\" in parameters) {\n\t\t\t/**\r\n    * @type {OctetString}\r\n    * @desc encryptedContent (!!!) could be contructive or primitive value (!!!)\r\n    */\n\t\t\tthis.encryptedContent = parameters.encryptedContent;\n\n\t\t\tif (this.encryptedContent.idBlock.tagClass === 1 && this.encryptedContent.idBlock.tagNumber === 4) {\n\t\t\t\t//region Divide OCTETSTRING value down to small pieces\n\t\t\t\tif (this.encryptedContent.idBlock.isConstructed === false) {\n\t\t\t\t\tconst constrString = new asn1js.OctetString({\n\t\t\t\t\t\tidBlock: { isConstructed: true },\n\t\t\t\t\t\tisConstructed: true\n\t\t\t\t\t});\n\n\t\t\t\t\tlet offset = 0;\n\t\t\t\t\tlet length = this.encryptedContent.valueBlock.valueHex.byteLength;\n\n\t\t\t\t\twhile (length > 0) {\n\t\t\t\t\t\tconst pieceView = new Uint8Array(this.encryptedContent.valueBlock.valueHex, offset, offset + 1024 > this.encryptedContent.valueBlock.valueHex.byteLength ? this.encryptedContent.valueBlock.valueHex.byteLength - offset : 1024);\n\t\t\t\t\t\tconst _array = new ArrayBuffer(pieceView.length);\n\t\t\t\t\t\tconst _view = new Uint8Array(_array);\n\n\t\t\t\t\t\tfor (let i = 0; i < _view.length; i++) _view[i] = pieceView[i];\n\n\t\t\t\t\t\tconstrString.valueBlock.value.push(new asn1js.OctetString({ valueHex: _array }));\n\n\t\t\t\t\t\tlength -= pieceView.length;\n\t\t\t\t\t\toffset += pieceView.length;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.encryptedContent = constrString;\n\t\t\t\t}\n\t\t\t\t//endregion\n\t\t\t}\n\t\t}\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"contentType\":\n\t\t\t\treturn \"\";\n\t\t\tcase \"contentEncryptionAlgorithm\":\n\t\t\t\treturn new _AlgorithmIdentifier2.default();\n\t\t\tcase \"encryptedContent\":\n\t\t\t\treturn new asn1js.OctetString();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for EncryptedContentInfo class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Compare values with default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  * @param {*} memberValue Value to compare with default value\r\n  */\n\tstatic compareWithDefault(memberName, memberValue) {\n\t\tswitch (memberName) {\n\t\t\tcase \"contentType\":\n\t\t\t\treturn memberValue === \"\";\n\t\t\tcase \"contentEncryptionAlgorithm\":\n\t\t\t\treturn memberValue.algorithmId === \"\" && \"algorithmParams\" in memberValue === false;\n\t\t\tcase \"encryptedContent\":\n\t\t\t\treturn memberValue.isEqual(EncryptedContentInfo.defaultValues(memberName));\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for EncryptedContentInfo class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * EncryptedContentInfo ::= SEQUENCE {\r\n  *    contentType ContentType,\r\n  *    contentEncryptionAlgorithm ContentEncryptionAlgorithmIdentifier,\r\n  *    encryptedContent [0] IMPLICIT EncryptedContent OPTIONAL }\r\n  *\r\n  * Comment: Strange, but modern crypto engines create \"encryptedContent\" as \"[0] EXPLICIT EncryptedContent\"\r\n  *\r\n  * EncryptedContent ::= OCTET STRING\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}) {\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} [blockName]\r\n   * @property {string} [contentType]\r\n   * @property {string} [contentEncryptionAlgorithm]\r\n   * @property {string} [encryptedContent]\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\treturn new asn1js.Sequence({\n\t\t\tname: names.blockName || \"\",\n\t\t\tvalue: [new asn1js.ObjectIdentifier({ name: names.contentType || \"\" }), _AlgorithmIdentifier2.default.schema(names.contentEncryptionAlgorithm || {}),\n\t\t\t// The CHOICE we need because \"EncryptedContent\" could have either \"constructive\"\n\t\t\t// or \"primitive\" form of encoding and we need to handle both variants\n\t\t\tnew asn1js.Choice({\n\t\t\t\tvalue: [new asn1js.Constructed({\n\t\t\t\t\tname: names.encryptedContent || \"\",\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: [new asn1js.Repeated({\n\t\t\t\t\t\tvalue: new asn1js.OctetString()\n\t\t\t\t\t})]\n\t\t\t\t}), new asn1js.Primitive({\n\t\t\t\t\tname: names.encryptedContent || \"\",\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t}\n\t\t\t\t})]\n\t\t\t})]\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Clear input data first\n\t\t(0, _pvutils.clearProps)(schema, [\"contentType\", \"contentEncryptionAlgorithm\", \"encryptedContent\"]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, EncryptedContentInfo.schema({\n\t\t\tnames: {\n\t\t\t\tcontentType: \"contentType\",\n\t\t\t\tcontentEncryptionAlgorithm: {\n\t\t\t\t\tnames: {\n\t\t\t\t\t\tblockName: \"contentEncryptionAlgorithm\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tencryptedContent: \"encryptedContent\"\n\t\t\t}\n\t\t}));\n\n\t\tif (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for EncryptedContentInfo\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.contentType = asn1.result.contentType.valueBlock.toString();\n\t\tthis.contentEncryptionAlgorithm = new _AlgorithmIdentifier2.default({ schema: asn1.result.contentEncryptionAlgorithm });\n\n\t\tif (\"encryptedContent\" in asn1.result) {\n\t\t\tthis.encryptedContent = asn1.result.encryptedContent;\n\n\t\t\tthis.encryptedContent.idBlock.tagClass = 1; // UNIVERSAL\n\t\t\tthis.encryptedContent.idBlock.tagNumber = 4; // OCTETSTRING (!!!) The value still has instance of \"in_window.org.pkijs.asn1.ASN1_CONSTRUCTED / ASN1_PRIMITIVE\"\n\t\t}\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\t//region Create array for output sequence\n\t\tconst sequenceLengthBlock = {\n\t\t\tisIndefiniteForm: false\n\t\t};\n\n\t\tconst outputArray = [];\n\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.contentType }));\n\t\toutputArray.push(this.contentEncryptionAlgorithm.toSchema());\n\n\t\tif (\"encryptedContent\" in this) {\n\t\t\tsequenceLengthBlock.isIndefiniteForm = this.encryptedContent.idBlock.isConstructed;\n\n\t\t\tconst encryptedValue = this.encryptedContent;\n\n\t\t\tencryptedValue.idBlock.tagClass = 3; // CONTEXT-SPECIFIC\n\t\t\tencryptedValue.idBlock.tagNumber = 0; // [0]\n\n\t\t\tencryptedValue.lenBlock.isIndefiniteForm = this.encryptedContent.idBlock.isConstructed;\n\n\t\t\toutputArray.push(encryptedValue);\n\t\t}\n\t\t//endregion\n\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn new asn1js.Sequence({\n\t\t\tlenBlock: sequenceLengthBlock,\n\t\t\tvalue: outputArray\n\t\t});\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\tconst _object = {\n\t\t\tcontentType: this.contentType,\n\t\t\tcontentEncryptionAlgorithm: this.contentEncryptionAlgorithm.toJSON()\n\t\t};\n\n\t\tif (\"encryptedContent\" in this) _object.encryptedContent = this.encryptedContent.toJSON();\n\n\t\treturn _object;\n\t}\n\t//**********************************************************************************\n}\nexports.default = EncryptedContentInfo; //**************************************************************************************\n//# sourceMappingURL=EncryptedContentInfo.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n/**\r\n * Class from RFC5280\r\n */\nclass BasicConstraints {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for BasicConstraints class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  * @property {Object} [cA]\r\n  * @property {Object} [pathLenConstraint]\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\t/**\r\n   * @type {boolean}\r\n   * @desc cA\r\n   */\n\t\tthis.cA = (0, _pvutils.getParametersValue)(parameters, \"cA\", false);\n\n\t\tif (\"pathLenConstraint\" in parameters)\n\t\t\t/**\r\n    * @type {number|Integer}\r\n    * @desc pathLenConstraint\r\n    */\n\t\t\tthis.pathLenConstraint = (0, _pvutils.getParametersValue)(parameters, \"pathLenConstraint\", 0);\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"cA\":\n\t\t\t\treturn false;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for BasicConstraints class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * BasicConstraints ::= SEQUENCE {\r\n  *    cA                      BOOLEAN DEFAULT FALSE,\r\n  *    pathLenConstraint       INTEGER (0..MAX) OPTIONAL }\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}) {\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} [blockName]\r\n   * @property {string} [cA]\r\n   * @property {string} [pathLenConstraint]\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\treturn new asn1js.Sequence({\n\t\t\tname: names.blockName || \"\",\n\t\t\tvalue: [new asn1js.Boolean({\n\t\t\t\toptional: true,\n\t\t\t\tname: names.cA || \"\"\n\t\t\t}), new asn1js.Integer({\n\t\t\t\toptional: true,\n\t\t\t\tname: names.pathLenConstraint || \"\"\n\t\t\t})]\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Clear input data first\n\t\t(0, _pvutils.clearProps)(schema, [\"cA\", \"pathLenConstraint\"]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, BasicConstraints.schema({\n\t\t\tnames: {\n\t\t\t\tcA: \"cA\",\n\t\t\t\tpathLenConstraint: \"pathLenConstraint\"\n\t\t\t}\n\t\t}));\n\n\t\tif (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for BasicConstraints\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tif (\"cA\" in asn1.result) this.cA = asn1.result.cA.valueBlock.value;\n\n\t\tif (\"pathLenConstraint\" in asn1.result) {\n\t\t\tif (asn1.result.pathLenConstraint.valueBlock.isHexOnly) this.pathLenConstraint = asn1.result.pathLenConstraint;else this.pathLenConstraint = asn1.result.pathLenConstraint.valueBlock.valueDec;\n\t\t}\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\t//region Create array for output sequence\n\t\tconst outputArray = [];\n\n\t\tif (this.cA !== BasicConstraints.defaultValues(\"cA\")) outputArray.push(new asn1js.Boolean({ value: this.cA }));\n\n\t\tif (\"pathLenConstraint\" in this) {\n\t\t\tif (this.pathLenConstraint instanceof asn1js.Integer) outputArray.push(this.pathLenConstraint);else outputArray.push(new asn1js.Integer({ value: this.pathLenConstraint }));\n\t\t}\n\t\t//endregion\n\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: outputArray\n\t\t});\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\tconst object = {};\n\n\t\tif (this.cA !== BasicConstraints.defaultValues(\"cA\")) object.cA = this.cA;\n\n\t\tif (\"pathLenConstraint\" in this) {\n\t\t\tif (this.pathLenConstraint instanceof asn1js.Integer) object.pathLenConstraint = this.pathLenConstraint.toJSON();else object.pathLenConstraint = this.pathLenConstraint;\n\t\t}\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\nexports.default = BasicConstraints; //**************************************************************************************\n//# sourceMappingURL=BasicConstraints.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n/**\r\n * Class from RFC5280\r\n */\nclass AlgorithmIdentifier {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for AlgorithmIdentifier class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  * @property {string} [algorithmId] ObjectIdentifier for algorithm (string representation)\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\t/**\r\n   * @type {string}\r\n   * @desc ObjectIdentifier for algorithm (string representation)\r\n   */\n\t\tthis.algorithmId = (0, _pvutils.getParametersValue)(parameters, \"algorithmId\", AlgorithmIdentifier.defaultValues(\"algorithmId\"));\n\n\t\tif (\"algorithmParams\" in parameters)\n\t\t\t/**\r\n    * @type {Object}\r\n    * @desc Any algorithm parameters\r\n    */\n\t\t\tthis.algorithmParams = (0, _pvutils.getParametersValue)(parameters, \"algorithmParams\", AlgorithmIdentifier.defaultValues(\"algorithmParams\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"algorithmId\":\n\t\t\t\treturn \"\";\n\t\t\tcase \"algorithmParams\":\n\t\t\t\treturn new asn1js.Any();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for AlgorithmIdentifier class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Compare values with default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  * @param {*} memberValue Value to compare with default value\r\n  */\n\tstatic compareWithDefault(memberName, memberValue) {\n\t\tswitch (memberName) {\n\t\t\tcase \"algorithmId\":\n\t\t\t\treturn memberValue === \"\";\n\t\t\tcase \"algorithmParams\":\n\t\t\t\treturn memberValue instanceof asn1js.Any;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for AlgorithmIdentifier class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * AlgorithmIdentifier  ::=  Sequence  {\r\n  *    algorithm               OBJECT IDENTIFIER,\r\n  *    parameters              ANY DEFINED BY algorithm OPTIONAL  }\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}) {\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} algorithmIdentifier ObjectIdentifier for the algorithm\r\n   * @property {string} algorithmParams Any algorithm parameters\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\treturn new asn1js.Sequence({\n\t\t\tname: names.blockName || \"\",\n\t\t\toptional: names.optional || false,\n\t\t\tvalue: [new asn1js.ObjectIdentifier({ name: names.algorithmIdentifier || \"\" }), new asn1js.Any({ name: names.algorithmParams || \"\", optional: true })]\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Clear input data first\n\t\t(0, _pvutils.clearProps)(schema, [\"algorithm\", \"params\"]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, AlgorithmIdentifier.schema({\n\t\t\tnames: {\n\t\t\t\talgorithmIdentifier: \"algorithm\",\n\t\t\t\talgorithmParams: \"params\"\n\t\t\t}\n\t\t}));\n\n\t\tif (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for AlgorithmIdentifier\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.algorithmId = asn1.result.algorithm.valueBlock.toString();\n\t\tif (\"params\" in asn1.result) this.algorithmParams = asn1.result.params;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\t//region Create array for output sequence\n\t\tconst outputArray = [];\n\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.algorithmId }));\n\t\tif (\"algorithmParams\" in this && this.algorithmParams instanceof asn1js.Any === false) outputArray.push(this.algorithmParams);\n\t\t//endregion\n\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: outputArray\n\t\t});\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\tconst object = {\n\t\t\talgorithmId: this.algorithmId\n\t\t};\n\n\t\tif (\"algorithmParams\" in this && this.algorithmParams instanceof asn1js.Any === false) object.algorithmParams = this.algorithmParams.toJSON();\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Check that two \"AlgorithmIdentifiers\" are equal\r\n  * @param {AlgorithmIdentifier} algorithmIdentifier\r\n  * @returns {boolean}\r\n  */\n\tisEqual(algorithmIdentifier) {\n\t\t//region Check input type\n\t\tif (algorithmIdentifier instanceof AlgorithmIdentifier === false) return false;\n\t\t//endregion\n\n\t\t//region Check \"algorithm_id\"\n\t\tif (this.algorithmId !== algorithmIdentifier.algorithmId) return false;\n\t\t//endregion\n\n\t\t//region Check \"algorithm_params\"\n\t\tif (\"algorithmParams\" in this) {\n\t\t\tif (\"algorithmParams\" in algorithmIdentifier) return JSON.stringify(this.algorithmParams) === JSON.stringify(algorithmIdentifier.algorithmParams);\n\n\t\t\treturn false;\n\t\t}\n\n\t\tif (\"algorithmParams\" in algorithmIdentifier) return false;\n\t\t//endregion\n\n\t\treturn true;\n\t}\n\t//**********************************************************************************\n}\nexports.default = AlgorithmIdentifier; //**************************************************************************************\n//# sourceMappingURL=AlgorithmIdentifier.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n/**\r\n * Class from RFC3447\r\n */\nclass RSAPublicKey {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for RSAPublicKey class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  * @property {Integer} [modulus]\r\n  * @property {Integer} [publicExponent]\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\t/**\r\n   * @type {Integer}\r\n   * @desc Modulus part of RSA public key\r\n   */\n\t\tthis.modulus = (0, _pvutils.getParametersValue)(parameters, \"modulus\", RSAPublicKey.defaultValues(\"modulus\"));\n\t\t/**\r\n   * @type {Integer}\r\n   * @desc Public exponent of RSA public key\r\n   */\n\t\tthis.publicExponent = (0, _pvutils.getParametersValue)(parameters, \"publicExponent\", RSAPublicKey.defaultValues(\"publicExponent\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t\t//region If input argument array contains \"json\" for this object\n\t\tif (\"json\" in parameters) this.fromJSON(parameters.json);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"modulus\":\n\t\t\t\treturn new asn1js.Integer();\n\t\t\tcase \"publicExponent\":\n\t\t\t\treturn new asn1js.Integer();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for RSAPublicKey class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * RSAPublicKey ::= Sequence {\r\n  *    modulus           Integer,  -- n\r\n  *    publicExponent    Integer   -- e\r\n  * }\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}) {\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} utcTimeName Name for \"utcTimeName\" choice\r\n   * @property {string} generalTimeName Name for \"generalTimeName\" choice\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\treturn new asn1js.Sequence({\n\t\t\tname: names.blockName || \"\",\n\t\t\tvalue: [new asn1js.Integer({ name: names.modulus || \"\" }), new asn1js.Integer({ name: names.publicExponent || \"\" })]\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Clear input data first\n\t\t(0, _pvutils.clearProps)(schema, [\"modulus\", \"publicExponent\"]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, RSAPublicKey.schema({\n\t\t\tnames: {\n\t\t\t\tmodulus: \"modulus\",\n\t\t\t\tpublicExponent: \"publicExponent\"\n\t\t\t}\n\t\t}));\n\n\t\tif (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for RSAPublicKey\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.modulus = asn1.result.modulus.convertFromDER(256);\n\t\tthis.publicExponent = asn1.result.publicExponent;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: [this.modulus.convertToDER(), this.publicExponent]\n\t\t});\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\treturn {\n\t\t\tn: (0, _pvutils.toBase64)((0, _pvutils.arrayBufferToString)(this.modulus.valueBlock.valueHex), true, true, true),\n\t\t\te: (0, _pvutils.toBase64)((0, _pvutils.arrayBufferToString)(this.publicExponent.valueBlock.valueHex), true, true, true)\n\t\t};\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert JSON value into current object\r\n  * @param {Object} json\r\n  */\n\tfromJSON(json) {\n\t\tif (\"n\" in json) {\n\t\t\tconst array = (0, _pvutils.stringToArrayBuffer)((0, _pvutils.fromBase64)(json.n, true));\n\t\t\tthis.modulus = new asn1js.Integer({ valueHex: array.slice(0, Math.pow(2, (0, _pvutils.nearestPowerOf2)(array.byteLength))) });\n\t\t} else throw new Error(\"Absent mandatory parameter \\\"n\\\"\");\n\n\t\tif (\"e\" in json) this.publicExponent = new asn1js.Integer({ valueHex: (0, _pvutils.stringToArrayBuffer)((0, _pvutils.fromBase64)(json.e, true)).slice(0, 3) });else throw new Error(\"Absent mandatory parameter \\\"e\\\"\");\n\t}\n\t//**********************************************************************************\n}\nexports.default = RSAPublicKey; //**************************************************************************************\n//# sourceMappingURL=RSAPublicKey.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nvar _GeneralName = require(\"./GeneralName.js\");\n\nvar _GeneralName2 = _interopRequireDefault(_GeneralName);\n\nvar _RelativeDistinguishedNames = require(\"./RelativeDistinguishedNames.js\");\n\nvar _RelativeDistinguishedNames2 = _interopRequireDefault(_RelativeDistinguishedNames);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n/**\r\n * Class from RFC5280\r\n */\nclass IssuingDistributionPoint {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for IssuingDistributionPoint class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\tif (\"distributionPoint\" in parameters)\n\t\t\t/**\r\n    * @type {Array.<GeneralName>|RelativeDistinguishedNames}\r\n    * @desc distributionPoint\r\n    */\n\t\t\tthis.distributionPoint = (0, _pvutils.getParametersValue)(parameters, \"distributionPoint\", IssuingDistributionPoint.defaultValues(\"distributionPoint\"));\n\n\t\t/**\r\n   * @type {boolean}\r\n   * @desc onlyContainsUserCerts\r\n   */\n\t\tthis.onlyContainsUserCerts = (0, _pvutils.getParametersValue)(parameters, \"onlyContainsUserCerts\", IssuingDistributionPoint.defaultValues(\"onlyContainsUserCerts\"));\n\n\t\t/**\r\n   * @type {boolean}\r\n   * @desc onlyContainsCACerts\r\n   */\n\t\tthis.onlyContainsCACerts = (0, _pvutils.getParametersValue)(parameters, \"onlyContainsCACerts\", IssuingDistributionPoint.defaultValues(\"onlyContainsCACerts\"));\n\n\t\tif (\"onlySomeReasons\" in parameters)\n\t\t\t/**\r\n    * @type {number}\r\n    * @desc onlySomeReasons\r\n    */\n\t\t\tthis.onlySomeReasons = (0, _pvutils.getParametersValue)(parameters, \"onlySomeReasons\", IssuingDistributionPoint.defaultValues(\"onlySomeReasons\"));\n\n\t\t/**\r\n   * @type {boolean}\r\n   * @desc indirectCRL\r\n   */\n\t\tthis.indirectCRL = (0, _pvutils.getParametersValue)(parameters, \"indirectCRL\", IssuingDistributionPoint.defaultValues(\"indirectCRL\"));\n\n\t\t/**\r\n   * @type {boolean}\r\n   * @desc onlyContainsAttributeCerts\r\n   */\n\t\tthis.onlyContainsAttributeCerts = (0, _pvutils.getParametersValue)(parameters, \"onlyContainsAttributeCerts\", IssuingDistributionPoint.defaultValues(\"onlyContainsAttributeCerts\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"distributionPoint\":\n\t\t\t\treturn [];\n\t\t\tcase \"onlyContainsUserCerts\":\n\t\t\t\treturn false;\n\t\t\tcase \"onlyContainsCACerts\":\n\t\t\t\treturn false;\n\t\t\tcase \"onlySomeReasons\":\n\t\t\t\treturn 0;\n\t\t\tcase \"indirectCRL\":\n\t\t\t\treturn false;\n\t\t\tcase \"onlyContainsAttributeCerts\":\n\t\t\t\treturn false;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for IssuingDistributionPoint class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * IssuingDistributionPoint ::= SEQUENCE {\r\n  *    distributionPoint          [0] DistributionPointName OPTIONAL,\r\n  *    onlyContainsUserCerts      [1] BOOLEAN DEFAULT FALSE,\r\n  *    onlyContainsCACerts        [2] BOOLEAN DEFAULT FALSE,\r\n  *    onlySomeReasons            [3] ReasonFlags OPTIONAL,\r\n  *    indirectCRL                [4] BOOLEAN DEFAULT FALSE,\r\n  *    onlyContainsAttributeCerts [5] BOOLEAN DEFAULT FALSE }\r\n  *\r\n  * ReasonFlags ::= BIT STRING {\r\n  *    unused                  (0),\r\n  *    keyCompromise           (1),\r\n  *    cACompromise            (2),\r\n  *    affiliationChanged      (3),\r\n  *    superseded              (4),\r\n  *    cessationOfOperation    (5),\r\n  *    certificateHold         (6),\r\n  *    privilegeWithdrawn      (7),\r\n  *    aACompromise            (8) }\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}) {\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} [blockName]\r\n   * @property {string} [distributionPoint]\r\n   * @property {string} [distributionPointNames]\r\n   * @property {string} [onlyContainsUserCerts]\r\n   * @property {string} [onlyContainsCACerts]\r\n   * @property {string} [onlySomeReasons]\r\n   * @property {string} [indirectCRL]\r\n   * @property {string} [onlyContainsAttributeCerts]\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\treturn new asn1js.Sequence({\n\t\t\tname: names.blockName || \"\",\n\t\t\tvalue: [new asn1js.Constructed({\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalue: [new asn1js.Choice({\n\t\t\t\t\tvalue: [new asn1js.Constructed({\n\t\t\t\t\t\tname: names.distributionPoint || \"\",\n\t\t\t\t\t\tidBlock: {\n\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t\t},\n\t\t\t\t\t\tvalue: [new asn1js.Repeated({\n\t\t\t\t\t\t\tname: names.distributionPointNames || \"\",\n\t\t\t\t\t\t\tvalue: _GeneralName2.default.schema()\n\t\t\t\t\t\t})]\n\t\t\t\t\t}), new asn1js.Constructed({\n\t\t\t\t\t\tname: names.distributionPoint || \"\",\n\t\t\t\t\t\tidBlock: {\n\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t\t\t},\n\t\t\t\t\t\tvalue: _RelativeDistinguishedNames2.default.schema().valueBlock.value\n\t\t\t\t\t})]\n\t\t\t\t})]\n\t\t\t}), new asn1js.Primitive({\n\t\t\t\tname: names.onlyContainsUserCerts || \"\",\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t}\n\t\t\t}), // IMPLICIT boolean value\n\t\t\tnew asn1js.Primitive({\n\t\t\t\tname: names.onlyContainsCACerts || \"\",\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 2 // [2]\n\t\t\t\t}\n\t\t\t}), // IMPLICIT boolean value\n\t\t\tnew asn1js.Primitive({\n\t\t\t\tname: names.onlySomeReasons || \"\",\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 3 // [3]\n\t\t\t\t}\n\t\t\t}), // IMPLICIT bitstring value\n\t\t\tnew asn1js.Primitive({\n\t\t\t\tname: names.indirectCRL || \"\",\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 4 // [4]\n\t\t\t\t}\n\t\t\t}), // IMPLICIT boolean value\n\t\t\tnew asn1js.Primitive({\n\t\t\t\tname: names.onlyContainsAttributeCerts || \"\",\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 5 // [5]\n\t\t\t\t}\n\t\t\t}) // IMPLICIT boolean value\n\t\t\t]\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Clear input data first\n\t\t(0, _pvutils.clearProps)(schema, [\"distributionPoint\", \"distributionPointNames\", \"onlyContainsUserCerts\", \"onlyContainsCACerts\", \"onlySomeReasons\", \"indirectCRL\", \"onlyContainsAttributeCerts\"]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, IssuingDistributionPoint.schema({\n\t\t\tnames: {\n\t\t\t\tdistributionPoint: \"distributionPoint\",\n\t\t\t\tdistributionPointNames: \"distributionPointNames\",\n\t\t\t\tonlyContainsUserCerts: \"onlyContainsUserCerts\",\n\t\t\t\tonlyContainsCACerts: \"onlyContainsCACerts\",\n\t\t\t\tonlySomeReasons: \"onlySomeReasons\",\n\t\t\t\tindirectCRL: \"indirectCRL\",\n\t\t\t\tonlyContainsAttributeCerts: \"onlyContainsAttributeCerts\"\n\t\t\t}\n\t\t}));\n\n\t\tif (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for IssuingDistributionPoint\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tif (\"distributionPoint\" in asn1.result) {\n\t\t\tswitch (true) {\n\t\t\t\tcase asn1.result.distributionPoint.idBlock.tagNumber === 0:\n\t\t\t\t\t// GENERAL_NAMES variant\n\t\t\t\t\tthis.distributionPoint = Array.from(asn1.result.distributionPointNames, element => new _GeneralName2.default({ schema: element }));\n\t\t\t\t\tbreak;\n\t\t\t\tcase asn1.result.distributionPoint.idBlock.tagNumber === 1:\n\t\t\t\t\t// RDN variant\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.distributionPoint = new _RelativeDistinguishedNames2.default({\n\t\t\t\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\t\t\t\tvalue: asn1.result.distributionPoint.valueBlock.value\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\"Unknown tagNumber for distributionPoint: {$asn1.result.distributionPoint.idBlock.tagNumber}\");\n\t\t\t}\n\t\t}\n\n\t\tif (\"onlyContainsUserCerts\" in asn1.result) {\n\t\t\tconst view = new Uint8Array(asn1.result.onlyContainsUserCerts.valueBlock.valueHex);\n\t\t\tthis.onlyContainsUserCerts = view[0] !== 0x00;\n\t\t}\n\n\t\tif (\"onlyContainsCACerts\" in asn1.result) {\n\t\t\tconst view = new Uint8Array(asn1.result.onlyContainsCACerts.valueBlock.valueHex);\n\t\t\tthis.onlyContainsCACerts = view[0] !== 0x00;\n\t\t}\n\n\t\tif (\"onlySomeReasons\" in asn1.result) {\n\t\t\tconst view = new Uint8Array(asn1.result.onlySomeReasons.valueBlock.valueHex);\n\t\t\tthis.onlySomeReasons = view[0];\n\t\t}\n\n\t\tif (\"indirectCRL\" in asn1.result) {\n\t\t\tconst view = new Uint8Array(asn1.result.indirectCRL.valueBlock.valueHex);\n\t\t\tthis.indirectCRL = view[0] !== 0x00;\n\t\t}\n\n\t\tif (\"onlyContainsAttributeCerts\" in asn1.result) {\n\t\t\tconst view = new Uint8Array(asn1.result.onlyContainsAttributeCerts.valueBlock.valueHex);\n\t\t\tthis.onlyContainsAttributeCerts = view[0] !== 0x00;\n\t\t}\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\t//region Create array for output sequence\n\t\tconst outputArray = [];\n\n\t\tif (\"distributionPoint\" in this) {\n\t\t\tlet value;\n\n\t\t\tif (this.distributionPoint instanceof Array) {\n\t\t\t\tvalue = new asn1js.Constructed({\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: Array.from(this.distributionPoint, element => element.toSchema())\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tvalue = this.distributionPoint.toSchema();\n\n\t\t\t\tvalue.idBlock.tagClass = 3; // CONTEXT - SPECIFIC\n\t\t\t\tvalue.idBlock.tagNumber = 1; // [1]\n\t\t\t}\n\n\t\t\toutputArray.push(value);\n\t\t}\n\n\t\tif (this.onlyContainsUserCerts !== IssuingDistributionPoint.defaultValues(\"onlyContainsUserCerts\")) {\n\t\t\toutputArray.push(new asn1js.Primitive({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tvalueHex: new Uint8Array([0xFF]).buffer\n\t\t\t}));\n\t\t}\n\n\t\tif (this.onlyContainsCACerts !== IssuingDistributionPoint.defaultValues(\"onlyContainsCACerts\")) {\n\t\t\toutputArray.push(new asn1js.Primitive({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 2 // [2]\n\t\t\t\t},\n\t\t\t\tvalueHex: new Uint8Array([0xFF]).buffer\n\t\t\t}));\n\t\t}\n\n\t\tif (\"onlySomeReasons\" in this) {\n\t\t\tconst buffer = new ArrayBuffer(1);\n\t\t\tconst view = new Uint8Array(buffer);\n\n\t\t\tview[0] = this.onlySomeReasons;\n\n\t\t\toutputArray.push(new asn1js.Primitive({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 3 // [3]\n\t\t\t\t},\n\t\t\t\tvalueHex: buffer\n\t\t\t}));\n\t\t}\n\n\t\tif (this.indirectCRL !== IssuingDistributionPoint.defaultValues(\"indirectCRL\")) {\n\t\t\toutputArray.push(new asn1js.Primitive({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 4 // [4]\n\t\t\t\t},\n\t\t\t\tvalueHex: new Uint8Array([0xFF]).buffer\n\t\t\t}));\n\t\t}\n\n\t\tif (this.onlyContainsAttributeCerts !== IssuingDistributionPoint.defaultValues(\"onlyContainsAttributeCerts\")) {\n\t\t\toutputArray.push(new asn1js.Primitive({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 5 // [5]\n\t\t\t\t},\n\t\t\t\tvalueHex: new Uint8Array([0xFF]).buffer\n\t\t\t}));\n\t\t}\n\t\t//endregion\n\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: outputArray\n\t\t});\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\tconst object = {};\n\n\t\tif (\"distributionPoint\" in this) {\n\t\t\tif (this.distributionPoint instanceof Array) object.distributionPoint = Array.from(this.distributionPoint, element => element.toJSON());else object.distributionPoint = this.distributionPoint.toJSON();\n\t\t}\n\n\t\tif (this.onlyContainsUserCerts !== IssuingDistributionPoint.defaultValues(\"onlyContainsUserCerts\")) object.onlyContainsUserCerts = this.onlyContainsUserCerts;\n\n\t\tif (this.onlyContainsCACerts !== IssuingDistributionPoint.defaultValues(\"onlyContainsCACerts\")) object.onlyContainsCACerts = this.onlyContainsCACerts;\n\n\t\tif (\"onlySomeReasons\" in this) object.onlySomeReasons = this.onlySomeReasons;\n\n\t\tif (this.indirectCRL !== IssuingDistributionPoint.defaultValues(\"indirectCRL\")) object.indirectCRL = this.indirectCRL;\n\n\t\tif (this.onlyContainsAttributeCerts !== IssuingDistributionPoint.defaultValues(\"onlyContainsAttributeCerts\")) object.onlyContainsAttributeCerts = this.onlyContainsAttributeCerts;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\nexports.default = IssuingDistributionPoint; //**************************************************************************************\n//# sourceMappingURL=IssuingDistributionPoint.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nvar _common = require(\"./common.js\");\n\nvar _AlgorithmIdentifier = require(\"./AlgorithmIdentifier.js\");\n\nvar _AlgorithmIdentifier2 = _interopRequireDefault(_AlgorithmIdentifier);\n\nvar _ECPublicKey = require(\"./ECPublicKey.js\");\n\nvar _ECPublicKey2 = _interopRequireDefault(_ECPublicKey);\n\nvar _RSAPublicKey = require(\"./RSAPublicKey.js\");\n\nvar _RSAPublicKey2 = _interopRequireDefault(_RSAPublicKey);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n/**\r\n * Class from RFC5280\r\n */\nclass PublicKeyInfo {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for PublicKeyInfo class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\t/**\r\n   * @type {AlgorithmIdentifier}\r\n   * @desc Algorithm identifier\r\n   */\n\t\tthis.algorithm = (0, _pvutils.getParametersValue)(parameters, \"algorithm\", PublicKeyInfo.defaultValues(\"algorithm\"));\n\t\t/**\r\n   * @type {BitString}\r\n   * @desc Subject public key value\r\n   */\n\t\tthis.subjectPublicKey = (0, _pvutils.getParametersValue)(parameters, \"subjectPublicKey\", PublicKeyInfo.defaultValues(\"subjectPublicKey\"));\n\n\t\tif (\"parsedKey\" in parameters)\n\t\t\t/**\r\n    * @type {ECPublicKey|RSAPublicKey}\r\n    * @desc Parsed public key value\r\n    */\n\t\t\tthis.parsedKey = (0, _pvutils.getParametersValue)(parameters, \"parsedKey\", PublicKeyInfo.defaultValues(\"parsedKey\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t\t//region If input argument array contains \"json\" for this object\n\t\tif (\"json\" in parameters) this.fromJSON(parameters.json);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"algorithm\":\n\t\t\t\treturn new _AlgorithmIdentifier2.default();\n\t\t\tcase \"subjectPublicKey\":\n\t\t\t\treturn new asn1js.BitString();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for PublicKeyInfo class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * SubjectPublicKeyInfo  ::=  Sequence  {\r\n  *    algorithm            AlgorithmIdentifier,\r\n  *    subjectPublicKey     BIT STRING  }\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}) {\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} [blockName]\r\n   * @property {string} [algorithm]\r\n   * @property {string} [subjectPublicKey]\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\treturn new asn1js.Sequence({\n\t\t\tname: names.blockName || \"\",\n\t\t\tvalue: [_AlgorithmIdentifier2.default.schema(names.algorithm || {}), new asn1js.BitString({ name: names.subjectPublicKey || \"\" })]\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Clear input data first\n\t\t(0, _pvutils.clearProps)(schema, [\"algorithm\", \"subjectPublicKey\"]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, PublicKeyInfo.schema({\n\t\t\tnames: {\n\t\t\t\talgorithm: {\n\t\t\t\t\tnames: {\n\t\t\t\t\t\tblockName: \"algorithm\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsubjectPublicKey: \"subjectPublicKey\"\n\t\t\t}\n\t\t}));\n\n\t\tif (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for PublicKeyInfo\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.algorithm = new _AlgorithmIdentifier2.default({ schema: asn1.result.algorithm });\n\t\tthis.subjectPublicKey = asn1.result.subjectPublicKey;\n\n\t\tswitch (this.algorithm.algorithmId) {\n\t\t\tcase \"1.2.840.10045.2.1\":\n\t\t\t\t// ECDSA\n\t\t\t\tif (\"algorithmParams\" in this.algorithm) {\n\t\t\t\t\tif (this.algorithm.algorithmParams instanceof asn1js.ObjectIdentifier) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tthis.parsedKey = new _ECPublicKey2.default({\n\t\t\t\t\t\t\t\tnamedCurve: this.algorithm.algorithmParams.valueBlock.toString(),\n\t\t\t\t\t\t\t\tschema: this.subjectPublicKey.valueBlock.valueHex\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} catch (ex) {} // Could be a problems during recognision of internal public key data here. Let's ignore them.\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"1.2.840.113549.1.1.1\":\n\t\t\t\t// RSA\n\t\t\t\t{\n\t\t\t\t\tconst publicKeyASN1 = asn1js.fromBER(this.subjectPublicKey.valueBlock.valueHex);\n\t\t\t\t\tif (publicKeyASN1.offset !== -1) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tthis.parsedKey = new _RSAPublicKey2.default({ schema: publicKeyASN1.result });\n\t\t\t\t\t\t} catch (ex) {} // Could be a problems during recognision of internal public key data here. Let's ignore them.\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: [this.algorithm.toSchema(), this.subjectPublicKey]\n\t\t});\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\t//region Return common value in case we do not have enough info fo making JWK\n\t\tif (\"parsedKey\" in this === false) {\n\t\t\treturn {\n\t\t\t\talgorithm: this.algorithm.toJSON(),\n\t\t\t\tsubjectPublicKey: this.subjectPublicKey.toJSON()\n\t\t\t};\n\t\t}\n\t\t//endregion\n\n\t\t//region Making JWK\n\t\tconst jwk = {};\n\n\t\tswitch (this.algorithm.algorithmId) {\n\t\t\tcase \"1.2.840.10045.2.1\":\n\t\t\t\t// ECDSA\n\t\t\t\tjwk.kty = \"EC\";\n\t\t\t\tbreak;\n\t\t\tcase \"1.2.840.113549.1.1.1\":\n\t\t\t\t// RSA\n\t\t\t\tjwk.kty = \"RSA\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\n\t\tconst publicKeyJWK = this.parsedKey.toJSON();\n\n\t\tvar _iteratorNormalCompletion = true;\n\t\tvar _didIteratorError = false;\n\t\tvar _iteratorError = undefined;\n\n\t\ttry {\n\t\t\tfor (var _iterator = Object.keys(publicKeyJWK)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\tconst key = _step.value;\n\n\t\t\t\tjwk[key] = publicKeyJWK[key];\n\t\t\t}\n\t\t} catch (err) {\n\t\t\t_didIteratorError = true;\n\t\t\t_iteratorError = err;\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t\t_iterator.return();\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jwk;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert JSON value into current object\r\n  * @param {Object} json\r\n  */\n\tfromJSON(json) {\n\t\tif (\"kty\" in json) {\n\t\t\tswitch (json.kty.toUpperCase()) {\n\t\t\t\tcase \"EC\":\n\t\t\t\t\tthis.parsedKey = new _ECPublicKey2.default({ json });\n\n\t\t\t\t\tthis.algorithm = new _AlgorithmIdentifier2.default({\n\t\t\t\t\t\talgorithmId: \"1.2.840.10045.2.1\",\n\t\t\t\t\t\talgorithmParams: new asn1js.ObjectIdentifier({ value: this.parsedKey.namedCurve })\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"RSA\":\n\t\t\t\t\tthis.parsedKey = new _RSAPublicKey2.default({ json });\n\n\t\t\t\t\tthis.algorithm = new _AlgorithmIdentifier2.default({\n\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.1\",\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Invalid value for \"kty\" parameter: ${json.kty}`);\n\t\t\t}\n\n\t\t\tthis.subjectPublicKey = new asn1js.BitString({ valueHex: this.parsedKey.toSchema().toBER(false) });\n\t\t}\n\t}\n\t//**********************************************************************************\n\timportKey(publicKey) {\n\t\t//region Initial variables\n\t\tlet sequence = Promise.resolve();\n\t\tconst _this = this;\n\t\t//endregion\n\n\t\t//region Initial check\n\t\tif (typeof publicKey === \"undefined\") return Promise.reject(\"Need to provide publicKey input parameter\");\n\t\t//endregion\n\n\t\t//region Get a \"crypto\" extension\n\t\tconst crypto = (0, _common.getCrypto)();\n\t\tif (typeof crypto === \"undefined\") return Promise.reject(\"Unable to create WebCrypto object\");\n\t\t//endregion\n\n\t\t//region Export public key\n\t\tsequence = sequence.then(() => crypto.exportKey(\"spki\", publicKey));\n\t\t//endregion\n\n\t\t//region Initialize internal variables by parsing exported value\n\t\tsequence = sequence.then(\n\t\t/**\r\n   * @param {ArrayBuffer} exportedKey\r\n   */\n\t\texportedKey => {\n\t\t\tconst asn1 = asn1js.fromBER(exportedKey);\n\t\t\ttry {\n\t\t\t\t_this.fromSchema(asn1.result);\n\t\t\t} catch (exception) {\n\t\t\t\treturn Promise.reject(\"Error during initializing object from schema\");\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}, error => Promise.reject(`Error during exporting public key: ${error}`));\n\t\t//endregion\n\n\t\treturn sequence;\n\t}\n\t//**********************************************************************************\n}\nexports.default = PublicKeyInfo; //**************************************************************************************\n//# sourceMappingURL=PublicKeyInfo.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nvar _AlgorithmIdentifier = require(\"./AlgorithmIdentifier.js\");\n\nvar _AlgorithmIdentifier2 = _interopRequireDefault(_AlgorithmIdentifier);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n/**\r\n * Class from RFC2898\r\n */\nclass PBKDF2Params {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for PBKDF2Params class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\t/**\r\n   * @type {Object}\r\n   * @desc salt\r\n   */\n\t\tthis.salt = (0, _pvutils.getParametersValue)(parameters, \"salt\", PBKDF2Params.defaultValues(\"salt\"));\n\t\t/**\r\n   * @type {number}\r\n   * @desc iterationCount\r\n   */\n\t\tthis.iterationCount = (0, _pvutils.getParametersValue)(parameters, \"iterationCount\", PBKDF2Params.defaultValues(\"iterationCount\"));\n\n\t\tif (\"keyLength\" in parameters)\n\t\t\t/**\r\n    * @type {number}\r\n    * @desc keyLength\r\n    */\n\t\t\tthis.keyLength = (0, _pvutils.getParametersValue)(parameters, \"keyLength\", PBKDF2Params.defaultValues(\"keyLength\"));\n\n\t\tif (\"prf\" in parameters)\n\t\t\t/**\r\n    * @type {AlgorithmIdentifier}\r\n    * @desc prf\r\n    */\n\t\t\tthis.prf = (0, _pvutils.getParametersValue)(parameters, \"prf\", PBKDF2Params.defaultValues(\"prf\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"salt\":\n\t\t\t\treturn {};\n\t\t\tcase \"iterationCount\":\n\t\t\t\treturn -1;\n\t\t\tcase \"keyLength\":\n\t\t\t\treturn 0;\n\t\t\tcase \"prf\":\n\t\t\t\treturn new _AlgorithmIdentifier2.default({\n\t\t\t\t\talgorithmId: \"1.3.14.3.2.26\", // SHA-1\n\t\t\t\t\talgorithmParams: new asn1js.Null()\n\t\t\t\t});\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for PBKDF2Params class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * PBKDF2-params ::= SEQUENCE {\r\n  *    salt CHOICE {\r\n  *        specified OCTET STRING,\r\n  *        otherSource AlgorithmIdentifier },\r\n  *  iterationCount INTEGER (1..MAX),\r\n  *  keyLength INTEGER (1..MAX) OPTIONAL,\r\n  *  prf AlgorithmIdentifier\r\n  *    DEFAULT { algorithm hMAC-SHA1, parameters NULL } }\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}) {\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} [blockName]\r\n   * @property {string} [saltPrimitive]\r\n   * @property {string} [saltConstructed]\r\n   * @property {string} [iterationCount]\r\n   * @property {string} [keyLength]\r\n   * @property {string} [prf]\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\treturn new asn1js.Sequence({\n\t\t\tname: names.blockName || \"\",\n\t\t\tvalue: [new asn1js.Choice({\n\t\t\t\tvalue: [new asn1js.OctetString({ name: names.saltPrimitive || \"\" }), _AlgorithmIdentifier2.default.schema(names.saltConstructed || {})]\n\t\t\t}), new asn1js.Integer({ name: names.iterationCount || \"\" }), new asn1js.Integer({\n\t\t\t\tname: names.keyLength || \"\",\n\t\t\t\toptional: true\n\t\t\t}), _AlgorithmIdentifier2.default.schema(names.prf || {\n\t\t\t\tnames: {\n\t\t\t\t\toptional: true\n\t\t\t\t}\n\t\t\t})]\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Clear input data first\n\t\t(0, _pvutils.clearProps)(schema, [\"salt\", \"iterationCount\", \"keyLength\", \"prf\"]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, PBKDF2Params.schema({\n\t\t\tnames: {\n\t\t\t\tsaltPrimitive: \"salt\",\n\t\t\t\tsaltConstructed: {\n\t\t\t\t\tnames: {\n\t\t\t\t\t\tblockName: \"salt\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\titerationCount: \"iterationCount\",\n\t\t\t\tkeyLength: \"keyLength\",\n\t\t\t\tprf: {\n\t\t\t\t\tnames: {\n\t\t\t\t\t\tblockName: \"prf\",\n\t\t\t\t\t\toptional: true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tif (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for PBKDF2Params\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.salt = asn1.result.salt;\n\t\tthis.iterationCount = asn1.result.iterationCount.valueBlock.valueDec;\n\n\t\tif (\"keyLength\" in asn1.result) this.keyLength = asn1.result.keyLength.valueBlock.valueDec;\n\n\t\tif (\"prf\" in asn1.result) this.prf = new _AlgorithmIdentifier2.default({ schema: asn1.result.prf });\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\t//region Create array for output sequence \n\t\tconst outputArray = [];\n\n\t\toutputArray.push(this.salt);\n\t\toutputArray.push(new asn1js.Integer({ value: this.iterationCount }));\n\n\t\tif (\"keyLength\" in this) {\n\t\t\tif (PBKDF2Params.defaultValues(\"keyLength\") !== this.keyLength) outputArray.push(new asn1js.Integer({ value: this.keyLength }));\n\t\t}\n\n\t\tif (\"prf\" in this) {\n\t\t\tif (PBKDF2Params.defaultValues(\"prf\").isEqual(this.prf) === false) outputArray.push(this.prf.toSchema());\n\t\t}\n\t\t//endregion \n\n\t\t//region Construct and return new ASN.1 schema for this object \n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: outputArray\n\t\t});\n\t\t//endregion \n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\tconst _object = {\n\t\t\tsalt: this.salt.toJSON(),\n\t\t\titerationCount: this.iterationCount\n\t\t};\n\n\t\tif (\"keyLength\" in this) {\n\t\t\tif (PBKDF2Params.defaultValues(\"keyLength\") !== this.keyLength) _object.keyLength = this.keyLength;\n\t\t}\n\n\t\tif (\"prf\" in this) {\n\t\t\tif (PBKDF2Params.defaultValues(\"prf\").isEqual(this.prf) === false) _object.prf = this.prf.toJSON();\n\t\t}\n\n\t\treturn _object;\n\t}\n\t//**********************************************************************************\n}\nexports.default = PBKDF2Params; //**************************************************************************************\n//# sourceMappingURL=PBKDF2Params.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nvar _ECPublicKey = require(\"./ECPublicKey.js\");\n\nvar _ECPublicKey2 = _interopRequireDefault(_ECPublicKey);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n/**\r\n * Class from RFC5915\r\n */\nclass ECPrivateKey {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for ECCPrivateKey class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\t/**\r\n   * @type {number}\r\n   * @desc version\r\n   */\n\t\tthis.version = (0, _pvutils.getParametersValue)(parameters, \"version\", ECPrivateKey.defaultValues(\"version\"));\n\t\t/**\r\n   * @type {OctetString}\r\n   * @desc privateKey\r\n   */\n\t\tthis.privateKey = (0, _pvutils.getParametersValue)(parameters, \"privateKey\", ECPrivateKey.defaultValues(\"privateKey\"));\n\n\t\tif (\"namedCurve\" in parameters)\n\t\t\t/**\r\n    * @type {string}\r\n    * @desc namedCurve\r\n    */\n\t\t\tthis.namedCurve = (0, _pvutils.getParametersValue)(parameters, \"namedCurve\", ECPrivateKey.defaultValues(\"namedCurve\"));\n\n\t\tif (\"publicKey\" in parameters)\n\t\t\t/**\r\n    * @type {ECPublicKey}\r\n    * @desc publicKey\r\n    */\n\t\t\tthis.publicKey = (0, _pvutils.getParametersValue)(parameters, \"publicKey\", ECPrivateKey.defaultValues(\"publicKey\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t\t//region If input argument array contains \"json\" for this object\n\t\tif (\"json\" in parameters) this.fromJSON(parameters.json);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"version\":\n\t\t\t\treturn 1;\n\t\t\tcase \"privateKey\":\n\t\t\t\treturn new asn1js.OctetString();\n\t\t\tcase \"namedCurve\":\n\t\t\t\treturn \"\";\n\t\t\tcase \"publicKey\":\n\t\t\t\treturn new _ECPublicKey2.default();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for ECCPrivateKey class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Compare values with default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  * @param {*} memberValue Value to compare with default value\r\n  */\n\tstatic compareWithDefault(memberName, memberValue) {\n\t\tswitch (memberName) {\n\t\t\tcase \"version\":\n\t\t\t\treturn memberValue === ECPrivateKey.defaultValues(memberName);\n\t\t\tcase \"privateKey\":\n\t\t\t\treturn memberValue.isEqual(ECPrivateKey.defaultValues(memberName));\n\t\t\tcase \"namedCurve\":\n\t\t\t\treturn memberValue === \"\";\n\t\t\tcase \"publicKey\":\n\t\t\t\treturn _ECPublicKey2.default.compareWithDefault(\"namedCurve\", memberValue.namedCurve) && _ECPublicKey2.default.compareWithDefault(\"x\", memberValue.x) && _ECPublicKey2.default.compareWithDefault(\"y\", memberValue.y);\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for ECCPrivateKey class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * ECPrivateKey ::= SEQUENCE {\r\n  * version        INTEGER { ecPrivkeyVer1(1) } (ecPrivkeyVer1),\r\n  * privateKey     OCTET STRING,\r\n  * parameters [0] ECParameters {{ NamedCurve }} OPTIONAL,\r\n  * publicKey  [1] BIT STRING OPTIONAL\r\n  * }\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}) {\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} [blockName]\r\n   * @property {string} [version]\r\n   * @property {string} [privateKey]\r\n   * @property {string} [namedCurve]\r\n   * @property {string} [publicKey]\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\treturn new asn1js.Sequence({\n\t\t\tname: names.blockName || \"\",\n\t\t\tvalue: [new asn1js.Integer({ name: names.version || \"\" }), new asn1js.OctetString({ name: names.privateKey || \"\" }), new asn1js.Constructed({\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalue: [new asn1js.ObjectIdentifier({ name: names.namedCurve || \"\" })]\n\t\t\t}), new asn1js.Constructed({\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tvalue: [new asn1js.BitString({ name: names.publicKey || \"\" })]\n\t\t\t})]\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Clear input data first\n\t\t(0, _pvutils.clearProps)(schema, [\"version\", \"privateKey\", \"namedCurve\", \"publicKey\"]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, ECPrivateKey.schema({\n\t\t\tnames: {\n\t\t\t\tversion: \"version\",\n\t\t\t\tprivateKey: \"privateKey\",\n\t\t\t\tnamedCurve: \"namedCurve\",\n\t\t\t\tpublicKey: \"publicKey\"\n\t\t\t}\n\t\t}));\n\n\t\tif (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for ECPrivateKey\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\n\t\tthis.privateKey = asn1.result.privateKey;\n\n\t\tif (\"namedCurve\" in asn1.result) this.namedCurve = asn1.result.namedCurve.valueBlock.toString();\n\n\t\tif (\"publicKey\" in asn1.result) {\n\t\t\tconst publicKeyData = { schema: asn1.result.publicKey.valueBlock.valueHex };\n\t\t\tif (\"namedCurve\" in this) publicKeyData.namedCurve = this.namedCurve;\n\n\t\t\tthis.publicKey = new _ECPublicKey2.default(publicKeyData);\n\t\t}\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\tconst outputArray = [new asn1js.Integer({ value: this.version }), this.privateKey];\n\n\t\tif (\"namedCurve\" in this) {\n\t\t\toutputArray.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalue: [new asn1js.ObjectIdentifier({ value: this.namedCurve })]\n\t\t\t}));\n\t\t}\n\n\t\tif (\"publicKey\" in this) {\n\t\t\toutputArray.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tvalue: [new asn1js.BitString({ valueHex: this.publicKey.toSchema().toBER(false) })]\n\t\t\t}));\n\t\t}\n\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: outputArray\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\tif (\"namedCurve\" in this === false || ECPrivateKey.compareWithDefault(\"namedCurve\", this.namedCurve)) throw new Error(\"Not enough information for making JSON: absent \\\"namedCurve\\\" value\");\n\n\t\tlet crvName = \"\";\n\n\t\tswitch (this.namedCurve) {\n\t\t\tcase \"1.2.840.10045.3.1.7\":\n\t\t\t\t// P-256\n\t\t\t\tcrvName = \"P-256\";\n\t\t\t\tbreak;\n\t\t\tcase \"1.3.132.0.34\":\n\t\t\t\t// P-384\n\t\t\t\tcrvName = \"P-384\";\n\t\t\t\tbreak;\n\t\t\tcase \"1.3.132.0.35\":\n\t\t\t\t// P-521\n\t\t\t\tcrvName = \"P-521\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\n\t\tconst privateKeyJSON = {\n\t\t\tcrv: crvName,\n\t\t\td: (0, _pvutils.toBase64)((0, _pvutils.arrayBufferToString)(this.privateKey.valueBlock.valueHex), true, true, false)\n\t\t};\n\n\t\tif (\"publicKey\" in this) {\n\t\t\tconst publicKeyJSON = this.publicKey.toJSON();\n\n\t\t\tprivateKeyJSON.x = publicKeyJSON.x;\n\t\t\tprivateKeyJSON.y = publicKeyJSON.y;\n\t\t}\n\n\t\treturn privateKeyJSON;\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert JSON value into current object\r\n  * @param {Object} json\r\n  */\n\tfromJSON(json) {\n\t\tlet coodinateLength = 0;\n\n\t\tif (\"crv\" in json) {\n\t\t\tswitch (json.crv.toUpperCase()) {\n\t\t\t\tcase \"P-256\":\n\t\t\t\t\tthis.namedCurve = \"1.2.840.10045.3.1.7\";\n\t\t\t\t\tcoodinateLength = 32;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"P-384\":\n\t\t\t\t\tthis.namedCurve = \"1.3.132.0.34\";\n\t\t\t\t\tcoodinateLength = 48;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"P-521\":\n\t\t\t\t\tthis.namedCurve = \"1.3.132.0.35\";\n\t\t\t\t\tcoodinateLength = 66;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t}\n\t\t} else throw new Error(\"Absent mandatory parameter \\\"crv\\\"\");\n\n\t\tif (\"d\" in json) {\n\t\t\tconst convertBuffer = (0, _pvutils.stringToArrayBuffer)((0, _pvutils.fromBase64)(json.d, true));\n\n\t\t\tif (convertBuffer.byteLength < coodinateLength) {\n\t\t\t\tconst buffer = new ArrayBuffer(coodinateLength);\n\t\t\t\tconst view = new Uint8Array(buffer);\n\t\t\t\tconst convertBufferView = new Uint8Array(convertBuffer);\n\t\t\t\tview.set(convertBufferView, 1);\n\n\t\t\t\tthis.privateKey = new asn1js.OctetString({ valueHex: buffer });\n\t\t\t} else this.privateKey = new asn1js.OctetString({ valueHex: convertBuffer.slice(0, coodinateLength) });\n\t\t} else throw new Error(\"Absent mandatory parameter \\\"d\\\"\");\n\n\t\tif (\"x\" in json && \"y\" in json) this.publicKey = new _ECPublicKey2.default({ json });\n\t}\n\t//**********************************************************************************\n}\nexports.default = ECPrivateKey; //**************************************************************************************\n//# sourceMappingURL=ECPrivateKey.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nvar _AccessDescription = require(\"./AccessDescription.js\");\n\nvar _AccessDescription2 = _interopRequireDefault(_AccessDescription);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n/**\r\n * Class from RFC5280\r\n */\nclass InfoAccess {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for InfoAccess class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\t/**\r\n   * @type {Array.<AccessDescription>}\r\n   * @desc accessDescriptions\r\n   */\n\t\tthis.accessDescriptions = (0, _pvutils.getParametersValue)(parameters, \"accessDescriptions\", InfoAccess.defaultValues(\"accessDescriptions\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"accessDescriptions\":\n\t\t\t\treturn [];\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for InfoAccess class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * AuthorityInfoAccessSyntax  ::=\r\n  * SEQUENCE SIZE (1..MAX) OF AccessDescription\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}) {\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} [blockName]\r\n   * @property {string} [accessDescriptions]\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\treturn new asn1js.Sequence({\n\t\t\tname: names.blockName || \"\",\n\t\t\tvalue: [new asn1js.Repeated({\n\t\t\t\tname: names.accessDescriptions || \"\",\n\t\t\t\tvalue: _AccessDescription2.default.schema()\n\t\t\t})]\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Clear input data first\n\t\t(0, _pvutils.clearProps)(schema, [\"accessDescriptions\"]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, InfoAccess.schema({\n\t\t\tnames: {\n\t\t\t\taccessDescriptions: \"accessDescriptions\"\n\t\t\t}\n\t\t}));\n\n\t\tif (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for InfoAccess\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.accessDescriptions = Array.from(asn1.result.accessDescriptions, element => new _AccessDescription2.default({ schema: element }));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: Array.from(this.accessDescriptions, element => element.toSchema())\n\t\t});\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\treturn {\n\t\t\taccessDescriptions: Array.from(this.accessDescriptions, element => element.toJSON())\n\t\t};\n\t}\n\t//**********************************************************************************\n}\nexports.default = InfoAccess; //**************************************************************************************\n//# sourceMappingURL=InfoAccess.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _asn1js = require(\"asn1js\");\n\nvar asn1js = _interopRequireWildcard(_asn1js);\n\nvar _pvutils = require(\"pvutils\");\n\nvar _PolicyMapping = require(\"./PolicyMapping.js\");\n\nvar _PolicyMapping2 = _interopRequireDefault(_PolicyMapping);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//**************************************************************************************\n/**\r\n * Class from RFC5280\r\n */\nclass PolicyMappings {\n\t//**********************************************************************************\n\t/**\r\n  * Constructor for PolicyMappings class\r\n  * @param {Object} [parameters={}]\r\n  * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n  */\n\tconstructor(parameters = {}) {\n\t\t//region Internal properties of the object\n\t\t/**\r\n   * @type {Array.<PolicyMapping>}\r\n   * @desc mappings\r\n   */\n\t\tthis.mappings = (0, _pvutils.getParametersValue)(parameters, \"mappings\", PolicyMappings.defaultValues(\"mappings\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif (\"schema\" in parameters) this.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return default values for all class members\r\n  * @param {string} memberName String name for a class member\r\n  */\n\tstatic defaultValues(memberName) {\n\t\tswitch (memberName) {\n\t\t\tcase \"mappings\":\n\t\t\t\treturn [];\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for PolicyMappings class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Return value of pre-defined ASN.1 schema for current class\r\n  *\r\n  * ASN.1 schema:\r\n  * ```asn1\r\n  * PolicyMappings ::= SEQUENCE SIZE (1..MAX) OF PolicyMapping\r\n  * ```\r\n  *\r\n  * @param {Object} parameters Input parameters for the schema\r\n  * @returns {Object} asn1js schema object\r\n  */\n\tstatic schema(parameters = {}) {\n\t\t/**\r\n   * @type {Object}\r\n   * @property {string} [blockName]\r\n   * @property {string} [utcTimeName] Name for \"utcTimeName\" choice\r\n   * @property {string} [generalTimeName] Name for \"generalTimeName\" choice\r\n   */\n\t\tconst names = (0, _pvutils.getParametersValue)(parameters, \"names\", {});\n\n\t\treturn new asn1js.Sequence({\n\t\t\tname: names.blockName || \"\",\n\t\t\tvalue: [new asn1js.Repeated({\n\t\t\t\tname: names.mappings || \"\",\n\t\t\t\tvalue: _PolicyMapping2.default.schema()\n\t\t\t})]\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert parsed asn1js object into current class\r\n  * @param {!Object} schema\r\n  */\n\tfromSchema(schema) {\n\t\t//region Clear input data first\n\t\t(0, _pvutils.clearProps)(schema, [\"mappings\"]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, PolicyMappings.schema({\n\t\t\tnames: {\n\t\t\t\tmappings: \"mappings\"\n\t\t\t}\n\t\t}));\n\n\t\tif (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for PolicyMappings\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.mappings = Array.from(asn1.result.mappings, element => new _PolicyMapping2.default({ schema: element }));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convert current object to asn1js object and set correct values\r\n  * @returns {Object} asn1js object\r\n  */\n\ttoSchema() {\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: Array.from(this.mappings, element => element.toSchema())\n\t\t});\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\r\n  * Convertion for the class to JSON object\r\n  * @returns {Object}\r\n  */\n\ttoJSON() {\n\t\treturn {\n\t\t\tmappings: Array.from(this.mappings, element => element.toJSON())\n\t\t};\n\t}\n\t//**********************************************************************************\n}\nexports.default = PolicyMappings; //**************************************************************************************\n//# sourceMappingURL=PolicyMappings.js.map"],"sourceRoot":""}