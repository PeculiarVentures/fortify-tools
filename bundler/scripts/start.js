/* eslint "import/no-extraneous-dependencies": 1 */

require("./config");

// Do this as the first thing so that any code reading it knows the right env.
process.env.BABEL_ENV = 'development';
process.env.NODE_ENV = 'development';

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on('unhandledRejection', (err) => {
  throw err;
});

const fs = require('fs');
const path = require('path');
const chalk = require('chalk');
const webpack = require('webpack');
const WebpackDevServer = require('webpack-dev-server');
const {
  choosePort,
  createCompiler,
  prepareUrls,
} = require('react-dev-utils/WebpackDevServerUtils');
const openBrowser = require('react-dev-utils/openBrowser');
const { name } = require('../../package.json');
const getClientEnvironment = require('../utils/env');

const env = getClientEnvironment();

// Tools like Cloud9 rely on this.
const DEFAULT_PORT = parseInt(env.raw.PORT, 10) || 3000;
const HOST = env.raw.HOST || '0.0.0.0';

if (process.env.HOST) {
  console.log(
    chalk.cyan(`Attempting to bind to HOST environment variable: ${chalk.yellow(chalk.bold(env.raw.HOST))}`),
  );
  console.log('If this was unintentional, check that you haven\'t mistakenly set it in your shell');
  console.log(`Learn more here: ${chalk.yellow('http://bit.ly/2mwWSwH')}`);
  console.log();
}

// We attempt to use the default port but if it is busy, we offer the user to
// run on a different port. `choosePort()` Promise resolves to the next free port.
choosePort(HOST, DEFAULT_PORT)
  .then((port) => {
    const entryFolderPath = path.resolve(__dirname, `../../${env.raw.ENTRY_FOLDER}`);

    if (!fs.existsSync(entryFolderPath)) {
      throw Error(`Entry folder "${entryFolderPath}" was not found. Please check your "ENTRY_FOLDER" env varialbe.\n`);
    }

    const config = require('../config/dev.config'); // eslint-disable-line
    const createDevServerConfig = require('../config/devServer.config'); // eslint-disable-line

    if (port == null) {
      // We have not found a port.
      return;
    }

    const protocol = env.raw.HTTPS === 'true' ? 'https' : 'http';
    const urls = prepareUrls(protocol, HOST, port);
    // Create a webpack compiler that is configured with custom messages.
    const compiler = createCompiler(webpack, config, name, urls);

    // Serve webpack assets generated by the compiler over a web sever.
    const serverConfig = createDevServerConfig(
      {},
      urls.lanUrlForConfig,
    );
    const devServer = new WebpackDevServer(compiler, serverConfig);
    // Launch WebpackDevServer.
    devServer.listen(port, HOST, (err) => {
      if (err) {
        return console.log(err);
      }

      console.log(chalk.cyan('Starting the development server...\n'));
      return openBrowser(urls.localUrlForBrowser);
    });

    ['SIGINT', 'SIGTERM'].forEach((sig) => {
      process.on(sig, () => {
        devServer.close();
        process.exit();
      });
    });
  })
  .catch((err) => {
    if (err && err.message) {
      console.log(err.message);
    }

    process.exit(1);
  });
  